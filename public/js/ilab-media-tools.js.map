{"version":3,"sources":["../vendor/cropper/dist/cropper.js","ilab-crop.js","components/imgix-component.js","components/imgix-label.js","components/imgix-slider.js","components/imgix-color.js","components/imgix-alignment.js","components/imgix-media-chooser.js","components/imgix-pillbox.js","ilab-imgix-presets.js","ilab-sidebar-tabs.js","ilab-imgix.js"],"names":["factory","define","amd","exports","require","jQuery","$","isNumber","n","isNaN","isUndefined","toArray","obj","offset","args","push","slice","apply","proxy","fn","context","arguments","concat","isCrossOriginURL","url","parts","match","location","protocol","hostname","port","addTimestamp","timestamp","Date","getTime","indexOf","getTransform","options","transforms","rotate","scaleX","scaleY","length","join","getRotatedSizes","data","reverse","newWidth","newHeight","deg","abs","degree","arc","Math","PI","sinArc","sin","cosArc","cos","width","height","aspectRatio","getSourceCanvas","image","translateX","translateY","rotated","canvas","getContext","x","y","naturalWidth","naturalHeight","scalable","rotatable","advanced","canvasWidth","canvasHeight","save","translate","scale","drawImage","restore","Cropper","element","this","$element","extend","DEFAULTS","isPlainObject","ready","built","cropped","disabled","replaced","isImg","originalUrl","cropBox","init","$window","window","$document","document","NAMESPACE","PREVIEW","CLASS_MODAL","CLASS_HIDE","CLASS_HIDDEN","CLASS_INVISIBLE","CLASS_MOVE","CLASS_CROP","CLASS_DISABLED","CLASS_BG","EVENT_MOUSE_DOWN","EVENT_MOUSE_MOVE","EVENT_MOUSE_UP","EVENT_WHEEL","EVENT_DBLCLICK","EVENT_RESIZE","EVENT_BUILD","EVENT_BUILT","EVENT_CROP_START","EVENT_CROP_MOVE","EVENT_CROP_END","EVENT_CROP","EVENT_ZOOM","REGEXP_ACTIONS","ACTION_EAST","ACTION_WEST","ACTION_SOUTH","ACTION_NORTH","ACTION_SOUTH_EAST","ACTION_SOUTH_WEST","ACTION_NORTH_EAST","ACTION_NORTH_WEST","ACTION_ALL","ACTION_CROP","ACTION_MOVE","ACTION_ZOOM","ACTION_NONE","SUPPORT_CANVAS","isFunction","sqrt","min","max","num","parseFloat","prototype","$this","is","attr","prop","toDataURL","load","trigger","type","e","Event","isDefaultPrevented","bustCacheUrl","$clone","crossOrigin","one","build","checkImageOrigin","remove","addClass","insertAfter","$cropper","$cropBox","$face","unbuild","TEMPLATE","removeClass","$container","parent","append","$canvas","find","$dragBox","$viewBox","initPreview","bind","NaN","autoCrop","modal","guides","center","cropBoxMovable","highlight","background","cropBoxResizable","setDragMode","dragCrop","movable","render","setData","initialImage","initialCanvas","initialCropBox","container","unbind","resetPreview","$preview","initContainer","initCanvas","initCropBox","renderCanvas","renderCropBox","css","minContainerWidth","minContainerHeight","containerWidth","containerHeight","oldLeft","left","oldTop","top","limitCanvas","size","position","minCanvasWidth","minCanvasHeight","strict","initialCanvasWidth","initialCanvasHeight","minWidth","minHeight","maxWidth","Infinity","maxHeight","minLeft","minTop","maxLeft","maxTop","changed","renderImage","limitCropBox","output","reversed","marginLeft","marginTop","transform","autoCropArea","minCropBoxWidth","minCropBoxHeight","preview","getData","html","each","original","removeData","ratio","cropstart","on","cropmove","cropend","crop","zoom","cropStart","zoomable","mouseWheelZoom","wheel","doubleClickToggle","dblclick","_cropMove","cropMove","_cropEnd","cropEnd","responsive","_resize","resize","off","canvasData","cropBoxData","getCanvasData","getCropBoxData","setCanvasData","i","setCropBoxData","hasClass","event","originalEvent","wheelZoomRatio","delta","preventDefault","deltaY","wheelDelta","detail","touchesLength","action","touches","touchDragZoom","startX2","pageX","startY2","pageY","target","test","cropping","startX","startY","endX2","endY2","endX","endY","change","shiftKey","toggleClass","range","right","bottom","renderable","X","Y","x1","y1","x2","y2","z1","z2","reset","clear","replace","enable","disable","destroy","move","offsetX","offsetY","_originalEvent","rounded","round","call","getContainerData","getImageData","widthChanged","heightChanged","getCroppedCanvas","originalWidth","originalHeight","scaledWidth","scaledHeight","scaledRatio","fillColor","fillStyle","fillRect","srcWidth","srcHeight","dstX","dstY","dstWidth","dstHeight","source","sourceWidth","sourceHeight","srcX","srcY","setAspectRatio","mode","croppable","setDefaults","other","cropper","result","Constructor","noConflict","ILabCrop","settings","modalContainer","modal_id","cropperData","resizeTimerId","cropRef","isResizing","ilabTabs","currentValue","tabSelected","tab","ILabModal","loadURL","response","console","log","bindUI","prev_crop_x","prev_crop_y","prev_crop_width","prev_crop_height","updatePreviewWidth","clearTimeout","setTimeout","_resized","aspect_ratio","hasOwnProperty","cropped_src","size_title","text","min_width","min_height","displayStatus","image_id","post","ajaxurl","status","hideStatus","src","message","ImgixComponents","byteToHex","byte","hexChar","utilities","imgixLabel","changeTimerId","label","currentVal","textInput","keyCode","val","parseInt","metaKey","select","focus","ImgixSlider","delegate","valueLabel","slider","resetButton","defaultValue","param","sliderRef","newVal","hide","show","saveValue","ImgixColor","colorPicker","alphaSlider","colorPickerRef","blendParam","blendSelect","currentBlend","wpColorPicker","palettes","ui","blend","alpha","substring","ImgixAlignment","alignmentParam","alignmentRef","button","ImgixMediaChooser","mediaInput","selectButton","uploader","wp","media","title","multiple","mediaRef","attachment","state","get","first","toJSON","id","open","removeAttr","replaceWith","clone","ImgixPillbox","values","split","buttons","inputs","pillboxRef","valueName","Object","keys","forEach","key","index","vals","ILabImgixPresets","presetSelect","presetContainer","presetDefaultCheckbox","self","resetAll","preset","presets","default_for","bindPreset","newPreset","savePreset","deletePreset","currentPreset","clearSelected","setCurrentPreset","is_default","name","prompt","postAjax","confirm","ilabSidebarTabs","firstTab","otherTab","tabTarget","ILabImageEdit","_preview","waitModal","debug","previewImage","previewTimeout","previewsSuspended","parameters","paramName","callback","postData","value","makeDirty","p","rebind","makeClean"],"mappings":"CAUA,SAAAA,GACA,kBAAAC,SAAAA,OAAAC,IAEAD,QAAA,UAAAD,GAGAA,EAFA,gBAAAG,SAEAC,QAAA,UAGAC,SAEA,SAAAC,GAEA,YAqEA,SAAAC,GAAAC,GACA,MAAA,gBAAAA,KAAAC,MAAAD,GAGA,QAAAE,GAAAF,GACA,MAAA,mBAAAA,GAGA,QAAAG,GAAAC,EAAAC,GACA,GAAAC,KAOA,OAJAP,GAAAM,IACAC,EAAAC,KAAAF,GAGAC,EAAAE,MAAAC,MAAAL,EAAAE,GAIA,QAAAI,GAAAC,EAAAC,GACA,GAAAN,GAAAH,EAAAU,UAAA,EAEA,OAAA,YACA,MAAAF,GAAAF,MAAAG,EAAAN,EAAAQ,OAAAX,EAAAU,cAIA,QAAAE,GAAAC,GACA,GAAAC,GAAAD,EAAAE,MAAA,sCAEA,OAAAD,KACAA,EAAA,KAAAE,EAAAC,UACAH,EAAA,KAAAE,EAAAE,UACAJ,EAAA,KAAAE,EAAAG,MAIA,QAAAC,GAAAP,GACA,GAAAQ,GAAA,cAAA,GAAAC,OAAAC,SAEA,OAAAV,IAAA,KAAAA,EAAAW,QAAA,KAAA,IAAA,KAAAH,EAGA,QAAAI,GAAAC,GACA,GAAAC,MACAC,EAAAF,EAAAE,OACAC,EAAAH,EAAAG,OACAC,EAAAJ,EAAAI,MAUA,OARAlC,GAAAgC,IACAD,EAAAvB,KAAA,UAAAwB,EAAA,QAGAhC,EAAAiC,IAAAjC,EAAAkC,IACAH,EAAAvB,KAAA,SAAAyB,EAAA,IAAAC,EAAA,KAGAH,EAAAI,OAAAJ,EAAAK,KAAA,KAAA,OAGA,QAAAC,GAAAC,EAAAC,GACA,GAOAC,GACAC,EARAC,EAAAC,GAAAL,EAAAM,QAAA,IACAC,GAAAH,EAAA,GAAA,IAAAA,EAAAA,GAAAI,KAAAC,GAAA,IACAC,EAAAC,GAAAJ,GACAK,EAAAC,GAAAN,GACAO,EAAAd,EAAAc,MACAC,EAAAf,EAAAe,OACAC,EAAAhB,EAAAgB,WAYA,OARAf,IAIAC,EAAAY,GAAAF,EAAAF,EAAAM,GACAb,EAAAD,EAAAc,IAJAd,EAAAY,EAAAF,EAAAG,EAAAL,EACAP,EAAAW,EAAAJ,EAAAK,EAAAH,IAOAE,MAAAZ,EACAa,OAAAZ,GAIA,QAAAc,GAAAC,EAAAlB,GACA,GAcAmB,GACAC,EACAC,EAhBAC,EAAA7D,EAAA,YAAA,GACAc,EAAA+C,EAAAC,WAAA,MACAC,EAAA,EACAC,EAAA,EACAX,EAAAd,EAAA0B,aACAX,EAAAf,EAAA2B,cACAjC,EAAAM,EAAAN,OACAC,EAAAK,EAAAL,OACAC,EAAAI,EAAAJ,OACAgC,EAAAlE,EAAAiC,IAAAjC,EAAAkC,KAAA,IAAAD,GAAA,IAAAC,GACAiC,EAAAnE,EAAAgC,IAAA,IAAAA,EACAoC,EAAAD,GAAAD,EACAG,EAAAjB,EACAkB,EAAAjB,CAiDA,OA5CAa,KACAT,EAAAL,EAAA,EACAM,EAAAL,EAAA,GAGAc,IACAR,EAAAtB,GACAe,MAAAA,EACAC,OAAAA,EACAT,OAAAZ,IAGAqC,EAAAV,EAAAP,MACAkB,EAAAX,EAAAN,OACAI,EAAAE,EAAAP,MAAA,EACAM,EAAAC,EAAAN,OAAA,GAGAO,EAAAR,MAAAiB,EACAT,EAAAP,OAAAiB,EAEAF,IACAN,GAAAV,EAAA,EACAW,GAAAV,EAAA,EAEAxC,EAAA0D,OACA1D,EAAA2D,UAAAf,EAAAC,IAGAS,GACAtD,EAAAmB,OAAAA,EAAAc,KAAAC,GAAA,KAIAmB,GACArD,EAAA4D,MAAAxC,EAAAC,GAGArB,EAAA6D,UAAAlB,EAAAM,EAAAC,EAAAX,EAAAC,GAEAe,GACAvD,EAAA8D,UAGAf,EAGA,QAAAgB,GAAAC,EAAA/C,GACAgD,KAAAC,SAAAhF,EAAA8E,GACAC,KAAAhD,QAAA/B,EAAAiF,UAAAJ,EAAAK,SAAAlF,EAAAmF,cAAApD,IAAAA,GACAgD,KAAAK,OAAA,EACAL,KAAAM,OAAA,EACAN,KAAAnB,SAAA,EACAmB,KAAAO,SAAA,EACAP,KAAAQ,UAAA,EACAR,KAAAS,UAAA,EACAT,KAAAU,OAAA,EACAV,KAAAW,YAAA,GACAX,KAAAlB,OAAA,KACAkB,KAAAY,QAAA,KACAZ,KAAAa,OAvOA,GAAAC,GAAA7F,EAAA8F,QACAC,EAAA/F,EAAAgG,UACA3E,EAAAyE,OAAAzE,SAGA4E,EAAA,UACAC,EAAA,WAAAD,EAGAE,EAAA,gBACAC,EAAA,eACAC,EAAA,iBACAC,EAAA,oBACAC,EAAA,eACAC,EAAA,eACAC,EAAA,mBACAC,EAAA,aAGAC,EAAA,iDACAC,EAAA,gDACAC,EAAA,mFACAC,EAAA,kCACAC,EAAA,WACAC,EAAA,UAAAf,EACAgB,EAAA,SAAAhB,EACAiB,EAAA,SAAAjB,EACAkB,EAAA,aAAAlB,EACAmB,EAAA,YAAAnB,EACAoB,EAAA,WAAApB,EACAqB,EAAA,QAAArB,EACAsB,EAAA,QAAAtB,EAGAuB,EAAA,6CAGAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,IACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,MACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OACAC,EAAA,OAGAC,EAAAtI,EAAAuI,WAAAvI,EAAA,YAAA,GAAA8D,YAGA0E,EAAAzF,KAAAyF,KACAC,EAAA1F,KAAA0F,IACAC,GAAA3F,KAAA2F,IACA9F,GAAAG,KAAAH,IACAM,GAAAH,KAAAG,IACAE,GAAAL,KAAAK,IACAuF,GAAAC,WAGAC,KA0KA7I,GAAAiF,OAAA4D,IACAjD,KAAA,WACA,GACA1E,GADA4H,EAAA/D,KAAAC,QAGA,IAAA8D,EAAAC,GAAA,OAAA,CAOA,GANAhE,KAAAU,OAAA,EAGAV,KAAAW,YAAAxE,EAAA4H,EAAAE,KAAA,QAGA9H,EACA,MAIAA,GAAA4H,EAAAG,KAAA,WACAH,GAAAC,GAAA,WAAAT,IACApH,EAAA4H,EAAA,GAAAI,YAGAnE,MAAAoE,KAAAjI,IAIAkI,QAAA,SAAAC,EAAA9G,GACA,GAAA+G,GAAAtJ,EAAAuJ,MAAAF,EAAA9G,EAIA,OAFAwC,MAAAC,SAAAoE,QAAAE,GAEAA,EAAAE,sBAGAL,KAAA,SAAAjI,GACA,GAGAuI,GACAC,EAJA3H,EAAAgD,KAAAhD,QACA+G,EAAA/D,KAAAC,SACA2E,EAAA,EAIAzI,KAKA4H,EAAAc,IAAA3C,EAAAlF,EAAA8H,OAEA9E,KAAAqE,QAAAnC,KAIAlF,EAAA+H,kBAAA7I,EAAAC,KACAyI,EAAA,2BAGAb,EAAAG,KAAA,iBACAQ,EAAAhI,EAAAP,KAKA6D,KAAA2E,OAAAA,EAAA1J,EAAA,OAAA2J,EAAA,UAAAF,GAAAvI,GAAA,MAEAwI,EAAAE,IAAA,OAAA5J,EAAAY,MAAA,WACA,GAAA6C,GAAAiG,EAAA,GAGAzF,EAAAR,EAAAQ,cAAAR,EAAAJ,MACAa,EAAAT,EAAAS,eAAAT,EAAAH,MAEAyB,MAAAtB,OACAQ,aAAAA,EACAC,cAAAA,EACAX,YAAAU,EAAAC,GAGAa,KAAA7D,IAAAA,EACA6D,KAAAK,OAAA,EACAL,KAAA8E,SACA9E,OAAA6E,IAAA,QAAA,WACAF,EAAAK,WAIAL,EAAAM,SAAA5D,GAAA6D,YAAAnB,QAIA9I,EAAAiF,OAAA4D,IACAgB,MAAA,WACA,GAGAK,GACAC,EACAC,EALArI,EAAAgD,KAAAhD,QACA+G,EAAA/D,KAAAC,SACA0E,EAAA3E,KAAA2E,MAKA3E,MAAAK,QAKAL,KAAAM,OACAN,KAAAsF,UAIAtF,KAAAmF,SAAAA,EAAAlK,EAAA6E,EAAAyF,UAGAxB,EAAAkB,SAAA3D,GAGAqD,EAAAa,YAAAnE,GAEArB,KAAAyF,WAAA1B,EAAA2B,SAAAC,OAAAR,GACAnF,KAAA4F,QAAAT,EAAAU,KAAA,mBAAAF,OAAAhB,GACA3E,KAAA8F,SAAAX,EAAAU,KAAA,qBACA7F,KAAAoF,SAAAA,EAAAD,EAAAU,KAAA,qBACA7F,KAAA+F,SAAAZ,EAAAU,KAAA,qBACA7F,KAAAqF,MAAAA,EAAAD,EAAAS,KAAA,iBAEA7F,KAAAgG,cACAhG,KAAAiG,OAGAjJ,EAAAwB,YAAAoF,GAAA5G,EAAAwB,cAAA0H,IAEAlJ,EAAAmJ,UACAnG,KAAAO,SAAA,EAEAvD,EAAAoJ,OACApG,KAAA8F,SAAAb,SAAA7D,IAGAgE,EAAAH,SAAA3D,GAGAtE,EAAAqJ,QACAjB,EAAAS,KAAA,mBAAAZ,SAAA3D,GAGAtE,EAAAsJ,QACAlB,EAAAS,KAAA,mBAAAZ,SAAA3D,GAGAtE,EAAAuJ,gBACAlB,EAAAJ,SAAAzD,GAAAhE,KAAA,SAAA0F,GAGAlG,EAAAwJ,WACAnB,EAAAJ,SAAA1D,GAGAvE,EAAAyJ,YACAtB,EAAAF,SAAAtD,GAGA3E,EAAA0J,kBACAtB,EAAAS,KAAA,iCAAAZ,SAAA3D,GAGAtB,KAAA2G,YAAA3J,EAAA4J,SAAAzD,EAAAnG,EAAA6J,QAAAzD,EAAAE,GAEAtD,KAAAM,OAAA,EACAN,KAAA8G,SACA9G,KAAA+G,QAAA/J,EAAAQ,MACAuG,EAAAc,IAAA1C,EAAAnF,EAAAsD,OACAN,KAAAqE,QAAAlC,KAGAmD,QAAA,WACAtF,KAAAM,QAIAN,KAAAM,OAAA,EACAN,KAAAgH,aAAA,KAGAhH,KAAAiH,cAAA,KACAjH,KAAAkH,eAAA,KACAlH,KAAAmH,UAAA,KACAnH,KAAAlB,OAAA,KAGAkB,KAAAY,QAAA,KACAZ,KAAAoH,SAEApH,KAAAqH,eACArH,KAAAsH,SAAA,KAEAtH,KAAA+F,SAAA,KACA/F,KAAAoF,SAAA,KACApF,KAAA8F,SAAA,KACA9F,KAAA4F,QAAA,KACA5F,KAAAyF,WAAA,KAEAzF,KAAAmF,SAAAH,SACAhF,KAAAmF,SAAA,SAIAlK,EAAAiF,OAAA4D,IACAgD,OAAA,WACA9G,KAAAuH,gBACAvH,KAAAwH,aACAxH,KAAAyH,cAEAzH,KAAA0H,eAEA1H,KAAAO,SACAP,KAAA2H,iBAIAJ,cAAA,WACA,GAAAvK,GAAAgD,KAAAhD,QACA+G,EAAA/D,KAAAC,SACAwF,EAAAzF,KAAAyF,WACAN,EAAAnF,KAAAmF,QAEAA,GAAAF,SAAA3D,GACAyC,EAAAyB,YAAAlE,GAEA6D,EAAAyC,IAAA5H,KAAAmH,WACA7I,MAAAqF,GAAA8B,EAAAnH,QAAAsF,GAAA5G,EAAA6K,oBAAA,KACAtJ,OAAAoF,GAAA8B,EAAAlH,SAAAqF,GAAA5G,EAAA8K,qBAAA,OAGA/D,EAAAkB,SAAA3D,GACA6D,EAAAK,YAAAlE,IAIAkG,WAAA,WACA,GAAAL,GAAAnH,KAAAmH,UACAY,EAAAZ,EAAA7I,MACA0J,EAAAb,EAAA5I,OACAG,EAAAsB,KAAAtB,MACAF,EAAAE,EAAAF,YACAM,GACAN,YAAAA,EACAF,MAAAyJ,EACAxJ,OAAAyJ,EAGAA,GAAAxJ,EAAAuJ,EACAjJ,EAAAP,OAAAwJ,EAAAvJ,EAEAM,EAAAR,MAAA0J,EAAAxJ,EAGAM,EAAAmJ,QAAAnJ,EAAAoJ,MAAAH,EAAAjJ,EAAAR,OAAA,EACAQ,EAAAqJ,OAAArJ,EAAAsJ,KAAAJ,EAAAlJ,EAAAP,QAAA,EAEAyB,KAAAlB,OAAAA,EACAkB,KAAAqI,aAAA,GAAA,GACArI,KAAAgH,aAAA/L,EAAAiF,UAAAxB,GACAsB,KAAAiH,cAAAhM,EAAAiF,UAAApB,IAGAuJ,YAAA,SAAAC,EAAAC,GACA,GAYAC,GACAC,EAbAzL,EAAAgD,KAAAhD,QACA0L,EAAA1L,EAAA0L,OACAvB,EAAAnH,KAAAmH,UACAY,EAAAZ,EAAA7I,MACA0J,EAAAb,EAAA5I,OACAO,EAAAkB,KAAAlB,OACAN,EAAAM,EAAAN,YACAoC,EAAAZ,KAAAY,QACAL,EAAAP,KAAAO,SAAAK,EACAqG,EAAAjH,KAAAiH,eAAAnI,EACA6J,EAAA1B,EAAA3I,MACAsK,EAAA3B,EAAA1I,MAIA+J,KACAE,EAAA5E,GAAA5G,EAAAwL,iBAAA,EACAC,EAAA7E,GAAA5G,EAAAyL,kBAAA,EAEAD,GACAE,IACAF,EAAA7E,GAAApD,EAAAK,EAAAtC,MAAAqK,EAAAH,IAGAC,EAAAD,EAAAhK,GACAiK,GACAC,IACAD,EAAA9E,GAAApD,EAAAK,EAAArC,OAAAqK,EAAAH,IAGAD,EAAAC,EAAAjK,GACAkK,IACAnI,GACAiI,EAAA5H,EAAAtC,MACAmK,EAAA7H,EAAArC,OAEAkK,EAAAjK,EAAAgK,EACAA,EAAAC,EAAAjK,EAEAiK,EAAAD,EAAAhK,IAGAgK,EAAAG,EACAF,EAAAG,IAIA3N,EAAAiF,OAAApB,GACA+J,SAAAL,EACAM,UAAAL,EACAM,SAAAC,EAAAA,EACAC,UAAAD,EAAAA,KAIAT,IACAG,EACAnI,GACAzB,EAAAoK,QAAAxF,EAAA9C,EAAAsH,KAAAtH,EAAAsH,KAAAtH,EAAAtC,MAAAQ,EAAAR,OACAQ,EAAAqK,OAAAzF,EAAA9C,EAAAwH,IAAAxH,EAAAwH,IAAAxH,EAAArC,OAAAO,EAAAP,QACAO,EAAAsK,QAAAxI,EAAAsH,KACApJ,EAAAuK,OAAAzI,EAAAwH,MAEAtJ,EAAAoK,QAAAxF,EAAA,EAAAqE,EAAAjJ,EAAAR,OACAQ,EAAAqK,OAAAzF,EAAA,EAAAsE,EAAAlJ,EAAAP,QACAO,EAAAsK,QAAAzF,GAAA,EAAAoE,EAAAjJ,EAAAR,OACAQ,EAAAuK,OAAA1F,GAAA,EAAAqE,EAAAlJ,EAAAP,UAGAO,EAAAoK,SAAApK,EAAAR,MACAQ,EAAAqK,QAAArK,EAAAP,OACAO,EAAAsK,QAAArB,EACAjJ,EAAAuK,OAAArB,KAKAN,aAAA,SAAA4B,GACA,GAGA9K,GACAK,EAJA7B,EAAAgD,KAAAhD,QACA8B,EAAAkB,KAAAlB,OACAJ,EAAAsB,KAAAtB,KAIAsB,MAAAnB,UACAmB,KAAAnB,SAAA,EAGAA,EAAAtB,GACAe,MAAAI,EAAAJ,MACAC,OAAAG,EAAAH,OACAT,OAAAY,EAAAxB,SAGAsB,EAAAK,EAAAP,MAAAO,EAAAN,OAEAC,IAAAM,EAAAN,cACAM,EAAAoJ,OAAArJ,EAAAP,MAAAQ,EAAAR,OAAA,EACAQ,EAAAsJ,MAAAvJ,EAAAN,OAAAO,EAAAP,QAAA,EACAO,EAAAR,MAAAO,EAAAP,MACAQ,EAAAP,OAAAM,EAAAN,OACAO,EAAAN,YAAAA,EACAwB,KAAAqI,aAAA,GAAA,MAIAvJ,EAAAR,MAAAQ,EAAAiK,UAAAjK,EAAAR,MAAAQ,EAAA+J,YACA/J,EAAAoJ,KAAApJ,EAAAmJ,UAGAnJ,EAAAP,OAAAO,EAAAmK,WAAAnK,EAAAP,OAAAO,EAAAgK,aACAhK,EAAAsJ,IAAAtJ,EAAAqJ,QAGArJ,EAAAR,MAAAoF,EAAAC,GAAA7E,EAAAR,MAAAQ,EAAA+J,UAAA/J,EAAAiK,UACAjK,EAAAP,OAAAmF,EAAAC,GAAA7E,EAAAP,OAAAO,EAAAgK,WAAAhK,EAAAmK,WAEAjJ,KAAAqI,aAAA,GAAA,GAEAvJ,EAAAmJ,QAAAnJ,EAAAoJ,KAAAxE,EAAAC,GAAA7E,EAAAoJ,KAAApJ,EAAAoK,SAAApK,EAAAsK,SACAtK,EAAAqJ,OAAArJ,EAAAsJ,IAAA1E,EAAAC,GAAA7E,EAAAsJ,IAAAtJ,EAAAqK,QAAArK,EAAAuK,QAEArJ,KAAA4F,QAAAgC,KACAtJ,MAAAQ,EAAAR,MACAC,OAAAO,EAAAP,OACA2J,KAAApJ,EAAAoJ,KACAE,IAAAtJ,EAAAsJ,MAGApI,KAAAuJ,cAEAvJ,KAAAO,SAAAvD,EAAA0L,QACA1I,KAAAwJ,cAAA,GAAA,GAGAF,GACAtJ,KAAAyJ,UAIAF,YAAA,SAAAD,GACA,GAEAI,GAFA5K,EAAAkB,KAAAlB,OACAJ,EAAAsB,KAAAtB,KAGAA,GAAAxB,SACAwM,EAAAnM,GACAe,MAAAQ,EAAAR,MACAC,OAAAO,EAAAP,OACAT,OAAAY,EAAAxB,OACAsB,YAAAE,EAAAF,cACA,IAGAvD,EAAAiF,OAAAxB,EAAAgL,GACApL,MAAAoL,EAAApL,MACAC,OAAAmL,EAAAnL,OACA2J,MAAApJ,EAAAR,MAAAoL,EAAApL,OAAA,EACA8J,KAAAtJ,EAAAP,OAAAmL,EAAAnL,QAAA,IAEAD,MAAAQ,EAAAR,MACAC,OAAAO,EAAAP,OACA2J,KAAA,EACAE,IAAA,IAGApI,KAAA2E,OAAAiD,KACAtJ,MAAAI,EAAAJ,MACAC,OAAAG,EAAAH,OACAoL,WAAAjL,EAAAwJ,KACA0B,UAAAlL,EAAA0J,IACAyB,UAAA9M,EAAA2B,KAGA4K,GACAtJ,KAAAyJ,UAIAhC,YAAA,WACA,GAAAzK,GAAAgD,KAAAhD,QACA8B,EAAAkB,KAAAlB,OACAN,EAAAxB,EAAAwB,YACAsL,EAAAlG,GAAA5G,EAAA8M,eAAA,GACAlJ,GACAtC,MAAAQ,EAAAR,MACAC,OAAAO,EAAAP,OAGAC,KACAM,EAAAP,OAAAC,EAAAM,EAAAR,MACAsC,EAAArC,OAAAqC,EAAAtC,MAAAE,EAEAoC,EAAAtC,MAAAsC,EAAArC,OAAAC,GAIAwB,KAAAY,QAAAA,EACAZ,KAAAwJ,cAAA,GAAA,GAGA5I,EAAAtC,MAAAoF,EAAAC,GAAA/C,EAAAtC,MAAAsC,EAAAiI,UAAAjI,EAAAmI,UACAnI,EAAArC,OAAAmF,EAAAC,GAAA/C,EAAArC,OAAAqC,EAAAkI,WAAAlI,EAAAqI,WAGArI,EAAAtC,MAAAqF,GAAA/C,EAAAiI,SAAAjI,EAAAtC,MAAAwL,GACAlJ,EAAArC,OAAAoF,GAAA/C,EAAAkI,UAAAlI,EAAArC,OAAAuL,GACAlJ,EAAAqH,QAAArH,EAAAsH,KAAApJ,EAAAoJ,MAAApJ,EAAAR,MAAAsC,EAAAtC,OAAA,EACAsC,EAAAuH,OAAAvH,EAAAwH,IAAAtJ,EAAAsJ,KAAAtJ,EAAAP,OAAAqC,EAAArC,QAAA,EAEAyB,KAAAkH,eAAAjM,EAAAiF,UAAAU,IAGA4I,aAAA,SAAAlB,EAAAC,GACA,GAQAwB,GACAC,EATAhN,EAAAgD,KAAAhD,QACA0L,EAAA1L,EAAA0L,OACAvB,EAAAnH,KAAAmH,UACAY,EAAAZ,EAAA7I,MACA0J,EAAAb,EAAA5I,OACAO,EAAAkB,KAAAlB,OACA8B,EAAAZ,KAAAY,QACApC,EAAAxB,EAAAwB,WAIA8J,KACAyB,EAAAnG,GAAA5G,EAAA+M,kBAAA,EACAC,EAAApG,GAAA5G,EAAAgN,mBAAA,EAGApJ,EAAAiI,SAAAnF,EAAAqE,EAAAgC,GACAnJ,EAAAkI,UAAApF,EAAAsE,EAAAgC,GACApJ,EAAAmI,SAAArF,EAAAqE,EAAAW,EAAA5J,EAAAR,MAAAyJ,GACAnH,EAAAqI,UAAAvF,EAAAsE,EAAAU,EAAA5J,EAAAP,OAAAyJ,GAEAxJ,IAGAoC,EAAAqI,UAAAzK,EAAAoC,EAAAmI,UACAnI,EAAAkI,UAAAlI,EAAAiI,SAAArK,EACAoC,EAAAqI,UAAArI,EAAAmI,SAAAvK,IAEAoC,EAAAiI,SAAAjI,EAAAkI,UAAAtK,EACAoC,EAAAmI,SAAAnI,EAAAqI,UAAAzK,IAKAoC,EAAAiI,SAAAnF,EAAA9C,EAAAmI,SAAAnI,EAAAiI,UACAjI,EAAAkI,UAAApF,EAAA9C,EAAAqI,UAAArI,EAAAkI,YAGAP,IACAG,GACA9H,EAAAsI,QAAAvF,GAAA,EAAA7E,EAAAoJ,MACAtH,EAAAuI,OAAAxF,GAAA,EAAA7E,EAAAsJ,KACAxH,EAAAwI,QAAA1F,EAAAqE,EAAAjJ,EAAAoJ,KAAApJ,EAAAR,OAAAsC,EAAAtC,MACAsC,EAAAyI,OAAA3F,EAAAsE,EAAAlJ,EAAAsJ,IAAAtJ,EAAAP,QAAAqC,EAAArC,SAEAqC,EAAAsI,QAAA,EACAtI,EAAAuI,OAAA,EACAvI,EAAAwI,QAAArB,EAAAnH,EAAAtC,MACAsC,EAAAyI,OAAArB,EAAApH,EAAArC,UAKAoJ,cAAA,WACA,GAAA3K,GAAAgD,KAAAhD,QACAmK,EAAAnH,KAAAmH,UACAY,EAAAZ,EAAA7I,MACA0J,EAAAb,EAAA5I,OACAqC,EAAAZ,KAAAY,SAEAA,EAAAtC,MAAAsC,EAAAmI,UAAAnI,EAAAtC,MAAAsC,EAAAiI,YACAjI,EAAAsH,KAAAtH,EAAAqH,UAGArH,EAAArC,OAAAqC,EAAAqI,WAAArI,EAAArC,OAAAqC,EAAAkI,aACAlI,EAAAwH,IAAAxH,EAAAuH,QAGAvH,EAAAtC,MAAAoF,EAAAC,GAAA/C,EAAAtC,MAAAsC,EAAAiI,UAAAjI,EAAAmI,UACAnI,EAAArC,OAAAmF,EAAAC,GAAA/C,EAAArC,OAAAqC,EAAAkI,WAAAlI,EAAAqI,WAEAjJ,KAAAwJ,cAAA,GAAA,GAEA5I,EAAAqH,QAAArH,EAAAsH,KAAAxE,EAAAC,GAAA/C,EAAAsH,KAAAtH,EAAAsI,SAAAtI,EAAAwI,SACAxI,EAAAuH,OAAAvH,EAAAwH,IAAA1E,EAAAC,GAAA/C,EAAAwH,IAAAxH,EAAAuI,QAAAvI,EAAAyI,QAEArM,EAAA6J,SAAA7J,EAAAuJ,gBAGAvG,KAAAqF,MAAA7H,KAAA,SAAAoD,EAAAtC,QAAAyJ,GAAAnH,EAAArC,SAAAyJ,EAAA5E,EAAAF,GAGAlD,KAAAoF,SAAAwC,KACAtJ,MAAAsC,EAAAtC,MACAC,OAAAqC,EAAArC,OACA2J,KAAAtH,EAAAsH,KACAE,IAAAxH,EAAAwH,MAGApI,KAAAO,SAAAvD,EAAA0L,QACA1I,KAAAqI,aAAA,GAAA,GAGArI,KAAAQ,UACAR,KAAAyJ,UAIAA,OAAA,WACAzJ,KAAAiK,UACAjK,KAAAqE,QAAA9B,EAAAvC,KAAAkK,cAIAjP,EAAAiF,OAAA4D,IACAkC,YAAA,WACA,GAAA7J,GAAA6D,KAAA7D,GAEA6D,MAAAsH,SAAArM,EAAA+E,KAAAhD,QAAAiN,SACAjK,KAAA+F,SAAAoE,KAAA,aAAAhO,EAAA,MACA6D,KAAAsH,SAAA8C,KAAA,WACA,GAAArG,GAAA9I,EAAA+E,KAGA+D,GAAAvG,KAAA2D,GACA7C,MAAAyF,EAAAzF,QACAC,OAAAwF,EAAAxF,SACA8L,SAAAtG,EAAAoG,SAQApG,EAAAoG,KACA,aAAAhO,EAAA,2KAQAkL,aAAA,WACArH,KAAAsH,SAAA8C,KAAA,WACA,GAAArG,GAAA9I,EAAA+E,KAEA+D,GAAAoG,KAAApG,EAAAvG,KAAA2D,GAAAkJ,UAAAC,WAAAnJ,MAIA8I,QAAA,WACA,GAAAvL,GAAAsB,KAAAtB,MACAI,EAAAkB,KAAAlB,OACA8B,EAAAZ,KAAAY,QACAtC,EAAAI,EAAAJ,MACAC,EAAAG,EAAAH,OACA2J,EAAAtH,EAAAsH,KAAApJ,EAAAoJ,KAAAxJ,EAAAwJ,KACAE,EAAAxH,EAAAwH,IAAAtJ,EAAAsJ,IAAA1J,EAAA0J,GAEApI,MAAAO,UAAAP,KAAAQ,WAIAR,KAAA+F,SAAAF,KAAA,OAAA+B,KACAtJ,MAAAA,EACAC,OAAAA,EACAoL,YAAAzB,EACA0B,WAAAxB,EACAyB,UAAA9M,EAAA2B,KAGAsB,KAAAsH,SAAA8C,KAAA,WACA,GAAArG,GAAA9I,EAAA+E,MACAxC,EAAAuG,EAAAvG,KAAA2D,GACAoJ,EAAA/M,EAAAc,MAAAsC,EAAAtC,MACAZ,EAAAF,EAAAc,MACAX,EAAAiD,EAAArC,OAAAgM,CAEA5M,GAAAH,EAAAe,SACAgM,EAAA/M,EAAAe,OAAAqC,EAAArC,OACAb,EAAAkD,EAAAtC,MAAAiM,EACA5M,EAAAH,EAAAe,QAGAwF,EAAAzF,MAAAZ,GAAAa,OAAAZ,GAAAkI,KAAA,OAAA+B,KACAtJ,MAAAA,EAAAiM,EACAhM,OAAAA,EAAAgM,EACAZ,YAAAzB,EAAAqC,EACAX,WAAAxB,EAAAmC,EACAV,UAAA9M,EAAA2B,WAMAzD,EAAAiF,OAAA4D,IACAmC,KAAA,WACA,GAAAjJ,GAAAgD,KAAAhD,QACA+G,EAAA/D,KAAAC,SACAkF,EAAAnF,KAAAmF,QAEAlK,GAAAuI,WAAAxG,EAAAwN,YACAzG,EAAA0G,GAAArI,EAAApF,EAAAwN,WAGAvP,EAAAuI,WAAAxG,EAAA0N,WACA3G,EAAA0G,GAAApI,EAAArF,EAAA0N,UAGAzP,EAAAuI,WAAAxG,EAAA2N,UACA5G,EAAA0G,GAAAnI,EAAAtF,EAAA2N,SAGA1P,EAAAuI,WAAAxG,EAAA4N,OACA7G,EAAA0G,GAAAlI,EAAAvF,EAAA4N,MAGA3P,EAAAuI,WAAAxG,EAAA6N,OACA9G,EAAA0G,GAAAjI,EAAAxF,EAAA6N,MAGA1F,EAAAsF,GAAA7I,EAAA3G,EAAAY,MAAAmE,KAAA8K,UAAA9K,OAEAhD,EAAA+N,UAAA/N,EAAAgO,gBACA7F,EAAAsF,GAAA1I,EAAA9G,EAAAY,MAAAmE,KAAAiL,MAAAjL,OAGAhD,EAAAkO,mBACA/F,EAAAsF,GAAAzI,EAAA/G,EAAAY,MAAAmE,KAAAmL,SAAAnL,OAGAgB,EACAyJ,GAAA5I,EAAA7B,KAAAoL,UAAAvP,EAAAmE,KAAAqL,SAAArL,OACAyK,GAAA3I,EAAA9B,KAAAsL,SAAAzP,EAAAmE,KAAAuL,QAAAvL,OAEAhD,EAAAwO,YACA1K,EAAA2J,GAAAxI,EAAAjC,KAAAyL,QAAA5P,EAAAmE,KAAA0L,OAAA1L,QAIAoH,OAAA,WACA,GAAApK,GAAAgD,KAAAhD,QACA+G,EAAA/D,KAAAC,SACAkF,EAAAnF,KAAAmF,QAEAlK,GAAAuI,WAAAxG,EAAAwN,YACAzG,EAAA4H,IAAAvJ,EAAApF,EAAAwN,WAGAvP,EAAAuI,WAAAxG,EAAA0N,WACA3G,EAAA4H,IAAAtJ,EAAArF,EAAA0N,UAGAzP,EAAAuI,WAAAxG,EAAA2N,UACA5G,EAAA4H,IAAArJ,EAAAtF,EAAA2N,SAGA1P,EAAAuI,WAAAxG,EAAA4N,OACA7G,EAAA4H,IAAApJ,EAAAvF,EAAA4N,MAGA3P,EAAAuI,WAAAxG,EAAA6N,OACA9G,EAAA4H,IAAAnJ,EAAAxF,EAAA6N,MAGA1F,EAAAwG,IAAA/J,EAAA5B,KAAA8K,WAEA9N,EAAA+N,UAAA/N,EAAAgO,gBACA7F,EAAAwG,IAAA5J,EAAA/B,KAAAiL,OAGAjO,EAAAkO,mBACA/F,EAAAwG,IAAA3J,EAAAhC,KAAAmL,UAGAnK,EACA2K,IAAA9J,EAAA7B,KAAAoL,WACAO,IAAA7J,EAAA9B,KAAAsL,UAEAtO,EAAAwO,YACA1K,EAAA6K,IAAA1J,EAAAjC,KAAAyL,YAKAxQ,EAAAiF,OAAA4D,IACA4H,OAAA,WACA,GAEAE,GACAC,EACAtB,EAJA9E,EAAAzF,KAAAyF,WACA0B,EAAAnH,KAAAmH,WAMAnH,KAAAQ,UAAA2G,IAIAoD,EAAA9E,EAAAnH,QAAA6I,EAAA7I,MAGA,IAAAiM,GAAA9E,EAAAlH,WAAA4I,EAAA5I,SACAqN,EAAA5L,KAAA8L,gBACAD,EAAA7L,KAAA+L,iBAEA/L,KAAA8G,SACA9G,KAAAgM,cAAA/Q,EAAAmP,KAAAwB,EAAA,SAAAK,EAAA9Q,GACAyQ,EAAAK,GAAA9Q,EAAAoP,KAEAvK,KAAAkM,eAAAjR,EAAAmP,KAAAyB,EAAA,SAAAI,EAAA9Q,GACA0Q,EAAAI,GAAA9Q,EAAAoP,QAKAY,SAAA,WACAnL,KAAAQ,WAIAR,KAAA8F,SAAAqG,SAAA1K,GACAzB,KAAA2G,YAAAvD,GAEApD,KAAA2G,YAAAxD,KAIA8H,MAAA,SAAAmB,GACA,GAAAC,GAAAD,EAAAC,cACA9H,EAAA8H,EACA9B,EAAA3G,GAAA5D,KAAAhD,QAAAsP,iBAAA,GACAC,EAAA,CAEAvM,MAAAQ,WAIA4L,EAAAI,iBAEAjI,EAAAkI,OACAF,EAAAhI,EAAAkI,OAAA,EAAA,EAAA,GACAlI,EAAAmI,WACAH,GAAAhI,EAAAmI,WAAA,IACAnI,EAAAoI,SACAJ,EAAAhI,EAAAoI,OAAA,EAAA,EAAA,IAGA3M,KAAA6K,MAAA0B,EAAAhC,EAAA8B,KAGAvB,UAAA,SAAAsB,GACA,GAIAQ,GACAC,EALA7P,EAAAgD,KAAAhD,QACAqP,EAAAD,EAAAC,cACAS,EAAAT,GAAAA,EAAAS,QACAvI,EAAA8H,GAAAD,CAIA,KAAApM,KAAAQ,SAAA,CAIA,GAAAsM,EAAA,CAGA,GAFAF,EAAAE,EAAAzP,OAEAuP,EAAA,EAAA,CACA,IAAA5P,EAAA+N,WAAA/N,EAAA+P,eAAA,IAAAH,EAMA,MALArI,GAAAuI,EAAA,GACA9M,KAAAgN,QAAAzI,EAAA0I,MACAjN,KAAAkN,QAAA3I,EAAA4I,MACAN,EAAAxJ,EAMAkB,EAAAuI,EAAA,GAKA,GAFAD,EAAAA,GAAA5R,EAAAsJ,EAAA6I,QAAA5P,KAAA,UAEAiF,EAAA4K,KAAAR,GAAA,CACA,GAAA7M,KAAAqE,QAAAjC,GACAiK,cAAAA,EACAQ,OAAAA,IAEA,MAGAT,GAAAI,iBAEAxM,KAAA6M,OAAAA,EACA7M,KAAAsN,UAAA,EACAtN,KAAAuN,OAAAhJ,EAAA0I,MACAjN,KAAAwN,OAAAjJ,EAAA4I,MAEAN,IAAA1J,IACAnD,KAAAsN,UAAA,EACAtN,KAAA8F,SAAAb,SAAA7D,OAKAiK,SAAA,SAAAe,GACA,GAKAQ,GALA5P,EAAAgD,KAAAhD,QACAqP,EAAAD,EAAAC,cACAS,EAAAT,GAAAA,EAAAS,QACAvI,EAAA8H,GAAAD,EACAS,EAAA7M,KAAA6M,MAGA,KAAA7M,KAAAQ,SAAA,CAIA,GAAAsM,EAAA,CAGA,GAFAF,EAAAE,EAAAzP,OAEAuP,EAAA,EAAA,CACA,IAAA5P,EAAA+N,WAAA/N,EAAA+P,eAAA,IAAAH,EAKA,MAJArI,GAAAuI,EAAA,GACA9M,KAAAyN,MAAAlJ,EAAA0I,MACAjN,KAAA0N,MAAAnJ,EAAA4I,MAMA5I,EAAAuI,EAAA,GAGA,GAAAD,EAAA,CACA,GAAA7M,KAAAqE,QAAAhC,GACAgK,cAAAA,EACAQ,OAAAA,IAEA,MAGAT,GAAAI,iBAEAxM,KAAA2N,KAAApJ,EAAA0I,MACAjN,KAAA4N,KAAArJ,EAAA4I,MAEAnN,KAAA6N,OAAAtJ,EAAAuJ,SAAAjB,IAAAxJ,EAAAgJ,EAAA,SAIAd,QAAA,SAAAa,GACA,GAAAC,GAAAD,EAAAC,cACAQ,EAAA7M,KAAA6M,MAEA7M,MAAAQ,UAIAqM,IACAT,EAAAI,iBAEAxM,KAAAsN,WACAtN,KAAAsN,UAAA,EACAtN,KAAA8F,SAAAiI,YAAA3M,EAAApB,KAAAO,SAAAP,KAAAhD,QAAAoJ,QAGApG,KAAA6M,OAAA,GAEA7M,KAAAqE,QAAA/B,GACA+J,cAAAA,EACAQ,OAAAA,QAMA5R,EAAAiF,OAAA4D,IACA+J,OAAA,SAAAC,EAAAzB,GACA,GAiBA7Q,GACAwS,EAlBAhR,EAAAgD,KAAAhD,QACAwB,EAAAxB,EAAAwB,YACAqO,EAAA7M,KAAA6M,OACA1F,EAAAnH,KAAAmH,UACArI,EAAAkB,KAAAlB,OACA8B,EAAAZ,KAAAY,QACAtC,EAAAsC,EAAAtC,MACAC,EAAAqC,EAAArC,OACA2J,EAAAtH,EAAAsH,KACAE,EAAAxH,EAAAwH,IACA6F,EAAA/F,EAAA5J,EACA4P,EAAA9F,EAAA7J,EACA2K,EAAA,EACAC,EAAA,EACAJ,EAAA5B,EAAA7I,MACA2K,EAAA9B,EAAA5I,OACA4P,GAAA,CA0BA,SArBA3P,GAAAsP,IACAtP,EAAAF,GAAAC,EAAAD,EAAAC,EAAA,GAGAvB,EAAA0L,SACAQ,EAAAtI,EAAAsI,QACAC,EAAAvI,EAAAuI,OACAJ,EAAAG,EAAAxF,EAAAyD,EAAA7I,MAAAQ,EAAAR,OACA2K,EAAAE,EAAAzF,EAAAyD,EAAA5I,OAAAO,EAAAP,SAGAyP,GACAhP,EAAAgB,KAAA2N,KAAA3N,KAAAuN,OACAtO,EAAAe,KAAA4N,KAAA5N,KAAAwN,QAGAhP,IACAwP,EAAAI,EAAAJ,EAAA/O,EAAAT,EACAwP,EAAAK,EAAAL,EAAAhP,EAAAR,GAGAqO,GAEA,IAAA3J,GACAgF,GAAA8F,EAAAhP,EACAoJ,GAAA4F,EAAA/O,CACA,MAGA,KAAAyD,GACA,GAAAsL,EAAAhP,GAAA,IAAAiP,GAAAlF,GAAAvK,IACA2K,GAAAf,GAAA8F,GAAAjF,IAAA,CAEAkF,GAAA,CACA,OAGA7P,GAAA0P,EAAAhP,EAEAR,IACAD,EAAAD,EAAAE,EACA4J,GAAA4F,EAAAK,EAAA,GAGA,EAAA/P,IACAuO,EAAAlK,EACArE,EAAA,EAGA,MAEA,KAAAuE,GACA,GAAAmL,EAAA/O,GAAA,IAAAkK,GAAAf,GAAA5J,IACA0K,GAAAhB,GAAA+F,GAAAlF,IAAA,CAEAoF,GAAA,CACA,OAGA5P,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,EAEAT,IACAF,EAAAC,EAAAC,EACA0J,GAAA8F,EAAAI,EAAA,GAGA,EAAA7P,IACAsO,EAAAjK,EACArE,EAAA,EAGA,MAEA,KAAAoE,GACA,GAAAqL,EAAAhP,GAAA,IAAAkK,GAAAhB,GAAA1J,IACA2K,GAAAf,GAAA8F,GAAAjF,IAAA,CAEAkF,GAAA,CACA,OAGA7P,GAAA0P,EAAAhP,EACAkJ,GAAA8F,EAAAhP,EAEAR,IACAD,EAAAD,EAAAE,EACA4J,GAAA4F,EAAAK,EAAA,GAGA,EAAA/P,IACAuO,EAAAnK,EACApE,EAAA,EAGA,MAEA,KAAAsE,GACA,GAAAoL,EAAA/O,GAAA,IAAAiP,GAAAjF,GAAAzK,IACA0K,GAAAhB,GAAA+F,GAAAlF,IAAA,CAEAoF,GAAA,CACA,OAGA5P,GAAAyP,EAAA/O,EAEAT,IACAF,EAAAC,EAAAC,EACA0J,GAAA8F,EAAAI,EAAA,GAGA,EAAA7P,IACAsO,EAAAhK,EACAtE,EAAA,EAGA,MAEA,KAAAyE,GACA,GAAAxE,EAAA,CACA,GAAAwP,EAAA/O,GAAA,IAAAkK,GAAAf,GAAA6F,GAAAlF,GAAA,CACAoF,GAAA,CACA,OAGA5P,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,EACAX,EAAAC,EAAAC,MAEAwP,GAAAhP,GAAA,EACA+J,EAAAkF,EACA3P,GAAA0P,EAAAhP,EACAgP,EAAA/O,GAAA,GAAAkK,GAAAf,IACA+F,GAAA,GAGA7P,GAAA0P,EAAAhP,EAGAgP,EAAA/O,GAAA,EACAmJ,EAAAe,IACA5K,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,IAGAV,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,EAIA,GAAAX,GAAA,EAAAC,GACAsO,EAAA9J,EACAxE,EAAA,EACAD,EAAA,GACA,EAAAA,GACAuO,EAAA5J,EACA3E,EAAA,GACA,EAAAC,IACAsO,EAAA/J,EACAvE,EAAA,EAGA,MAEA,KAAA0E,GACA,GAAAzE,EAAA,CACA,GAAAwP,EAAA/O,GAAA,IAAAkK,GAAAf,GAAAc,GAAAhB,GAAA,CACAiG,GAAA,CACA,OAGA5P,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,EACAX,EAAAC,EAAAC,EACA0J,GAAA8F,EAAAI,MAEAJ,GAAAhP,GAAA,EACAkJ,EAAAgB,GACA5K,GAAA0P,EAAAhP,EACAkJ,GAAA8F,EAAAhP,GACAgP,EAAA/O,GAAA,GAAAkK,GAAAf,IACA+F,GAAA,IAGA7P,GAAA0P,EAAAhP,EACAkJ,GAAA8F,EAAAhP,GAGAgP,EAAA/O,GAAA,EACAmJ,EAAAe,IACA5K,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,IAGAV,GAAAyP,EAAA/O,EACAmJ,GAAA4F,EAAA/O,EAIA,GAAAX,GAAA,EAAAC,GACAsO,EAAA/J,EACAvE,EAAA,EACAD,EAAA,GACA,EAAAA,GACAuO,EAAA7J,EACA1E,EAAA,GACA,EAAAC,IACAsO,EAAA9J,EACAxE,EAAA,EAGA,MAEA,KAAAwE,GACA,GAAAvE,EAAA,CACA,GAAAwP,EAAAhP,GAAA,IAAAkK,GAAAhB,GAAAgG,GAAAjF,GAAA,CACAkF,GAAA,CACA,OAGA7P,GAAA0P,EAAAhP,EACAkJ,GAAA8F,EAAAhP,EACAT,EAAAD,EAAAE,MAEAwP,GAAAhP,GAAA,EACAkJ,EAAAgB,GACA5K,GAAA0P,EAAAhP,EACAkJ,GAAA8F,EAAAhP,GACAgP,EAAA/O,GAAA,GAAAiP,GAAAjF,IACAkF,GAAA,IAGA7P,GAAA0P,EAAAhP,EACAkJ,GAAA8F,EAAAhP,GAGAgP,EAAA/O,GAAA,EACAgK,EAAAiF,IACA3P,GAAAyP,EAAA/O,GAGAV,GAAAyP,EAAA/O,CAIA,GAAAX,GAAA,EAAAC,GACAsO,EAAA7J,EACAzE,EAAA,EACAD,EAAA,GACA,EAAAA,GACAuO,EAAA/J,EACAxE,EAAA,GACA,EAAAC,IACAsO,EAAA5J,EACA1E,EAAA,EAGA,MAEA,KAAAuE,GACA,GAAAtE,EAAA,CACA,GAAAwP,EAAAhP,GAAA,IAAAiP,GAAAlF,GAAAmF,GAAAjF,GAAA,CACAkF,GAAA,CACA,OAGA7P,GAAA0P,EAAAhP,EACAT,EAAAD,EAAAE,MAEAwP,GAAAhP,GAAA,EACA+J,EAAAkF,EACA3P,GAAA0P,EAAAhP,EACAgP,EAAA/O,GAAA,GAAAiP,GAAAjF,IACAkF,GAAA,GAGA7P,GAAA0P,EAAAhP,EAGAgP,EAAA/O,GAAA,EACAgK,EAAAiF,IACA3P,GAAAyP,EAAA/O,GAGAV,GAAAyP,EAAA/O,CAIA,GAAAX,GAAA,EAAAC,GACAsO,EAAA5J,EACA1E,EAAA,EACAD,EAAA,GACA,EAAAA,GACAuO,EAAA9J,EACAzE,EAAA,GACA,EAAAC,IACAsO,EAAA7J,EACAzE,EAAA,EAGA,MAGA,KAAA6E,GACAtE,EAAAoJ,MAAA8F,EAAAhP,EACAF,EAAAsJ,KAAA4F,EAAA/O,EACAe,KAAA0H,cAAA,GACAyG,GAAA,CACA,MAGA,KAAA9K,GACArD,KAAA6K,KAAA,SAAAyD,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAjL,EAAA6K,EAAAA,EAAAC,EAAAA,GACAI,EAAAlL,EAAA+K,EAAAA,EAAAC,EAAAA,EAEA,QAAAE,EAAAD,GAAAA,GAEA7Q,GAAAmC,KAAAuN,OAAAvN,KAAAgN,SACAnP,GAAAmC,KAAAwN,OAAAxN,KAAAkN,SACArP,GAAAmC,KAAA2N,KAAA3N,KAAAyN,OACA5P,GAAAmC,KAAA4N,KAAA5N,KAAA0N,QACArB,GACArM,KAAAgN,QAAAhN,KAAAyN,MACAzN,KAAAkN,QAAAlN,KAAA0N,MACAS,GAAA,CACA,MAGA,KAAAhL,GACA6K,EAAAhP,GAAAgP,EAAA/O,IACAzD,EAAAwE,KAAAmF,SAAA3J,SACA0M,EAAAlI,KAAAuN,OAAA/R,EAAA0M,KACAE,EAAApI,KAAAwN,OAAAhS,EAAA4M,IACA9J,EAAAsC,EAAAiI,SACAtK,EAAAqC,EAAAkI,UAEAkF,EAAAhP,EAAA,EACAgP,EAAA/O,EAAA,EACA4N,EAAA/J,GAEA+J,EAAA7J,EACAoF,GAAA7J,GAGAyP,EAAA/O,EAAA,GACA4N,EAAA9J,EACAmF,GAAA5J,IAEAuO,EAAA5J,EACAiF,GAAA5J,EACA8J,GAAA7J,GAKAyB,KAAAO,UACAP,KAAAO,SAAA,EACAP,KAAAoF,SAAAI,YAAAlE,KASA6M,IACAvN,EAAAtC,MAAAA,EACAsC,EAAArC,OAAAA,EACAqC,EAAAsH,KAAAA,EACAtH,EAAAwH,IAAAA,EACApI,KAAA6M,OAAAA,EAEA7M,KAAA2H,iBAIA3H,KAAAuN,OAAAvN,KAAA2N,KACA3N,KAAAwN,OAAAxN,KAAA4N,QAIA3S,EAAAiF,OAAA4D,IAGA8G,KAAA,WACA5K,KAAAM,QAAAN,KAAAQ,WAIAR,KAAAO,UACAP,KAAAO,SAAA,EACAP,KAAAwJ,cAAA,GAAA,GAEAxJ,KAAAhD,QAAAoJ,OACApG,KAAA8F,SAAAb,SAAA7D,GAGApB,KAAAoF,SAAAI,YAAAlE,IAGAtB,KAAAkM,eAAAlM,KAAAkH,kBAIA0H,MAAA,WACA5O,KAAAM,QAAAN,KAAAQ,WAIAR,KAAAtB,MAAAzD,EAAAiF,UAAAF,KAAAgH,cACAhH,KAAAlB,OAAA7D,EAAAiF,UAAAF,KAAAiH,eAGAjH,KAAAY,QAAA3F,EAAAiF,UAAAF,KAAAkH,gBAEAlH,KAAA0H,eAEA1H,KAAAO,SACAP,KAAA2H,kBAKAkH,MAAA,WACA7O,KAAAO,UAAAP,KAAAQ,WAIAvF,EAAAiF,OAAAF,KAAAY,SACAsH,KAAA,EACAE,IAAA,EACA9J,MAAA,EACAC,OAAA,IAGAyB,KAAAO,SAAA,EACAP,KAAA2H,gBAEA3H,KAAAqI,cAGArI,KAAA0H,eAEA1H,KAAA8F,SAAAN,YAAApE,GACApB,KAAAoF,SAAAH,SAAA3D,KAQAwN,QAAA,SAAA3S,IACA6D,KAAAQ,UAAArE,IACA6D,KAAAU,OACAV,KAAAC,SAAAgE,KAAA,MAAA9H,GAIA6D,KAAAhD,QAAAQ,KAAA,KACAwC,KAAAoE,KAAAjI,KAKA4S,OAAA,WACA/O,KAAAM,QACAN,KAAAQ,UAAA,EACAR,KAAAmF,SAAAK,YAAA9D,KAKAsN,QAAA,WACAhP,KAAAM,QACAN,KAAAQ,UAAA,EACAR,KAAAmF,SAAAF,SAAAvD,KAKAuN,QAAA,WACA,GAAAlL,GAAA/D,KAAAC,QAEAD,MAAAK,OACAL,KAAAU,OACAqD,EAAAE,KAAA,MAAAjE,KAAAW,aAGAX,KAAAsF,UACAvB,EAAAyB,YAAAlE,IACAtB,KAAA2E,QACA3E,KAAA2E,OAAAK,SAGAjB,EAAAuG,WAAApJ,IASAgO,KAAA,SAAAC,EAAAC,GACA,GAAAtQ,GAAAkB,KAAAlB,MAGAzD,GAAA+T,KACAA,EAAAD,GAGAA,EAAAvL,GAAAuL,GACAC,EAAAxL,GAAAwL,GAEApP,KAAAM,QAAAN,KAAAQ,UAAAR,KAAAhD,QAAA6J,UACA/H,EAAAoJ,MAAAhN,EAAAiU,GAAAA,EAAA,EACArQ,EAAAsJ,KAAAlN,EAAAkU,GAAAA,EAAA,EACApP,KAAA0H,cAAA,KAUAmD,KAAA,SAAAN,EAAA8E,GACA,GACA/Q,GACAC,EAFAO,EAAAkB,KAAAlB,MAMA,IAFAyL,EAAA3G,GAAA2G,GAEAA,GAAAvK,KAAAM,QAAAN,KAAAQ,UAAAR,KAAAhD,QAAA+N,SAAA,CACA,GAAA/K,KAAAqE,QAAA7B,GACA6J,cAAAgD,EACA9E,MAAAA,IAEA,MAIAA,GADA,EAAAA,EACA,GAAA,EAAAA,GAEA,EAAAA,EAGAjM,EAAAQ,EAAAR,MAAAiM,EACAhM,EAAAO,EAAAP,OAAAgM,EACAzL,EAAAoJ,OAAA5J,EAAAQ,EAAAR,OAAA,EACAQ,EAAAsJ,MAAA7J,EAAAO,EAAAP,QAAA,EACAO,EAAAR,MAAAA,EACAQ,EAAAP,OAAAA,EACAyB,KAAA0H,cAAA,GACA1H,KAAA2G,YAAAvD,KAUAlG,OAAA,SAAAY,GACA,GAAAY,GAAAsB,KAAAtB,MACAxB,EAAAwB,EAAAxB,QAAA,CAEAY,GAAA8F,GAAA9F,IAAA,EAEAkC,KAAAM,QAAAN,KAAAQ,UAAAR,KAAAhD,QAAAqC,YACAX,EAAAxB,QAAAA,EAAAY,GAAA,IACAkC,KAAAnB,SAAA,EACAmB,KAAA0H,cAAA,KAWA/H,MAAA,SAAAxC,EAAAC,GACA,GAAAsB,GAAAsB,KAAAtB,KAGArD,GAAA+B,KACAA,EAAAD,GAGAA,EAAAyG,GAAAzG,GACAC,EAAAwG,GAAAxG,GAEA4C,KAAAM,QAAAN,KAAAQ,UAAAR,KAAAhD,QAAAoC,WACAV,EAAAvB,OAAAjC,EAAAiC,GAAAA,EAAA,EACAuB,EAAAtB,OAAAlC,EAAAkC,GAAAA,EAAA,EACA4C,KAAAuJ,aAAA,KAUAW,QAAA,SAAAoF,GACA,GAIA/E,GACA/M,EALAR,EAAAgD,KAAAhD,QACA0B,EAAAsB,KAAAtB,MACAI,EAAAkB,KAAAlB,OACA8B,EAAAZ,KAAAY,OAqCA,OAjCAZ,MAAAM,OAAAN,KAAAO,SACA/C,GACAwB,EAAA4B,EAAAsH,KAAApJ,EAAAoJ,KACAjJ,EAAA2B,EAAAwH,IAAAtJ,EAAAsJ,IACA9J,MAAAsC,EAAAtC,MACAC,OAAAqC,EAAArC,QAGAgM,EAAA7L,EAAAJ,MAAAI,EAAAQ,aAEAjE,EAAAmP,KAAA5M,EAAA,SAAAyO,EAAA9Q,GACAA,GAAAoP,EACA/M,EAAAyO,GAAAqD,EAAAtR,KAAAuR,MAAApU,GAAAA,KAIAqC,GACAwB,EAAA,EACAC,EAAA,EACAX,MAAA,EACAC,OAAA,GAIAvB,EAAAqC,YACA7B,EAAAN,OAAAwB,EAAAxB,QAAA,GAGAF,EAAAoC,WACA5B,EAAAL,OAAAuB,EAAAvB,QAAA,EACAK,EAAAJ,OAAAsB,EAAAtB,QAAA,GAGAI,GAQAuJ,QAAA,SAAAvJ,GACA,GAGA+M,GAHA7L,EAAAsB,KAAAtB,MACAI,EAAAkB,KAAAlB,OACA+M,IAGA5Q,GAAAuI,WAAAhG,KACAA,EAAAA,EAAAgS,KAAAxP,KAAAC,WAGAD,KAAAM,QAAAN,KAAAQ,UAAAvF,EAAAmF,cAAA5C,KACAtC,EAAAsC,EAAAN,SAAAM,EAAAN,SAAAwB,EAAAxB,QACA8C,KAAAhD,QAAAqC,YAEAX,EAAAxB,OAAAM,EAAAN,OACA8C,KAAAnB,SAAA,EACAmB,KAAA0H,cAAA,IAGA6C,EAAA7L,EAAAJ,MAAAI,EAAAQ,aAEAhE,EAAAsC,EAAAwB,KACA6M,EAAA3D,KAAA1K,EAAAwB,EAAAuL,EAAAzL,EAAAoJ,MAGAhN,EAAAsC,EAAAyB,KACA4M,EAAAzD,IAAA5K,EAAAyB,EAAAsL,EAAAzL,EAAAsJ,KAGAlN,EAAAsC,EAAAc,SACAuN,EAAAvN,MAAAd,EAAAc,MAAAiM,GAGArP,EAAAsC,EAAAe,UACAsN,EAAAtN,OAAAf,EAAAe,OAAAgM,GAGAvK,KAAAkM,eAAAL,KASA4D,iBAAA,WACA,MAAAzP,MAAAM,MAAAN,KAAAmH,cAQAuI,aAAA,WACA,MAAA1P,MAAAK,MAAAL,KAAAtB,UAQAoN,cAAA,WACA,GACAtO,GADAsB,EAAAkB,KAAAlB,MAYA,OATAkB,MAAAM,QACA9C,GACA0K,KAAApJ,EAAAoJ,KACAE,IAAAtJ,EAAAsJ,IACA9J,MAAAQ,EAAAR,MACAC,OAAAO,EAAAP,SAIAf,OAQAwO,cAAA,SAAAxO,GACA,GAAAsB,GAAAkB,KAAAlB,OACAN,EAAAM,EAAAN,WAEAvD,GAAAuI,WAAAhG,KACAA,EAAAA,EAAAgS,KAAAxP,KAAAC,WAGAD,KAAAM,QAAAN,KAAAQ,UAAAvF,EAAAmF,cAAA5C,KACAtC,EAAAsC,EAAA0K,QACApJ,EAAAoJ,KAAA1K,EAAA0K,MAGAhN,EAAAsC,EAAA4K,OACAtJ,EAAAsJ,IAAA5K,EAAA4K,KAGAlN,EAAAsC,EAAAc,QACAQ,EAAAR,MAAAd,EAAAc,MACAQ,EAAAP,OAAAf,EAAAc,MAAAE,GACAtD,EAAAsC,EAAAe,UACAO,EAAAP,OAAAf,EAAAe,OACAO,EAAAR,MAAAd,EAAAe,OAAAC,GAGAwB,KAAA0H,cAAA,KASAqE,eAAA,WACA,GACAvO,GADAoD,EAAAZ,KAAAY,OAYA,OATAZ,MAAAM,OAAAN,KAAAO,UACA/C,GACA0K,KAAAtH,EAAAsH,KACAE,IAAAxH,EAAAwH,IACA9J,MAAAsC,EAAAtC,MACAC,OAAAqC,EAAArC,SAIAf,OAQA0O,eAAA,SAAA1O,GACA,GAEAmS,GACAC,EAHAhP,EAAAZ,KAAAY,QACApC,EAAAwB,KAAAhD,QAAAwB,WAIAvD,GAAAuI,WAAAhG,KACAA,EAAAA,EAAAgS,KAAAxP,KAAAC,WAGAD,KAAAM,OAAAN,KAAAO,UAAAP,KAAAQ,UAAAvF,EAAAmF,cAAA5C,KAEAtC,EAAAsC,EAAA0K,QACAtH,EAAAsH,KAAA1K,EAAA0K,MAGAhN,EAAAsC,EAAA4K,OACAxH,EAAAwH,IAAA5K,EAAA4K,KAGAlN,EAAAsC,EAAAc,QAAAd,EAAAc,QAAAsC,EAAAtC,QACAqR,GAAA,EACA/O,EAAAtC,MAAAd,EAAAc,OAGApD,EAAAsC,EAAAe,SAAAf,EAAAe,SAAAqC,EAAArC,SACAqR,GAAA,EACAhP,EAAArC,OAAAf,EAAAe,QAGAC,IACAmR,EACA/O,EAAArC,OAAAqC,EAAAtC,MAAAE,EACAoR,IACAhP,EAAAtC,MAAAsC,EAAArC,OAAAC,IAIAwB,KAAA2H,kBAUAkI,iBAAA,SAAA7S,GACA,GAAA8S,GACAC,EACAxQ,EACAC,EACAwQ,EACAC,EACAC,EACA1R,EACAM,EACA/C,EACAyB,CAEA,OAAAwC,MAAAM,OAAAN,KAAAO,SAAAgD,GAIAtI,EAAAmF,cAAApD,KACAA,MAGAQ,EAAAwC,KAAAkK,UACA4F,EAAAtS,EAAAc,MACAyR,EAAAvS,EAAAe,OACAC,EAAAsR,EAAAC,EAEA9U,EAAAmF,cAAApD,KACAgT,EAAAhT,EAAAsB,MACA2R,EAAAjT,EAAAuB,OAEAyR,GACAC,EAAAD,EAAAxR,EACA0R,EAAAF,EAAAF,GACAG,IACAD,EAAAC,EAAAzR,EACA0R,EAAAD,EAAAF,IAIAxQ,EAAAyQ,GAAAF,EACAtQ,EAAAyQ,GAAAF,EAEAjR,EAAA7D,EAAA,YAAA,GACA6D,EAAAR,MAAAiB,EACAT,EAAAP,OAAAiB,EACAzD,EAAA+C,EAAAC,WAAA,MAEA/B,EAAAmT,YACApU,EAAAqU,UAAApT,EAAAmT,UACApU,EAAAsU,SAAA,EAAA,EAAA9Q,EAAAC,IAIAzD,EAAA6D,UAAAhE,MAAAG,EAAA,WACA,GAQAuU,GACAC,EAGAC,EACAC,EACAC,EACAC,EAfAC,EAAAnS,EAAAuB,KAAA2E,OAAA,GAAA3E,KAAAtB,OACAmS,EAAAD,EAAAtS,MACAwS,EAAAF,EAAArS,OACA9C,GAAAmV,GAGAG,EAAAvT,EAAAwB,EACAgS,EAAAxT,EAAAyB,CA+CA,QArCA6Q,GAAAiB,GAAAA,EAAAF,EACAE,EAAAT,EAAAE,EAAAE,EAAA,EACA,GAAAK,GACAP,GAAAO,EACAA,EAAA,EACAT,EAAAI,EAAAhN,EAAAmN,EAAAf,EAAAiB,IACAF,GAAAE,IACAP,EAAA,EACAF,EAAAI,EAAAhN,EAAAoM,EAAAe,EAAAE,IAGA,GAAAT,IAAAP,GAAAiB,GAAAA,EAAAF,EACAE,EAAAT,EAAAE,EAAAE,EAAA,EACA,GAAAK,GACAP,GAAAO,EACAA,EAAA,EACAT,EAAAI,EAAAjN,EAAAoN,EAAAf,EAAAiB,IACAF,GAAAE,IACAP,EAAA,EACAF,EAAAI,EAAAjN,EAAAqM,EAAAe,EAAAE,IAGAvV,EAAAC,KAAAqV,EAAAC,EAAAV,EAAAC,GAGAL,IACAM,GAAAN,EACAO,GAAAP,EACAQ,GAAAR,EACAS,GAAAT,GAIAQ,EAAA,GAAAC,EAAA,GACAlV,EAAAC,KAAA8U,EAAAC,EAAAC,EAAAC,GAGAlV,GACA+T,KAAAxP,OAEAlB,GAlGA,QA0GAmS,eAAA,SAAAzS,GACA,GAAAxB,GAAAgD,KAAAhD,OAEAgD,MAAAQ,UAAAnF,EAAAmD,KAGAxB,EAAAwB,YAAAoF,GAAApF,IAAA0H,IAEAlG,KAAAM,QACAN,KAAAyH,cAEAzH,KAAAO,SACAP,KAAA2H,mBAWAhB,YAAA,SAAAuK,GACA,GACAC,GACAtK,EAFA7J,EAAAgD,KAAAhD,OAIAgD,MAAAK,QAAAL,KAAAQ,WACA2Q,EAAAnU,EAAA4J,UAAAsK,IAAA/N,EACA0D,EAAA7J,EAAA6J,SAAAqK,IAAA9N,EACA8N,EAAAC,GAAAtK,EAAAqK,EAAA5N,EAEAtD,KAAA8F,SACAtI,KAAA,SAAA0T,GACAnD,YAAAtM,EAAA0P,GACApD,YAAAvM,EAAAqF,GAEA7J,EAAAuJ,gBAGAvG,KAAAqF,MACA7H,KAAA,SAAA0T,GACAnD,YAAAtM,EAAA0P,GACApD,YAAAvM,EAAAqF,OAMA5L,EAAAiF,OAAAJ,EAAAgE,UAAAA,IAEAhE,EAAAK,UAGA3B,YAAA0H,IAGA1I,KAAA,KAGAyM,QAAA,GAGAvB,QAAA,EAGA8C,YAAA,EAGAzG,kBAAA,EAGAqB,OAAA,EAGAC,QAAA,EAGAC,QAAA,EAGAE,WAAA,EAGAC,YAAA,EAGAN,UAAA,EAGA2D,aAAA,GAGAlD,UAAA,EAGAC,SAAA,EAGAxH,WAAA,EAGAD,UAAA,EAGA2L,UAAA,EAGAC,gBAAA,EAGAsB,eAAA,GAGAS,eAAA,EAGAxG,gBAAA,EAGAG,kBAAA,EAGAwE,mBAAA,EAGA1C,eAAA,EACAC,gBAAA,EACAsB,gBAAA,EACAC,iBAAA,EACAnC,kBAAA,IACAC,mBAAA,IAGAhD,MAAA,KACAxE,MAAA,KACAkK,UAAA,KACAE,SAAA,KACAC,QAAA,KACAC,KAAA,KACAC,KAAA,MAGA/K,EAAAsR,YAAA,SAAApU,GACA/B,EAAAiF,OAAAJ,EAAAK,SAAAnD,IAGA8C,EAAAyF,SAAA,4hCA2BAzF,EAAAuR,MAAApW,EAAAa,GAAAwV,QAGArW,EAAAa,GAAAwV,QAAA,SAAAtU,GACA,GACAuU,GADA9V,EAAAH,EAAAU,UAAA,EAqBA,OAlBAgE,MAAAoK,KAAA,WACA,GAEAtO,GAFAiI,EAAA9I,EAAA+E,MACAxC,EAAAuG,EAAAvG,KAAA0D,EAGA,KAAA1D,EAAA,CACA,GAAA,UAAA6P,KAAArQ,GACA,MAGA+G,GAAAvG,KAAA0D,EAAA1D,EAAA,GAAAsC,GAAAE,KAAAhD,IAGA,gBAAAA,IAAA/B,EAAAuI,WAAA1H,EAAA0B,EAAAR,MACAuU,EAAAzV,EAAAF,MAAA4B,EAAA/B,MAIAJ,EAAAkW,GAAAvR,KAAAuR,GAGAtW,EAAAa,GAAAwV,QAAAE,YAAA1R,EACA7E,EAAAa,GAAAwV,QAAAF,YAAAtR,EAAAsR,YAGAnW,EAAAa,GAAAwV,QAAAG,WAAA,WAEA,MADAxW,GAAAa,GAAAwV,QAAAxR,EAAAuR,MACArR,OCj2EA,IAAA0R,UAAA,SAAAzW,EAAA0W,GACA3R,KAAA2R,SAAAA,EACA3R,KAAA4R,eAAA3W,EAAA,oBAAA0W,EAAAE,UACA7R,KAAAsR,QAAAtR,KAAA4R,eAAA/L,KAAA,kBACA7F,KAAA8R,eACA9R,KAAA6R,SAAAF,EAAAE,QAEA,IACAE,GADAC,EAAAhS,KAEAiS,GAAA,CAEAjS,MAAA4R,eAAA/L,KAAA,sBAAAqM,UACAC,aAAAnS,KAAA2R,SAAArJ,KACA8J,YAAA,SAAAC,GACAC,UAAAC,QAAAF,EAAA7U,KAAA,QAAA,EAAA,SAAAgV,GACAC,QAAAC,IAAAF,GACAR,EAAAW,OAAAH,QAKAvX,EAAA8F,QAAA2K,OAAA,WACAuG,IAEAzU,KAAAwU,EAAAV,QAAAA,QAAA,WACAU,EAAAL,SAAAiB,YAAApV,KAAAwB,EACAgT,EAAAL,SAAAkB,YAAArV,KAAAyB,EACA+S,EAAAL,SAAAmB,gBAAAtV,KAAAc,MACA0T,EAAAL,SAAAoB,iBAAAvV,KAAAe,QAGA0T,GAAA,EACAD,EAAAgB,qBACAC,aAAAlB,GACAA,EAAAmB,WAAAlB,EAAAmB,SAAA,OAIAnT,KAAA4R,eAAA/L,KAAA,sBAAA4E,GAAA,QAAA,SAAAlG,GAGA,MAFAA,GAAAiI,iBACAwF,EAAApH,QACA,IAGA5K,KAAAmT,SAAA,WACAnB,EAAAW,OAAAX,EAAAL,UACAM,GAAA,GAGAjS,KAAAgT,mBAAA,WACA,GAAA1U,GAAA0B,KAAA4R,eAAA/L,KAAA,4BAAAvH,OACA0B,MAAA4R,eAAA/L,KAAA,sBAAA+B,KACArJ,OAAAD,EAAA0T,EAAAL,SAAAyB,aAAA,KACA9U,MAAAA,EAAA,QAIA0B,KAAA2S,OAAA,SAAAhB,GACA3R,KAAA2R,SAAAA,EAEA3R,KAAAsR,QAAAA,QAAA,WACAtR,KAAAsR,QAAA3F,IAAA,iBAEAgG,EAAA0B,eAAA,gBAAA,MAAA1B,EAAA2B,aAEAtT,KAAA4R,eAAA/L,KAAA,0BAAA5B,KAAA,MAAA0N,EAAA2B,aAGA3B,EAAA0B,eAAA,eAAA,MAAA1B,EAAA4B,YAEAvT,KAAA4R,eAAA/L,KAAA,0BAAA2N,KAAA,WAAA7B,EAAA4B,WAAA,KAAA5B,EAAA8B,UAAA,MAAA9B,EAAA+B,WAAA,KAGA,mBAAA/B,GAAAyB,eAEApT,KAAAgT,qBAEA,mBAAArB,GAAAiB,aAAA,MAAAjB,EAAAiB,cACA5S,KAAA8R,aACA9S,EAAA2S,EAAAiB,YACA3T,EAAA0S,EAAAkB,YACAvU,MAAAqT,EAAAmB,gBACAvU,OAAAoT,EAAAoB,kBAEAN,QAAAC,IAAA1S,KAAA8R,cAGA9R,KAAAsR,QAAA7G,GAAA,gBAAA,WACAuH,EAAAgB,uBACAvI,GAAA,eAAA,SAAAlG,MAEA+M,SACA9S,YAAAmT,EAAAyB,aACAvK,SAAA8I,EAAA8B,UACA3K,UAAA6I,EAAA+B,WACAtN,OAAA,EACA2E,UAAA,EACAC,gBAAA,EACApE,UAAA,EACAkD,aAAA,EACAjD,SAAA,EACArJ,KAAAwC,KAAA8R,YACA/M,kBAAA,EACAyG,YAAA,EACAvB,QAAA,oBAAAjK,KAAA6R,SAAA,0BAKA7R,KAAA4K,KAAA,WACA,GAAAoH,GAAAhS,IAEAA,MAAA2T,cAAA,kBAEA,IAAAnW,GAAAwC,KAAAsR,QAAAA,QAAA,UACA9T,GAAA,OAAA,oBACAA,EAAA,KAAAwC,KAAA2R,SAAAiC,SACApW,EAAA,KAAAwC,KAAA2R,SAAArJ,KACAtN,OAAA6Y,KAAAC,QAAAtW,EAAA,SAAAgV,GACAC,QAAAC,IAAAF,GACA,MAAAA,EAAAuB,QACA/B,EAAAJ,eAAA/L,KAAA,0BAAAhB,IAAA,OAAA,WACAmN,EAAAgC,eAEAhC,EAAAJ,eAAA/L,KAAA,0BAAA5B,KAAA,MAAAuO,EAAAyB,MAGAjC,EAAAgC,gBAIAhU,KAAA2T,cAAA,SAAAO,GACAlC,EAAAJ,eAAA/L,KAAA,uBAAA2N,KAAAU,GACAlC,EAAAJ,eAAA/L,KAAA,2BAAAL,YAAA,cAGAxF,KAAAgU,WAAA,WACAhC,EAAAJ,eAAA/L,KAAA,2BAAAZ,SAAA,cAGAjF,KAAA2S,OAAAhB,IC5IAwC,gBAAA,WACA,GAAAC,GAAA,SAAAC,GACA,GAAAC,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,OAAAA,GAAAD,GAAA,EAAA,IAAAC,EAAA,GAAAD,GAGA,QACAE,WACAH,UAAAA,QCZA,SAAAnZ,GAEAA,EAAAa,GAAA0Y,WAAA,SAAAxX,GACA,GAAA2U,GAAA1W,EAAAiF,UAAAlD,EAEA,OAAAgD,MAAAoK,KAAA,WACA,GAEAqK,GAFAC,EAAAzZ,EAAA+E,MAIA2U,EAAA,EAEAC,EAAA3Z,EAAA,6EACAyZ,GAAAhP,SAAAC,OAAAiP,GAEAA,EAAAnK,GAAA,UAAA,SAAAlG,GACA,GAAA,IAAAA,EAAAsQ,QACAD,EAAAjJ,IAAA,QACAiJ,EAAAjJ,IAAA,SAEAiJ,EAAA3P,SAAA,aACA0M,EAAA0B,eAAA,YACA1B,EAAArI,QAAAqL,GAEAD,EAAAlB,KAAAmB,OAEA,IAAA,IAAApQ,EAAAsQ,QAAA,CACAD,EAAAjJ,IAAA,QACAiJ,EAAAjJ,IAAA,QAEA,IAAAmJ,GAAAC,SAAAH,EAAAE,MACAF,GAAA3P,SAAA,aACA0M,EAAA0B,eAAA,YACA1B,EAAArI,QAAAwL,GAEAJ,EAAAlB,KAAAsB,OAEA,IAAA,IAAAvQ,EAAAsQ,QAAA,CACA,GAAAC,GAAAC,SAAAH,EAAAE,MACAA,KACAF,EAAAE,IAAAA,GACAnD,EAAA0B,eAAA,YACA1B,EAAArI,QAAAwL,GACAJ,EAAAlB,KAAAsB,OAEA,CAAA,GAAA,IAAAvQ,EAAAsQ,QAUA,MAAAtQ,GAAAsQ,QAAA,IACA,EACAtQ,EAAAsQ,QAAA,IAAAtQ,EAAAsQ,QAAA,KACA,EACA,KAAAtQ,EAAAsQ,SACA,EACAtQ,EAAAyQ,SACA,GAEAzQ,EAAAiI,kBACA,EAnBA,IAAAsI,GAAAC,SAAAH,EAAAE,MACAA,KACAF,EAAAE,IAAAA,GACAnD,EAAA0B,eAAA,YACA1B,EAAArI,QAAAwL,GACAJ,EAAAlB,KAAAsB,MAkBAJ,EAAAjK,GAAA,QAAA,SAAAlG,GA+BA,MA9BAA,GAAAiI,iBAEAoI,EAAAnK,GAAA,QAAA,WACA,GAAAqK,GAAAC,SAAAH,EAAAE,MACAnD,GAAA0B,eAAA,aAEAJ,aAAAwB,GACAA,EAAAvB,WAAA,WACAvB,EAAArI,QAAAwL,IACA,MAGAJ,EAAAlB,KAAAsB,KAGAF,EAAAnK,GAAA,OAAA,WACA,GAAAqK,GAAAC,SAAAH,EAAAE,MACAF,GAAA3P,SAAA,aACA0M,EAAA0B,eAAA,YACA1B,EAAArI,QAAAwL,GAEAJ,EAAAlB,KAAAsB,KAGAH,EAAAhD,EAAA0B,eAAA,gBAAA1B,EAAAQ,eAAA,EACAyC,EAAAE,IAAAH,GACAC,EAAApP,YAAA,aACAoP,EAAAK,SACAL,EAAAM,SAEA,QAKAla,QCxGA,SAAAC,GACAkZ,gBAAAgB,YAAA,SAAAC,EAAAjO,GAEAnH,KAAAoV,SAAAA,EACApV,KAAAmH,UAAAA,EACAnH,KAAAqV,WAAAlO,EAAAtB,KAAA,iCACA7F,KAAAsV,OAAAnO,EAAAtB,KAAA,gBACA7F,KAAAuV,YAAApO,EAAAtB,KAAA,sBAEA7F,KAAAwV,aAAArO,EAAA3J,KAAA,iBACAwC,KAAAyV,MAAAtO,EAAA3J,KAAA,QAEA,IAAAkY,GAAA1V,IAEAA,MAAAmH,UAAAtB,KAAA,sBAAA2O,YACArC,aAAA,WACA,MAAAuD,GAAAJ,OAAAR,OAEAxL,QAAA,SAAAqM,GACAA,GAAAD,EAAAJ,OAAAR,QAGAY,EAAAJ,OAAAR,IAAAa,GACAD,EAAAJ,OAAAM,OAAAC,KAAA,GACAH,EAAAN,SAAAnL,cAIAjK,KAAAuV,YAAA9K,GAAA,QAAA,WACAiL,EAAA9G,UAGA5O,KAAAsV,OAAA7K,GAAA,QAAA,WACAiL,EAAAL,WAAA7B,KAAAkC,EAAAJ,OAAAR,SAGA9U,KAAAsV,OAAA7K,GAAA,SAAA,WACAiL,EAAAL,WAAA7B,KAAAkC,EAAAJ,OAAAR,OACAY,EAAAN,SAAAnL,aAIAkK,gBAAAgB,YAAArR,UAAAmL,QAAA,WACAjP,KAAAsV,OAAA3J,IAAA,SACA3L,KAAAsV,OAAA3J,IAAA,UACA3L,KAAAuV,YAAA5J,IAAA,UAGAwI,gBAAAgB,YAAArR,UAAA8K,MAAA,SAAApR,GACA,GAAAsX,EAGAA,GADAtX,GAAAA,EAAA6V,eAAArT,KAAAyV,OACAjY,EAAAwC,KAAAyV,OAEAzV,KAAAwV,aAEAxV,KAAAqV,WAAA7B,KAAAsB,GACA9U,KAAAsV,OAAAR,IAAAA,GACA9U,KAAAsV,OAAAM,OAAAC,KAAA,GAEA7V,KAAAoV,SAAAnL,WAGAkK,gBAAAgB,YAAArR,UAAAgS,UAAA,SAAAtY,GAIA,MAHAwC,MAAAsV,OAAAR,OAAA9U,KAAAwV,eACAhY,EAAAwC,KAAAyV,OAAAzV,KAAAsV,OAAAR,OAEAtX,IAGAxC,QCvEA,SAAAC,GAEAkZ,gBAAA4B,WAAA,SAAAX,EAAAjO,GAEAnH,KAAAoV,SAAAA,EACApV,KAAAmH,UAAAA,EACAnH,KAAAgW,YAAA7O,EAAAtB,KAAA,sBACA7F,KAAAiW,YAAA9O,EAAAtB,KAAA,sBACA7F,KAAAsE,KAAA6C,EAAA3J,KAAA,cACAwC,KAAAuV,YAAApO,EAAAtB,KAAA,sBACA7F,KAAAyV,MAAAtO,EAAA3J,KAAA,SACAwC,KAAAwV,aAAArO,EAAA3J,KAAA,gBAEA,IAAA0Y,GAAAlW,IAEA,IAAA,eAAAA,KAAAsE,KAAA,CACAtE,KAAAmW,WAAAhP,EAAA3J,KAAA,eACAwC,KAAAoW,YAAAjP,EAAAtB,KAAA,qBAEA,IAAAwQ,GAAAlP,EAAA3J,KAAA,cACAwC,MAAAoW,YAAAtB,IAAAuB,GAEArW,KAAAoW,YAAA3L,GAAA,SAAA,WACAyL,EAAAd,SAAAnL,YAIAjK,KAAAgW,YAAAM,eACAC,UAAA,EACA1I,OAAA,SAAAzB,EAAAoK,GACAN,EAAAd,SAAAnL,aAIAjK,KAAAiW,YAAAxL,GAAA,SAAA,WACAyL,EAAAd,SAAAnL,YAGAjK,KAAAuV,YAAA9K,GAAA,QAAA,WACAyL,EAAAtH,WAIAuF,gBAAA4B,WAAAjS,UAAAmL,QAAA,WACAjP,KAAAiW,YAAAtK,IAAA,UACA,eAAA3L,KAAAsE,MACAtE,KAAAoW,YAAAzK,IAAA,UAEA3L,KAAAuV,YAAA5J,IAAA,UAGAwI,gBAAA4B,WAAAjS,UAAA8K,MAAA,SAAApR,GACA,GACAsX,GADA2B,EAAA,MAgBA,IAbAjZ,GAAAA,EAAA6V,eAAArT,KAAAmW,cAEAM,EAAAjZ,EAAAwC,KAAAmW,aAKArB,EAFAtX,GAAAA,EAAA6V,eAAArT,KAAAyV,OAEAjY,EAAAwC,KAAAyV,OAGAzV,KAAAwV,aAEAV,EAAAA,EAAAhG,QAAA,IAAA,IACA,GAAAgG,EAAAzX,OACA,CACA,GAAAqZ,GAAA3B,SAAA,KAAAD,EAAA6B,UAAA,EAAA,IAAA,IAAA,GACA7B,GAAAA,EAAA6B,UAAA,GAEA3W,KAAAiW,YAAAnB,IAAA9W,KAAAuR,MAAAmH,IACA1W,KAAAiW,YAAAL,OAAAC,KAAA,GAGA7V,KAAAgW,YAAAlB,IAAA,IAAAA,GACA9U,KAAAgW,YAAAM,cAAA,QAAA,IAAAxB,GAEA,eAAA9U,KAAAsE,MACAtE,KAAAoW,YAAAtB,IAAA2B,GAGAzW,KAAAoV,SAAAnL,WAGAkK,gBAAA4B,WAAAjS,UAAAgS,UAAA,SAAAtY,GAWA,MAVAwC,MAAAiW,YAAAnB,MAAA,IACAtX,EAAAwC,KAAAyV,OAAA,IAAAtB,gBAAAI,UAAAH,UAAApW,KAAAuR,MAAA1L,WAAA7D,KAAAiW,YAAAnB,OAAA,IAAA,MAAA9U,KAAAgW,YAAAlB,MAAAhG,QAAA,IAAA,IAEA,eAAA9O,KAAAsE,MACA,QAAAtE,KAAAoW,YAAAtB,QACAtX,EAAAwC,KAAAmW,YAAAnW,KAAAoW,YAAAtB,QAKAtX,IAGAxC,QCrGA,SAAAC,GAEAkZ,gBAAAyC,eAAA,SAAAxB,EAAAjO,GAEAnH,KAAAoV,SAAAA,EACApV,KAAAmH,UAAAA,EACAnH,KAAA6W,eAAA1P,EAAAtB,KAAA,gBACA7F,KAAAuV,YAAApO,EAAAtB,KAAA,sBACA7F,KAAAwV,aAAArO,EAAA3J,KAAA,iBACAwC,KAAAyV,MAAAtO,EAAA3J,KAAA,QAEA,IAAAsZ,GAAA9W,IAEAA,MAAAuV,YAAA9K,GAAA,QAAA,WACAqM,EAAAlI,UAGAzH,EAAAtB,KAAA,2BAAA4E,GAAA,QAAA,WACA,GAAAsM,GAAA9b,EAAA+E,KACA8W,GAAA3P,UAAAtB,KAAA,2BAAAuE,KAAA,WACAnP,EAAA+E,MAAAwF,YAAA,wBAGAuR,EAAA9R,SAAA,sBACA6R,EAAAD,eAAA/B,IAAAiC,EAAAvZ,KAAA,gBACAsZ,EAAA1B,SAAAnL,aAIAkK,gBAAAyC,eAAA9S,UAAAmL,QAAA,WACAjP,KAAAuV,YAAA5J,IAAA,SACA3L,KAAAmH,UAAAtB,KAAA,2BAAA8F,IAAA,UAGAwI,gBAAAyC,eAAA9S,UAAA8K,MAAA,SAAApR,GACA,GAAAsX,EAGAA,GADAtX,GAAAA,EAAA6V,eAAArT,KAAAyV,OACAjY,EAAAwC,KAAAyV,OAEAzV,KAAAwV,aAEA,IAAAV,IACAA,EAAA9U,KAAAwV,cAEAxV,KAAAmH,UAAAtB,KAAA,2BAAAuE,KAAA,WACA,GAAA2M,GAAA9b,EAAA+E,KACA+W,GAAAvZ,KAAA,gBAAAsX,EACAiC,EAAA9R,SAAA,sBAEA8R,EAAAvR,YAAA,wBAGAxF,KAAA6W,eAAA/B,IAAAA,GACA9U,KAAAoV,SAAAnL,WAGAkK,gBAAAyC,eAAA9S,UAAAgS,UAAA,SAAAtY,GAIA,MAHAwC,MAAA6W,eAAA/B,OAAA9U,KAAAwV,eACAhY,EAAAwC,KAAAyV,OAAAzV,KAAA6W,eAAA/B,OAEAtX,IAEAxC,QC/DA,SAAAC,GAEAkZ,gBAAA6C,kBAAA,SAAA5B,EAAAjO,GAEAnH,KAAAoV,SAAAA,EACApV,KAAAmH,UAAAA,EACAnH,KAAAiK,QAAA9C,EAAAtB,KAAA,4BACA7F,KAAAiX,WAAA9P,EAAAtB,KAAA,gBACA7F,KAAAkX,aAAA/P,EAAAtB,KAAA,uBACA7F,KAAAuV,YAAApO,EAAAtB,KAAA,sBAEA7F,KAAAwV,aAAArO,EAAA3J,KAAA,iBACAwC,KAAAyV,MAAAtO,EAAA3J,KAAA,SAEAwC,KAAAmX,SAAAC,GAAAC,OACAC,MAAA;AACAP,QACAvD,KAAA,oBAEA+D,UAAA,GAGA,IAAAC,GAAAxX,IAEAA,MAAAuV,YAAA9K,GAAA,QAAA,WACA+M,EAAA5I,UAGA5O,KAAAmX,SAAA1M,GAAA,SAAA,WACAgN,WAAAD,EAAAL,SAAAO,QAAAC,IAAA,aAAAC,QAAAC,SACAL,EAAAP,WAAAnC,IAAA2C,WAAAK,IACAN,EAAAvN,QAAAhG,KAAA,MAAAwT,WAAAtb,KAEAqb,EAAApC,SAAAnL,YAGAjK,KAAAkX,aAAAzM,GAAA,QAAA,SAAAlG,GAGA,MAFAA,GAAAiI,iBACAgL,EAAAL,SAAAY,QACA,KAKA5D,gBAAA6C,kBAAAlT,UAAAmL,QAAA,WACAjP,KAAAkX,aAAAvL,IAAA,SACA3L,KAAAmX,SAAAxL,IAAA,UACA3L,KAAAuV,YAAA5J,IAAA,UAGAwI,gBAAA6C,kBAAAlT,UAAA8K,MAAA,SAAApR,GACA,GAAAsX,EAEAtX,IAAAA,EAAA6V,eAAArT,KAAAyV,QAEAX,EAAAtX,EAAAwC,KAAAyV,OACAzV,KAAAiX,WAAAnC,IAAAA,IAGA9U,KAAAiX,WAAAnC,IAAA,IAEAtX,GAAAA,EAAA6V,eAAArT,KAAAyV,MAAA,QAEAzV,KAAAiK,QAAAhG,KAAA,MAAAzG,EAAAwC,KAAAyV,MAAA,UAIAzV,KAAAiK,QAAA+N,WAAA,OAAAC,YAAAjY,KAAAiK,QAAAiO,SACAlY,KAAAiK,QAAAjK,KAAAmH,UAAAtB,KAAA,6BAGA7F,KAAAoV,SAAAnL,WAGAkK,gBAAA6C,kBAAAlT,UAAAgS,UAAA,SAAAtY,GACA,GAAAsX,GAAA9U,KAAAiX,WAAAnC,KAKA,OAHAA,IAAA,IAAAA,IACAtX,EAAAwC,KAAAyV,OAAAX,GAEAtX,IAGAxC,QClFA,SAAAC,GACAkZ,gBAAAgE,aAAA,SAAA/C,EAAAjO,GAEAnH,KAAAoV,SAAAA,EACApV,KAAAmH,UAAAA,EACAnH,KAAAyV,MAAAtO,EAAA3J,KAAA,SACAwC,KAAAoY,OAAAjR,EAAA3J,KAAA,gBAAA6a,MAAA,KACArY,KAAAsY,QAAAnR,EAAAtB,KAAA,eACA7F,KAAAuY,SAEA,IAAAC,GAAAxY,IAEAA,MAAAsY,QAAAlO,KAAA,WACA,GAAA2M,GAAA9b,EAAA+E,MACAyY,EAAA1B,EAAAvZ,KAAA,QACAgb,GAAAD,OAAAE,GAAAD,EAAArR,UAAAtB,KAAA,eAAA4S,EAAA,MACA1B,EAAAtM,GAAA,QAAA,SAAAlG,GAgBA,MAfAA,GAAAiI,iBAEA,GAAAgM,EAAAD,OAAAE,GAAA3D,OAEA0D,EAAAD,OAAAE,GAAA3D,IAAA,GACAiC,EAAA9R,SAAA,mBAIAuT,EAAAD,OAAAE,GAAA3D,IAAA,GACAiC,EAAAvR,YAAA,kBAGAgT,EAAApD,SAAAnL,WAEA,OAKAkK,gBAAAgE,aAAArU,UAAAmL,QAAA,WACAjP,KAAAsY,QAAA3M,IAAA,UAGAwI,gBAAAgE,aAAArU,UAAA8K,MAAA,SAAApR,GACAwC,KAAAsY,QAAAlO,KAAA,WACAnP,EAAA+E,MAAAwF,YAAA,kBAGA,IAAAgT,GAAAxY,IAKA,IAJA0Y,OAAAC,KAAA3Y,KAAAuY,QAAAK,QAAA,SAAAC,EAAAC,GACAN,EAAAD,OAAAM,GAAA/D,IAAA,KAGAtX,GAAAA,EAAA6V,eAAArT,KAAAyV,OAAA,CACA,GAAAX,GAAAtX,EAAAwC,KAAAyV,OAAA4C,MAAA,IAGAvD,GAAA8D,QAAA,SAAAC,EAAAC,GACAN,EAAAD,OAAAM,GAAA/D,IAAA,GACA0D,EAAArR,UAAAtB,KAAA,cAAAgT,GAAA5T,SAAA,mBAIAjF,KAAAoV,SAAAnL,WAGAkK,gBAAAgE,aAAArU,UAAAgS,UAAA,SAAAtY,GACA,GAAAub,MAEAP,EAAAxY,IASA,OARA0Y,QAAAC,KAAA3Y,KAAAuY,QAAAK,QAAA,SAAAC,EAAAC,GACA,GAAAN,EAAAD,OAAAM,GAAA/D,OACAiE,EAAArd,KAAAmd,KAGAE,EAAA1b,OAAA,IACAG,EAAAwC,KAAAyV,OAAAsD,EAAAzb,KAAA,MAEAE,IAGAxC,OC5EA,IAAAge,kBAAA,SAAA/d,EAAAma,EAAAjO,GAEAnH,KAAAoV,SAAAA,EACApV,KAAAmH,UAAAA,EAAAtB,KAAA,qBACA7F,KAAAiZ,aAAAjZ,KAAAmH,UAAAtB,KAAA,kBACA7F,KAAAkZ,gBAAAlZ,KAAAmH,UAAAtB,KAAA,2BACA7F,KAAAmZ,sBAAAnZ,KAAAmH,UAAAtB,KAAA,6BAEA,IAAAuT,GAAApZ,IAEAoZ,GAAAH,aAAAxO,GAAA,SAAA,WACA,GAAA,GAAA2O,EAAAH,aAAAnE,IAIA,MAFAsE,GAAAhE,SAAAiE,eACAD,GAAAD,sBAAAjV,KAAA,WAAA,EAIA,IAAAoV,GAAAF,EAAAhE,SAAAzD,SAAA4H,QAAAH,EAAAH,aAAAnE,MACAwE,GAAAE,aAAAJ,EAAAhE,SAAAzD,SAAArJ,MACA8Q,EAAAD,sBAAAjV,KAAA,WAAA,GAEAkV,EAAAhE,SAAAqE,WAAAH,KAGAtZ,KAAAmH,UAAAtB,KAAA,4BAAA4E,GAAA,QAAA,WACA2O,EAAAM,cAGA1Z,KAAAmH,UAAAtB,KAAA,6BAAA4E,GAAA,QAAA,WACA2O,EAAAO,eAGA3Z,KAAAmH,UAAAtB,KAAA,+BAAA4E,GAAA,QAAA,WACA2O,EAAAQ,iBAGA5Z,KAAAa,KAAA,WACAuY,EAAAH,aAAApT,KAAA,UAAAb,SAEA,GAAA0T,OAAAC,KAAAS,EAAAhE,SAAAzD,SAAA4H,SAAAlc,OAEA+b,EAAAF,gBAAAjU,SAAA,cAIAyT,OAAAC,KAAAS,EAAAhE,SAAAzD,SAAA4H,SAAAX,QAAA,SAAAC,EAAAC,GACArG,QAAAC,IAAAmG,GAEAO,EAAAH,aAAAtT,OAAA1K,EAAA,qBACAgJ,KAAA,QAAA,KACAuP,KAAA,SAEA4F,EAAAH,aAAAtT,OAAA1K,EAAA,qBACAgJ,KAAA,QAAA4U,GACArF,KAAA4F,EAAAhE,SAAAzD,SAAA4H,QAAAV,GAAAvB,UAGA8B,EAAAF,gBAAA1T,YAAA,aACA4T,EAAAH,aAAAnE,IAAAsE,EAAAhE,SAAAzD,SAAAkI,iBAIA7Z,KAAA8Z,cAAA,WACAV,EAAAH,aAAAnE,IAAA,GACAsE,EAAAD,sBAAAjV,KAAA,WAAA,IAGAlE,KAAA+Z,iBAAA,SAAAT,EAAAU,GACAA,EACAZ,EAAAD,sBAAAjV,KAAA,WAAA,GAEAkV,EAAAD,sBAAAjV,KAAA,WAAA,GAEAkV,EAAAH,aAAAnE,IAAAwE,IAGAtZ,KAAA0Z,UAAA,WACA,GAAAO,GAAAC,OAAA,kBACA,IAAA,MAAAD,EACA,CACAb,EAAAhE,SAAAzB,cAAA,oBAEA,IAAAnW,KACAA,GAAA,KAAAyc,EACAb,EAAAD,sBAAAnV,GAAA,cACAxG,EAAA,aAAA,GAEA4b,EAAAhE,SAAA+E,SAAA,wBAAA3c,EAAA,SAAAgV,GACA4G,EAAAhE,SAAApB,aACA,MAAAxB,EAAAuB,SAEAqF,EAAAhE,SAAAzD,SAAAkI,cAAArH,EAAAqH,cACAT,EAAAhE,SAAAzD,SAAA4H,QAAA/G,EAAA+G,QAEAH,EAAAvY,YAMAb,KAAA2Z,WAAA,WACA,GAAA,MAAAP,EAAAH,aAAAnE,MAAA,CAGAsE,EAAAhE,SAAAzB,cAAA,oBAEA,IAAAnW,KACAA,GAAA,IAAA4b,EAAAH,aAAAnE,MACAsE,EAAAD,sBAAAnV,GAAA,cACAxG,EAAA,aAAA,GAEA4b,EAAAhE,SAAA+E,SAAA,yBAAA3c,EAAA,SAAAgV,GACA4G,EAAAhE,SAAApB,iBAIAhU,KAAA4Z,aAAA,WACA,GAAA,MAAAR,EAAAH,aAAAnE,OAGAsF,QAAA,gDAAA,CAGAhB,EAAAhE,SAAAzB,cAAA,oBAEA,IAAAnW,KACAA,GAAA,IAAA4b,EAAAH,aAAAnE,MAEAsE,EAAAhE,SAAA+E,SAAA,2BAAA3c,EAAA,SAAAgV,GACA4G,EAAAhE,SAAApB,aACA,MAAAxB,EAAAuB,SAEAqF,EAAAhE,SAAAzD,SAAAkI,cAAArH,EAAAqH,cACAT,EAAAhE,SAAAzD,SAAA4H,QAAA/G,EAAA+G,QAEAH,EAAAvY,OAEAuY,EAAAhE,SAAAzC,OAAAH,QAKAxS,KAAAa,SCnJA,SAAA5F,GAEAA,EAAAa,GAAAue,gBAAA,SAAArd,GACA,GAAA2U,GAAA1W,EAAAiF,UAAAlD,GAEAsd,GAAA,CACA,OAAAta,MAAA6F,KAAA,sBAAAuE,KAAA,WACA,GAAAiI,GAAApX,EAAA+E,MACAoN,EAAAuE,EAAAxK,UAAAtB,KAAA,IAAAwM,EAAA7U,KAAA,UAEA8c,KAEAjI,EAAApN,SAAA,cACAmI,EAAA5H,YAAA,aAEA8U,GAAA,GAGAjI,EAAA5H,GAAA,QAAA,SAAAlG,GAcA,MAbAA,GAAAiI,iBAEAmF,EAAAxK,UAAAtB,KAAA,sBAAAuE,KAAA,WACA,GAAAmQ,GAAAtf,EAAA+E,MACAwa,EAAA7I,EAAAxK,UAAAtB,KAAA,IAAA0U,EAAA/c,KAAA,UAEA+c,GAAA/U,YAAA,cACAgV,EAAAvV,SAAA,eAGAoN,EAAApN,SAAA,cACAmI,EAAA5H,YAAA,cAEA,QAKAxK,OCjCA,IAAAyf,eAAA,SAAAxf,EAAA0W,GAkGA,QAAA+I,KACAtB,EAAAzF,cAAA,wBAEAyF,EAAAuB,UAAAnV,YAAA,aAEA4T,EAAAe,SAAA,wBAAA,SAAA3H,GACA,MAAAA,EAAAuB,QAEAqF,EAAAzH,SAAAiJ,OACAnI,QAAAC,IAAAF,EAAAyB,KAEAmF,EAAAyB,aAAApQ,GAAA,OAAA,WACA2O,EAAAuB,UAAA1V,SAAA,aACAmU,EAAApF,eAGAoF,EAAAyB,aAAA5W,KAAA,MAAAuO,EAAAyB,OAIAmF,EAAAuB,UAAA1V,SAAA,aACAmU,EAAApF,gBAtHAvB,QAAAC,IAAAf,GAEA3R,KAAA8a,eAAA,KACA9a,KAAA+a,mBAAA,EACA/a,KAAAgb,aAEA,IAAA5B,GAAApZ,IAEAA,MAAA2R,SAAAA,EAEA3R,KAAA4R,eAAA3W,EAAA,oBAAA0W,EAAAE,UACA7R,KAAA2a,UAAA3a,KAAA4R,eAAA/L,KAAA,6BACA7F,KAAA6a,aAAA7a,KAAA4R,eAAA/L,KAAA,wBAEA7F,KAAAuZ,QAAA,GAAAP,kBAAA/d,EAAA+E,KAAAA,KAAA4R,gBAEA5R,KAAA4R,eAAA/L,KAAA,2BAAA4E,GAAA,QAAA,WACA2O,EAAAC,aAEArZ,KAAA4R,eAAA/L,KAAA,kCAAA4E,GAAA,QAAA,WACA2O,EAAAxd,UAGAoE,KAAA4R,eAAA/L,KAAA,oBAAAuE,KAAA,WACA,GAAAjD,GAAAlM,EAAA+E,MACAsE,EAAA6C,EAAA3J,KAAA,aACA,WAAA8G,EACA8U,EAAA4B,WAAAtf,KAAA,GAAAyY,iBAAAgB,YAAAiE,EAAAjS,IACA,SAAA7C,GAAA,eAAAA,EACA8U,EAAA4B,WAAAtf,KAAA,GAAAyY,iBAAA4B,WAAAqD,EAAAjS,IACA,WAAA7C,EACA8U,EAAA4B,WAAAtf,KAAA,GAAAyY,iBAAAgE,aAAAiB,EAAAjS,IACA,iBAAA7C,EACA8U,EAAA4B,WAAAtf,KAAA,GAAAyY,iBAAA6C,kBAAAoC,EAAAjS,IACA,aAAA7C,GACA8U,EAAA4B,WAAAtf,KAAA,GAAAyY,iBAAAyC,eAAAwC,EAAAjS,MAGAnH,KAAA4R,eAAAnH,GAAA,QAAA,cAAA,WACA,GAAAwQ,GAAAhgB,EAAA+E,MAAAxC,KAAA,SACAiY,EAAA2D,EAAAxH,eAAA/L,KAAA,gBAAAoV,EACA,IAAAxF,EAAAX,OAEAW,EAAAX,IAAA,GACA7Z,EAAA+E,MAAAwF,YAAA,mBAIAiQ,EAAAX,IAAA,GACA7Z,EAAA+E,MAAAiF,SAAA,kBAGAmU,EAAAnP,YAGAjK,KAAA4R,eAAA/L,KAAA,sBAAAqM,UACAC,aAAAiH,EAAAzH,SAAArJ,KACA8J,YAAA,SAAAC,GACAC,UAAAC,QAAAF,EAAA7U,KAAA,QAAA,EAAA,SAAAgV,GACAC,QAAAC,IAAAF,GACA4G,EAAAzG,OAAAH,QAKAxS,KAAA4R,eAAA/L,KAAA,uBAAAwU,iBACAjF,SAAApV,KACAmH,UAAAnH,KAAA4R,iBAUA5R,KAAAma,SAAA,SAAAtN,EAAArP,EAAA0d,GACA,GAAAC,KACA/B,GAAA4B,WAAApC,QAAA,SAAAwC,EAAAtC,GACAqC,EAAAC,EAAAtF,UAAAqF,KAGA1I,QAAAC,IAAAyI,GAEA3d,EAAA,SAAA4b,EAAAzH,SAAAiC,SACApW,EAAA,OAAAqP,EACArP,EAAA,KAAA4b,EAAAzH,SAAArJ,KACA9K,EAAA,SAAA2d,EAEAlgB,EAAA4Y,KAAAC,QAAAtW,EAAA0d,IAoCAlb,KAAAiK,QAAA,WACAmP,EAAA2B,oBAGAzI,UAAA+I,YAEApI,aAAAmG,EAAA0B,gBACA1B,EAAA0B,eAAA5H,WAAAwH,EAAA,OAOA1a,KAAA2S,OAAA,SAAAnV,GACA,GAAAA,EAAA6V,eAAA,kBAAA,MAAA7V,EAAAqc,eAAA,IAAArc,EAAAqc,cAAA,CACA,GAAAyB,GAAAlC,EAAAzH,SAAA4H,QAAA/b,EAAAqc,cACAT,GAAAG,QAAAQ,iBAAAvc,EAAAqc,cAAAyB,EAAA9B,aAAAhc,EAAA8K,UAGA8Q,GAAAG,QAAAO,eAEAV,GAAA2B,mBAAA,EACA3B,EAAAzH,SAAArJ,KAAA9K,EAAA8K,KACA8Q,EAAAzH,SAAAA,SAAAnU,EAAAmU,QAEA,IAAA4J,GAAA,WACAnC,EAAAyB,aAAAlP,IAAA,OAAA4P,GACAnC,EAAA4B,WAAApC,QAAA,SAAAwC,EAAAtC,GACAsC,EAAAxM,MAAApR,EAAAmU,YAGAyH,EAAA2B,mBAAA,EACAzI,UAAAkJ,YAGAhe,GAAAyW,KAEAmF,EAAAyB,aAAApQ,GAAA,OAAA8Q,GACAnC,EAAAyB,aAAA5W,KAAA,MAAAzG,EAAAyW,MAGAsH,KAGAvb,KAAAyZ,WAAA,SAAAH,GACA7G,QAAAC,IAAA4G,GACAF,EAAA2B,mBAAA,EACA3B,EAAAzH,SAAAA,SAAA2H,EAAA3H,SAEAyH,EAAAyB,aAAAlP,IAAA,QACAyN,EAAA4B,WAAApC,QAAA,SAAAwC,EAAAtC,GACAsC,EAAAxM,MAAAwK,EAAAzH,SAAAA,YAGAyH,EAAA2B,mBAAA,EACA3B,EAAAnP,WAIAjK,KAAApE,MAAA,WACAwd,EAAAzF,cAAA,0BAEAyF,EAAAe,SAAA,qBAAA,SAAA3H,GACA4G,EAAApF,aACA1B,UAAAkJ,eAOAxb,KAAAqZ,SAAA,WACAD,EAAA4B,WAAApC,QAAA,SAAAwC,EAAAtC,GACAsC,EAAAxM,WAIA5O,KAAA2T,cAAA,SAAAO,GACAkF,EAAAxH,eAAA/L,KAAA,uBAAA2N,KAAAU,GACAkF,EAAAxH,eAAA/L,KAAA,2BAAAL,YAAA,cAGAxF,KAAAgU,WAAA,WACAoF,EAAAxH,eAAA/L,KAAA,2BAAAZ,SAAA","file":"ilab-media-tools.js","sourcesContent":["/*!\n * Cropper v0.11.0\n * https://github.com/fengyuanchen/cropper\n *\n * Copyright (c) 2014-2015 Fengyuan Chen and contributors\n * Released under the MIT license\n *\n * Date: 2015-08-10T12:41:42.192Z\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n\n  'use strict';\n\n  // Globals\n  var $window = $(window);\n  var $document = $(document);\n  var location = window.location;\n\n  // Constants\n  var NAMESPACE = 'cropper';\n  var PREVIEW = 'preview.' + NAMESPACE;\n\n  // Classes\n  var CLASS_MODAL = 'cropper-modal';\n  var CLASS_HIDE = 'cropper-hide';\n  var CLASS_HIDDEN = 'cropper-hidden';\n  var CLASS_INVISIBLE = 'cropper-invisible';\n  var CLASS_MOVE = 'cropper-move';\n  var CLASS_CROP = 'cropper-crop';\n  var CLASS_DISABLED = 'cropper-disabled';\n  var CLASS_BG = 'cropper-bg';\n\n  // Events\n  var EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown';\n  var EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove';\n  var EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel';\n  var EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll';\n  var EVENT_DBLCLICK = 'dblclick';\n  var EVENT_RESIZE = 'resize.' + NAMESPACE; // Bind to window with namespace\n  var EVENT_BUILD = 'build.' + NAMESPACE;\n  var EVENT_BUILT = 'built.' + NAMESPACE;\n  var EVENT_CROP_START = 'cropstart.' + NAMESPACE;\n  var EVENT_CROP_MOVE = 'cropmove.' + NAMESPACE;\n  var EVENT_CROP_END = 'cropend.' + NAMESPACE;\n  var EVENT_CROP = 'crop.' + NAMESPACE;\n  var EVENT_ZOOM = 'zoom.' + NAMESPACE;\n\n  // RegExps\n  var REGEXP_ACTIONS = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/;\n\n  // Actions\n  var ACTION_EAST = 'e';\n  var ACTION_WEST = 'w';\n  var ACTION_SOUTH = 's';\n  var ACTION_NORTH = 'n';\n  var ACTION_SOUTH_EAST = 'se';\n  var ACTION_SOUTH_WEST = 'sw';\n  var ACTION_NORTH_EAST = 'ne';\n  var ACTION_NORTH_WEST = 'nw';\n  var ACTION_ALL = 'all';\n  var ACTION_CROP = 'crop';\n  var ACTION_MOVE = 'move';\n  var ACTION_ZOOM = 'zoom';\n  var ACTION_NONE = 'none';\n\n  // Supports\n  var SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext);\n\n  // Maths\n  var sqrt = Math.sqrt;\n  var min = Math.min;\n  var max = Math.max;\n  var abs = Math.abs;\n  var sin = Math.sin;\n  var cos = Math.cos;\n  var num = parseFloat;\n\n  // Prototype\n  var prototype = {};\n\n  function isNumber(n) {\n    return typeof n === 'number' && !isNaN(n);\n  }\n\n  function isUndefined(n) {\n    return typeof n === 'undefined';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    // This is necessary for IE8\n    if (isNumber(offset)) {\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  // Custom proxy to avoid jQuery's guid\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (\n      parts[1] !== location.protocol ||\n      parts[2] !== location.hostname ||\n      parts[3] !== location.port\n    );\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getTransform(options) {\n    var transforms = [];\n    var rotate = options.rotate;\n    var scaleX = options.scaleX;\n    var scaleY = options.scaleY;\n\n    if (isNumber(rotate)) {\n      transforms.push('rotate(' + rotate + 'deg)');\n    }\n\n    if (isNumber(scaleX) && isNumber(scaleY)) {\n      transforms.push('scale(' + scaleX + ',' + scaleY + ')');\n    }\n\n    return transforms.length ? transforms.join(' ') : 'none';\n  }\n\n  function getRotatedSizes(data, reverse) {\n    var deg = abs(data.degree) % 180;\n    var arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180;\n    var sinArc = sin(arc);\n    var cosArc = cos(arc);\n    var width = data.width;\n    var height = data.height;\n    var aspectRatio = data.aspectRatio;\n    var newWidth;\n    var newHeight;\n\n    if (!reverse) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = $('<canvas>')[0];\n    var context = canvas.getContext('2d');\n    var x = 0;\n    var y = 0;\n    var width = data.naturalWidth;\n    var height = data.naturalHeight;\n    var rotate = data.rotate;\n    var scaleX = data.scaleX;\n    var scaleY = data.scaleY;\n    var scalable = isNumber(scaleX) && isNumber(scaleY) && (scaleX !== 1 || scaleY !== 1);\n    var rotatable = isNumber(rotate) && rotate !== 0;\n    var advanced = rotatable || scalable;\n    var canvasWidth = width;\n    var canvasHeight = height;\n    var translateX;\n    var translateY;\n    var rotated;\n\n    if (scalable) {\n      translateX = width / 2;\n      translateY = height / 2;\n    }\n\n    if (rotatable) {\n      rotated = getRotatedSizes({\n        width: width,\n        height: height,\n        degree: rotate\n      });\n\n      canvasWidth = rotated.width;\n      canvasHeight = rotated.height;\n      translateX = rotated.width / 2;\n      translateY = rotated.height / 2;\n    }\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    if (advanced) {\n      x = -width / 2;\n      y = -height / 2;\n\n      context.save();\n      context.translate(translateX, translateY);\n    }\n\n    if (rotatable) {\n      context.rotate(rotate * Math.PI / 180);\n    }\n\n    // Should call `scale` after rotated\n    if (scalable) {\n      context.scale(scaleX, scaleY);\n    }\n\n    context.drawImage(image, x, y, width, height);\n\n    if (advanced) {\n      context.restore();\n    }\n\n    return canvas;\n  }\n\n  function Cropper(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);\n    this.ready = false;\n    this.built = false;\n    this.rotated = false;\n    this.cropped = false;\n    this.disabled = false;\n    this.replaced = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.canvas = null;\n    this.cropBox = null;\n    this.init();\n  }\n\n  $.extend(prototype, {\n    init: function () {\n      var $this = this.$element;\n      var url;\n\n      if ($this.is('img')) {\n        this.isImg = true;\n\n        // Should use `$.fn.attr` here. e.g.: \"img/picture.jpg\"\n        this.originalUrl = url = $this.attr('src');\n\n        // Stop when it's a blank image\n        if (!url) {\n          return;\n        }\n\n        // Should use `$.fn.prop` here. e.g.: \"http://example.com/img/picture.jpg\"\n        url = $this.prop('src');\n      } else if ($this.is('canvas') && SUPPORT_CANVAS) {\n        url = $this[0].toDataURL();\n      }\n\n      this.load(url);\n    },\n\n    // A shortcut for triggering custom events\n    trigger: function (type, data) {\n      var e = $.Event(type, data);\n\n      this.$element.trigger(e);\n\n      return e.isDefaultPrevented();\n    },\n\n    load: function (url) {\n      var options = this.options;\n      var $this = this.$element;\n      var crossOrigin = '';\n      var bustCacheUrl;\n      var $clone;\n\n      if (!url) {\n        return;\n      }\n\n      // Trigger build event first\n      $this.one(EVENT_BUILD, options.build);\n\n      if (this.trigger(EVENT_BUILD)) {\n        return;\n      }\n\n      if (options.checkImageOrigin && isCrossOriginURL(url)) {\n        crossOrigin = ' crossOrigin=\"anonymous\"';\n\n        // Bust cache (#148), only when there was not a \"crossOrigin\" property\n        if (!$this.prop('crossOrigin')) {\n          bustCacheUrl = addTimestamp(url);\n        }\n      }\n\n      // IE8 compatibility: Don't use \"$.fn.attr\" to set \"src\"\n      this.$clone = $clone = $('<img' + crossOrigin + ' src=\"' + (bustCacheUrl || url) + '\">');\n\n      $clone.one('load', $.proxy(function () {\n        var image = $clone[0];\n\n        // Note: $clone.width() and $clone.height() will return 0 in IE8 (#319)\n        var naturalWidth = image.naturalWidth || image.width;\n        var naturalHeight = image.naturalHeight || image.height;\n\n        this.image = {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight,\n          aspectRatio: naturalWidth / naturalHeight\n        };\n\n        this.url = url;\n        this.ready = true;\n        this.build();\n      }, this)).one('error', function () {\n        $clone.remove();\n      });\n\n      // Hide the clone image and insert it after the original image\n      $clone.addClass(CLASS_HIDE).insertAfter($this);\n    }\n  });\n\n  $.extend(prototype, {\n    build: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $clone = this.$clone;\n      var $cropper;\n      var $cropBox;\n      var $face;\n\n      if (!this.ready) {\n        return;\n      }\n\n      // Unbuild first when replace\n      if (this.built) {\n        this.unbuild();\n      }\n\n      // Create cropper elements\n      this.$cropper = $cropper = $(Cropper.TEMPLATE);\n\n      // Hide the original image\n      $this.addClass(CLASS_HIDDEN);\n\n      // Show the clone image\n      $clone.removeClass(CLASS_HIDE);\n\n      this.$container = $this.parent().append($cropper);\n      this.$canvas = $cropper.find('.cropper-canvas').append($clone);\n      this.$dragBox = $cropper.find('.cropper-drag-box');\n      this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');\n      this.$viewBox = $cropper.find('.cropper-view-box');\n      this.$face = $face = $cropBox.find('.cropper-face');\n\n      this.initPreview();\n      this.bind();\n\n      // Format aspect ratio (0 -> NaN)\n      options.aspectRatio = num(options.aspectRatio) || NaN;\n\n      if (options.autoCrop) {\n        this.cropped = true;\n\n        if (options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      } else {\n        $cropBox.addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.guides) {\n        $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);\n      }\n\n      if (!options.center) {\n        $cropBox.find('.cropper-center').addClass(CLASS_HIDDEN);\n      }\n\n      if (options.cropBoxMovable) {\n        $face.addClass(CLASS_MOVE).data('action', ACTION_ALL);\n      }\n\n      if (!options.highlight) {\n        $face.addClass(CLASS_INVISIBLE);\n      }\n\n      if (options.background) {\n        $cropper.addClass(CLASS_BG);\n      }\n\n      if (!options.cropBoxResizable) {\n        $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);\n      }\n\n      this.setDragMode(options.dragCrop ? ACTION_CROP : (options.movable ? ACTION_MOVE : ACTION_NONE));\n\n      this.built = true;\n      this.render();\n      this.setData(options.data);\n      $this.one(EVENT_BUILT, options.built);\n      this.trigger(EVENT_BUILT);\n    },\n\n    unbuild: function () {\n      if (!this.built) {\n        return;\n      }\n\n      this.built = false;\n      this.initialImage = null;\n\n      // Clear `initialCanvas` is necessary when replace\n      this.initialCanvas = null;\n      this.initialCropBox = null;\n      this.container = null;\n      this.canvas = null;\n\n      // Clear `cropBox` is necessary when replace\n      this.cropBox = null;\n      this.unbind();\n\n      this.resetPreview();\n      this.$preview = null;\n\n      this.$viewBox = null;\n      this.$cropBox = null;\n      this.$dragBox = null;\n      this.$canvas = null;\n      this.$container = null;\n\n      this.$cropper.remove();\n      this.$cropper = null;\n    }\n  });\n\n  $.extend(prototype, {\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $container = this.$container;\n      var $cropper = this.$cropper;\n\n      $cropper.addClass(CLASS_HIDDEN);\n      $this.removeClass(CLASS_HIDDEN);\n\n      $cropper.css((this.container = {\n        width: max($container.width(), num(options.minContainerWidth) || 200),\n        height: max($container.height(), num(options.minContainerHeight) || 100)\n      }));\n\n      $this.addClass(CLASS_HIDDEN);\n      $cropper.removeClass(CLASS_HIDDEN);\n    },\n\n    // Canvas (image wrapper)\n    initCanvas: function () {\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var image = this.image;\n      var aspectRatio = image.aspectRatio;\n      var canvas = {\n            aspectRatio: aspectRatio,\n            width: containerWidth,\n            height: containerHeight\n          };\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        canvas.height = containerWidth / aspectRatio;\n      } else {\n        canvas.width = containerHeight * aspectRatio;\n      }\n\n      canvas.oldLeft = canvas.left = (containerWidth - canvas.width) / 2;\n      canvas.oldTop = canvas.top = (containerHeight - canvas.height) / 2;\n\n      this.canvas = canvas;\n      this.limitCanvas(true, true);\n      this.initialImage = $.extend({}, image);\n      this.initialCanvas = $.extend({}, canvas);\n    },\n\n    limitCanvas: function (size, position) {\n      var options = this.options;\n      var strict = options.strict;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n      var cropBox = this.cropBox;\n      var cropped = this.cropped && cropBox;\n      var initialCanvas = this.initialCanvas || canvas;\n      var initialCanvasWidth = initialCanvas.width;\n      var initialCanvasHeight = initialCanvas.height;\n      var minCanvasWidth;\n      var minCanvasHeight;\n\n      if (size) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (minCanvasWidth) {\n          if (strict) {\n            minCanvasWidth = max(cropped ? cropBox.width : initialCanvasWidth, minCanvasWidth);\n          }\n\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          if (strict) {\n            minCanvasHeight = max(cropped ? cropBox.height : initialCanvasHeight, minCanvasHeight);\n          }\n\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        } else if (strict) {\n          if (cropped) {\n            minCanvasWidth = cropBox.width;\n            minCanvasHeight = cropBox.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          } else {\n            minCanvasWidth = initialCanvasWidth;\n            minCanvasHeight = initialCanvasHeight;\n          }\n        }\n\n        $.extend(canvas, {\n          minWidth: minCanvasWidth,\n          minHeight: minCanvasHeight,\n          maxWidth: Infinity,\n          maxHeight: Infinity\n        });\n      }\n\n      if (position) {\n        if (strict) {\n          if (cropped) {\n            canvas.minLeft = min(cropBox.left, (cropBox.left + cropBox.width) - canvas.width);\n            canvas.minTop = min(cropBox.top, (cropBox.top + cropBox.height) - canvas.height);\n            canvas.maxLeft = cropBox.left;\n            canvas.maxTop = cropBox.top;\n          } else {\n            canvas.minLeft = min(0, containerWidth - canvas.width);\n            canvas.minTop = min(0, containerHeight - canvas.height);\n            canvas.maxLeft = max(0, containerWidth - canvas.width);\n            canvas.maxTop = max(0, containerHeight - canvas.height);\n          }\n        } else {\n          canvas.minLeft = -canvas.width;\n          canvas.minTop = -canvas.height;\n          canvas.maxLeft = containerWidth;\n          canvas.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (changed) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var image = this.image;\n      var aspectRatio;\n      var rotated;\n\n      if (this.rotated) {\n        this.rotated = false;\n\n        // Computes rotated sizes with image sizes\n        rotated = getRotatedSizes({\n          width: image.width,\n          height: image.height,\n          degree: image.rotate\n        });\n\n        aspectRatio = rotated.width / rotated.height;\n\n        if (aspectRatio !== canvas.aspectRatio) {\n          canvas.left -= (rotated.width - canvas.width) / 2;\n          canvas.top -= (rotated.height - canvas.height) / 2;\n          canvas.width = rotated.width;\n          canvas.height = rotated.height;\n          canvas.aspectRatio = aspectRatio;\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {\n        canvas.left = canvas.oldLeft;\n      }\n\n      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {\n        canvas.top = canvas.oldTop;\n      }\n\n      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);\n      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);\n      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);\n\n      this.$canvas.css({\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left,\n        top: canvas.top\n      });\n\n      this.renderImage();\n\n      if (this.cropped && options.strict) {\n        this.limitCropBox(true, true);\n      }\n\n      if (changed) {\n        this.output();\n      }\n    },\n\n    renderImage: function (changed) {\n      var canvas = this.canvas;\n      var image = this.image;\n      var reversed;\n\n      if (image.rotate) {\n        reversed = getRotatedSizes({\n          width: canvas.width,\n          height: canvas.height,\n          degree: image.rotate,\n          aspectRatio: image.aspectRatio\n        }, true);\n      }\n\n      $.extend(image, reversed ? {\n        width: reversed.width,\n        height: reversed.height,\n        left: (canvas.width - reversed.width) / 2,\n        top: (canvas.height - reversed.height) / 2\n      } : {\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0\n      });\n\n      this.$clone.css({\n        width: image.width,\n        height: image.height,\n        marginLeft: image.left,\n        marginTop: image.top,\n        transform: getTransform(image)\n      });\n\n      if (changed) {\n        this.output();\n      }\n    },\n\n    initCropBox: function () {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.aspectRatio;\n      var autoCropArea = num(options.autoCropArea) || 0.8;\n      var cropBox = {\n            width: canvas.width,\n            height: canvas.height\n          };\n\n      if (aspectRatio) {\n        if (canvas.height * aspectRatio > canvas.width) {\n          cropBox.height = cropBox.width / aspectRatio;\n        } else {\n          cropBox.width = cropBox.height * aspectRatio;\n        }\n      }\n\n      this.cropBox = cropBox;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      // The width of auto crop area must large than \"minWidth\", and the height too. (#164)\n      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);\n      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);\n      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;\n      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;\n\n      this.initialCropBox = $.extend({}, cropBox);\n    },\n\n    limitCropBox: function (size, position) {\n      var options = this.options;\n      var strict = options.strict;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var aspectRatio = options.aspectRatio;\n      var minCropBoxWidth;\n      var minCropBoxHeight;\n\n      if (size) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // The min/maxCropBoxWidth/Height must less than container width/height\n        cropBox.minWidth = min(containerWidth, minCropBoxWidth);\n        cropBox.minHeight = min(containerHeight, minCropBoxHeight);\n        cropBox.maxWidth = min(containerWidth, strict ? canvas.width : containerWidth);\n        cropBox.maxHeight = min(containerHeight, strict ? canvas.height : containerHeight);\n\n        if (aspectRatio) {\n\n          // Compare crop box size with container first\n          if (cropBox.maxHeight * aspectRatio > cropBox.maxWidth) {\n            cropBox.minHeight = cropBox.minWidth / aspectRatio;\n            cropBox.maxHeight = cropBox.maxWidth / aspectRatio;\n          } else {\n            cropBox.minWidth = cropBox.minHeight * aspectRatio;\n            cropBox.maxWidth = cropBox.maxHeight * aspectRatio;\n          }\n        }\n\n        // The \"minWidth\" must be less than \"maxWidth\", and the \"minHeight\" too.\n        cropBox.minWidth = min(cropBox.maxWidth, cropBox.minWidth);\n        cropBox.minHeight = min(cropBox.maxHeight, cropBox.minHeight);\n      }\n\n      if (position) {\n        if (strict) {\n          cropBox.minLeft = max(0, canvas.left);\n          cropBox.minTop = max(0, canvas.top);\n          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;\n          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;\n        } else {\n          cropBox.minLeft = 0;\n          cropBox.minTop = 0;\n          cropBox.maxLeft = containerWidth - cropBox.width;\n          cropBox.maxTop = containerHeight - cropBox.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options;\n      var container = this.container;\n      var containerWidth = container.width;\n      var containerHeight = container.height;\n      var cropBox = this.cropBox;\n\n      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {\n        cropBox.left = cropBox.oldLeft;\n      }\n\n      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {\n        cropBox.top = cropBox.oldTop;\n      }\n\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);\n      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n\n        // Turn to move the canvas when the crop box is equal to the container\n        this.$face.data('action', (cropBox.width === containerWidth && cropBox.height === containerHeight) ? ACTION_MOVE : ACTION_ALL);\n      }\n\n      this.$cropBox.css({\n        width: cropBox.width,\n        height: cropBox.height,\n        left: cropBox.left,\n        top: cropBox.top\n      });\n\n      if (this.cropped && options.strict) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      this.preview();\n      this.trigger(EVENT_CROP, this.getData());\n    }\n  });\n\n  $.extend(prototype, {\n    initPreview: function () {\n      var url = this.url;\n\n      this.$preview = $(this.options.preview);\n      this.$viewBox.html('<img src=\"' + url + '\">');\n      this.$preview.each(function () {\n        var $this = $(this);\n\n        // Save the original size for recover\n        $this.data(PREVIEW, {\n          width: $this.width(),\n          height: $this.height(),\n          original: $this.html()\n        });\n\n        /**\n         * Override img element styles\n         * Add `display:block` to avoid margin top issue\n         * (Occur only when margin-top <= -height)\n         */\n        $this.html(\n          '<img src=\"' + url + '\" style=\"display:block;width:100%;' +\n          'min-width:0!important;min-height:0!important;' +\n          'max-width:none!important;max-height:none!important;' +\n          'image-orientation:0deg!important\">'\n        );\n      });\n    },\n\n    resetPreview: function () {\n      this.$preview.each(function () {\n        var $this = $(this);\n\n        $this.html($this.data(PREVIEW).original).removeData(PREVIEW);\n      });\n    },\n\n    preview: function () {\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var width = image.width;\n      var height = image.height;\n      var left = cropBox.left - canvas.left - image.left;\n      var top = cropBox.top - canvas.top - image.top;\n\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      this.$viewBox.find('img').css({\n        width: width,\n        height: height,\n        marginLeft: -left,\n        marginTop: -top,\n        transform: getTransform(image)\n      });\n\n      this.$preview.each(function () {\n        var $this = $(this);\n        var data = $this.data(PREVIEW);\n        var ratio = data.width / cropBox.width;\n        var newWidth = data.width;\n        var newHeight = cropBox.height * ratio;\n\n        if (newHeight > data.height) {\n          ratio = data.height / cropBox.height;\n          newWidth = cropBox.width * ratio;\n          newHeight = data.height;\n        }\n\n        $this.width(newWidth).height(newHeight).find('img').css({\n          width: width * ratio,\n          height: height * ratio,\n          marginLeft: -left * ratio,\n          marginTop: -top * ratio,\n          transform: getTransform(image)\n        });\n      });\n    }\n  });\n\n  $.extend(prototype, {\n    bind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.on(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.on(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.on(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.on(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.on(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.cropStart, this));\n\n      if (options.zoomable && options.mouseWheelZoom) {\n        $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));\n      }\n\n      if (options.doubleClickToggle) {\n        $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));\n      }\n\n      $document.\n        on(EVENT_MOUSE_MOVE, (this._cropMove = proxy(this.cropMove, this))).\n        on(EVENT_MOUSE_UP, (this._cropEnd = proxy(this.cropEnd, this)));\n\n      if (options.responsive) {\n        $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n      }\n    },\n\n    unbind: function () {\n      var options = this.options;\n      var $this = this.$element;\n      var $cropper = this.$cropper;\n\n      if ($.isFunction(options.cropstart)) {\n        $this.off(EVENT_CROP_START, options.cropstart);\n      }\n\n      if ($.isFunction(options.cropmove)) {\n        $this.off(EVENT_CROP_MOVE, options.cropmove);\n      }\n\n      if ($.isFunction(options.cropend)) {\n        $this.off(EVENT_CROP_END, options.cropend);\n      }\n\n      if ($.isFunction(options.crop)) {\n        $this.off(EVENT_CROP, options.crop);\n      }\n\n      if ($.isFunction(options.zoom)) {\n        $this.off(EVENT_ZOOM, options.zoom);\n      }\n\n      $cropper.off(EVENT_MOUSE_DOWN, this.cropStart);\n\n      if (options.zoomable && options.mouseWheelZoom) {\n        $cropper.off(EVENT_WHEEL, this.wheel);\n      }\n\n      if (options.doubleClickToggle) {\n        $cropper.off(EVENT_DBLCLICK, this.dblclick);\n      }\n\n      $document.\n        off(EVENT_MOUSE_MOVE, this._cropMove).\n        off(EVENT_MOUSE_UP, this._cropEnd);\n\n      if (options.responsive) {\n        $window.off(EVENT_RESIZE, this._resize);\n      }\n    }\n  });\n\n  $.extend(prototype, {\n    resize: function () {\n      var $container = this.$container;\n      var container = this.container;\n      var canvasData;\n      var cropBoxData;\n      var ratio;\n\n      // Check `container` is necessary for IE8\n      if (this.disabled || !container) {\n        return;\n      }\n\n      ratio = $container.width() / container.width;\n\n      // Resize when width changed or height changed\n      if (ratio !== 1 || $container.height() !== container.height) {\n        canvasData = this.getCanvasData();\n        cropBoxData = this.getCropBoxData();\n\n        this.render();\n        this.setCanvasData($.each(canvasData, function (i, n) {\n          canvasData[i] = n * ratio;\n        }));\n        this.setCropBoxData($.each(cropBoxData, function (i, n) {\n          cropBoxData[i] = n * ratio;\n        }));\n      }\n    },\n\n    dblclick: function () {\n      if (this.disabled) {\n        return;\n      }\n\n      if (this.$dragBox.hasClass(CLASS_CROP)) {\n        this.setDragMode(ACTION_MOVE);\n      } else {\n        this.setDragMode(ACTION_CROP);\n      }\n    },\n\n    wheel: function (event) {\n      var originalEvent = event.originalEvent;\n      var e = originalEvent;\n      var ratio = num(this.options.wheelZoomRatio) || 0.1;\n      var delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * ratio, originalEvent);\n    },\n\n    cropStart: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = originalEvent || event;\n      var touchesLength;\n      var action;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.touchDragZoom && touchesLength === 2) {\n            e = touches[1];\n            this.startX2 = e.pageX;\n            this.startY2 = e.pageY;\n            action = ACTION_ZOOM;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      action = action || $(e.target).data('action');\n\n      if (REGEXP_ACTIONS.test(action)) {\n        if (this.trigger(EVENT_CROP_START, {\n          originalEvent: originalEvent,\n          action: action\n        })) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.action = action;\n        this.cropping = false;\n        this.startX = e.pageX;\n        this.startY = e.pageY;\n\n        if (action === ACTION_CROP) {\n          this.cropping = true;\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      }\n    },\n\n    cropMove: function (event) {\n      var options = this.options;\n      var originalEvent = event.originalEvent;\n      var touches = originalEvent && originalEvent.touches;\n      var e = originalEvent || event;\n      var action = this.action;\n      var touchesLength;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.touchDragZoom && touchesLength === 2) {\n            e = touches[1];\n            this.endX2 = e.pageX;\n            this.endY2 = e.pageY;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      if (action) {\n        if (this.trigger(EVENT_CROP_MOVE, {\n          originalEvent: originalEvent,\n          action: action\n        })) {\n          return;\n        }\n\n        event.preventDefault();\n\n        this.endX = e.pageX;\n        this.endY = e.pageY;\n\n        this.change(e.shiftKey, action === ACTION_ZOOM ? originalEvent : null);\n      }\n    },\n\n    cropEnd: function (event) {\n      var originalEvent = event.originalEvent;\n      var action = this.action;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (action) {\n        event.preventDefault();\n\n        if (this.cropping) {\n          this.cropping = false;\n          this.$dragBox.toggleClass(CLASS_MODAL, this.cropped && this.options.modal);\n        }\n\n        this.action = '';\n\n        this.trigger(EVENT_CROP_END, {\n          originalEvent: originalEvent,\n          action: action\n        });\n      }\n    }\n  });\n\n  $.extend(prototype, {\n    change: function (shiftKey, originalEvent) {\n      var options = this.options;\n      var aspectRatio = options.aspectRatio;\n      var action = this.action;\n      var container = this.container;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var width = cropBox.width;\n      var height = cropBox.height;\n      var left = cropBox.left;\n      var top = cropBox.top;\n      var right = left + width;\n      var bottom = top + height;\n      var minLeft = 0;\n      var minTop = 0;\n      var maxWidth = container.width;\n      var maxHeight = container.height;\n      var renderable = true;\n      var offset;\n      var range;\n\n      // Locking aspect ratio in \"free mode\" by holding shift key (#259)\n      if (!aspectRatio && shiftKey) {\n        aspectRatio = width && height ? width / height : 1;\n      }\n\n      if (options.strict) {\n        minLeft = cropBox.minLeft;\n        minTop = cropBox.minTop;\n        maxWidth = minLeft + min(container.width, canvas.width);\n        maxHeight = minTop + min(container.height, canvas.height);\n      }\n\n      range = {\n        x: this.endX - this.startX,\n        y: this.endY - this.startY\n      };\n\n      if (aspectRatio) {\n        range.X = range.y * aspectRatio;\n        range.Y = range.x / aspectRatio;\n      }\n\n      switch (action) {\n        // Move crop box\n        case ACTION_ALL:\n          left += range.x;\n          top += range.y;\n          break;\n\n        // Resize crop box\n        case ACTION_EAST:\n          if (range.x >= 0 && (right >= maxWidth || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top -= range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_WEST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH:\n          if (range.y <= 0 && (top <= minTop || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left += range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_SOUTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_WEST:\n          if (range.x <= 0 && (left <= minLeft || aspectRatio &&\n            (top <= minTop || bottom >= maxHeight))) {\n\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n\n          if (aspectRatio) {\n            height = width / aspectRatio;\n            top += range.Y / 2;\n          }\n\n          if (width < 0) {\n            action = ACTION_EAST;\n            width = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH:\n          if (range.y >= 0 && (bottom >= maxHeight || aspectRatio &&\n            (left <= minLeft || right >= maxWidth))) {\n\n            renderable = false;\n            break;\n          }\n\n          height += range.y;\n\n          if (aspectRatio) {\n            width = height * aspectRatio;\n            left -= range.X / 2;\n          }\n\n          if (height < 0) {\n            action = ACTION_NORTH;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_EAST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_NORTH_WEST:\n          if (aspectRatio) {\n            if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n              renderable = false;\n              break;\n            }\n\n            height -= range.y;\n            top += range.y;\n            width = height * aspectRatio;\n            left += range.X;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y <= 0 && top <= minTop) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y <= 0) {\n              if (top > minTop) {\n                height -= range.y;\n                top += range.y;\n              }\n            } else {\n              height -= range.y;\n              top += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_SOUTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_NORTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_SOUTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_WEST:\n          if (aspectRatio) {\n            if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width -= range.x;\n            left += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x <= 0) {\n              if (left > minLeft) {\n                width -= range.x;\n                left += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width -= range.x;\n              left += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_EAST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n          }\n\n          break;\n\n        case ACTION_SOUTH_EAST:\n          if (aspectRatio) {\n            if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n              renderable = false;\n              break;\n            }\n\n            width += range.x;\n            height = width / aspectRatio;\n          } else {\n            if (range.x >= 0) {\n              if (right < maxWidth) {\n                width += range.x;\n              } else if (range.y >= 0 && bottom >= maxHeight) {\n                renderable = false;\n              }\n            } else {\n              width += range.x;\n            }\n\n            if (range.y >= 0) {\n              if (bottom < maxHeight) {\n                height += range.y;\n              }\n            } else {\n              height += range.y;\n            }\n          }\n\n          if (width < 0 && height < 0) {\n            action = ACTION_NORTH_WEST;\n            height = 0;\n            width = 0;\n          } else if (width < 0) {\n            action = ACTION_SOUTH_WEST;\n            width = 0;\n          } else if (height < 0) {\n            action = ACTION_NORTH_EAST;\n            height = 0;\n          }\n\n          break;\n\n        // Move canvas\n        case ACTION_MOVE:\n          canvas.left += range.x;\n          canvas.top += range.y;\n          this.renderCanvas(true);\n          renderable = false;\n          break;\n\n        // Zoom canvas\n        case ACTION_ZOOM:\n          this.zoom((function (x1, y1, x2, y2) {\n            var z1 = sqrt(x1 * x1 + y1 * y1);\n            var z2 = sqrt(x2 * x2 + y2 * y2);\n\n            return (z2 - z1) / z1;\n          })(\n            abs(this.startX - this.startX2),\n            abs(this.startY - this.startY2),\n            abs(this.endX - this.endX2),\n            abs(this.endY - this.endY2)\n          ), originalEvent);\n          this.startX2 = this.endX2;\n          this.startY2 = this.endY2;\n          renderable = false;\n          break;\n\n        // Create crop box\n        case ACTION_CROP:\n          if (range.x && range.y) {\n            offset = this.$cropper.offset();\n            left = this.startX - offset.left;\n            top = this.startY - offset.top;\n            width = cropBox.minWidth;\n            height = cropBox.minHeight;\n\n            if (range.x > 0) {\n              if (range.y > 0) {\n                action = ACTION_SOUTH_EAST;\n              } else {\n                action = ACTION_NORTH_EAST;\n                top -= height;\n              }\n            } else {\n              if (range.y > 0) {\n                action = ACTION_SOUTH_WEST;\n                left -= width;\n              } else {\n                action = ACTION_NORTH_WEST;\n                left -= width;\n                top -= height;\n              }\n            }\n\n            // Show the crop box if is hidden\n            if (!this.cropped) {\n              this.cropped = true;\n              this.$cropBox.removeClass(CLASS_HIDDEN);\n            }\n          }\n\n          break;\n\n        // No default\n      }\n\n      if (renderable) {\n        cropBox.width = width;\n        cropBox.height = height;\n        cropBox.left = left;\n        cropBox.top = top;\n        this.action = action;\n\n        this.renderCropBox();\n      }\n\n      // Override\n      this.startX = this.endX;\n      this.startY = this.endY;\n    }\n  });\n\n  $.extend(prototype, {\n\n    // Show the crop box manually\n    crop: function () {\n      if (!this.built || this.disabled) {\n        return;\n      }\n\n      if (!this.cropped) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n\n        this.$cropBox.removeClass(CLASS_HIDDEN);\n      }\n\n      this.setCropBoxData(this.initialCropBox);\n    },\n\n    // Reset the image and crop box to their initial states\n    reset: function () {\n      if (!this.built || this.disabled) {\n        return;\n      }\n\n      this.image = $.extend({}, this.initialImage);\n      this.canvas = $.extend({}, this.initialCanvas);\n\n      // Required for strict mode\n      this.cropBox = $.extend({}, this.initialCropBox);\n\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n\n    // Clear the crop box\n    clear: function () {\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      $.extend(this.cropBox, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.cropped = false;\n      this.renderCropBox();\n\n      this.limitCanvas();\n\n      // Render canvas after crop box rendered\n      this.renderCanvas();\n\n      this.$dragBox.removeClass(CLASS_MODAL);\n      this.$cropBox.addClass(CLASS_HIDDEN);\n    },\n\n    /**\n     * Replace the image's src and rebuild the cropper\n     *\n     * @param {String} url\n     */\n    replace: function (url) {\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.$element.attr('src', url);\n        }\n\n        // Clear previous data\n        this.options.data = null;\n        this.load(url);\n      }\n    },\n\n    // Enable (unfreeze) the cropper\n    enable: function () {\n      if (this.built) {\n        this.disabled = false;\n        this.$cropper.removeClass(CLASS_DISABLED);\n      }\n    },\n\n    // Disable (freeze) the cropper\n    disable: function () {\n      if (this.built) {\n        this.disabled = true;\n        this.$cropper.addClass(CLASS_DISABLED);\n      }\n    },\n\n    // Destroy the cropper and remove the instance from the image\n    destroy: function () {\n      var $this = this.$element;\n\n      if (this.ready) {\n        if (this.isImg) {\n          $this.attr('src', this.originalUrl);\n        }\n\n        this.unbuild();\n        $this.removeClass(CLASS_HIDDEN);\n      } else if (this.$clone) {\n        this.$clone.remove();\n      }\n\n      $this.removeData(NAMESPACE);\n    },\n\n    /**\n     * Move the canvas\n     *\n     * @param {Number} offsetX\n     * @param {Number} offsetY (optional)\n     */\n    move: function (offsetX, offsetY) {\n      var canvas = this.canvas;\n\n      // If \"offsetY\" is not present, its default value is \"offsetX\"\n      if (isUndefined(offsetY)) {\n        offsetY = offsetX;\n      }\n\n      offsetX = num(offsetX);\n      offsetY = num(offsetY);\n\n      if (this.built && !this.disabled && this.options.movable) {\n        canvas.left += isNumber(offsetX) ? offsetX : 0;\n        canvas.top += isNumber(offsetY) ? offsetY : 0;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Zoom the canvas\n     *\n     * @param {Number} ratio\n     * @param {Event} _originalEvent (private)\n     */\n    zoom: function (ratio, _originalEvent) {\n      var canvas = this.canvas;\n      var width;\n      var height;\n\n      ratio = num(ratio);\n\n      if (ratio && this.built && !this.disabled && this.options.zoomable) {\n        if (this.trigger(EVENT_ZOOM, {\n          originalEvent: _originalEvent,\n          ratio: ratio\n        })) {\n          return;\n        }\n\n        if (ratio < 0) {\n          ratio =  1 / (1 - ratio);\n        } else {\n          ratio = 1 + ratio;\n        }\n\n        width = canvas.width * ratio;\n        height = canvas.height * ratio;\n        canvas.left -= (width - canvas.width) / 2;\n        canvas.top -= (height - canvas.height) / 2;\n        canvas.width = width;\n        canvas.height = height;\n        this.renderCanvas(true);\n        this.setDragMode(ACTION_MOVE);\n      }\n    },\n\n    /**\n     * Rotate the canvas\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#rotate()\n     *\n     * @param {Number} degree\n     */\n    rotate: function (degree) {\n      var image = this.image;\n      var rotate = image.rotate || 0;\n\n      degree = num(degree) || 0;\n\n      if (this.built && !this.disabled && this.options.rotatable) {\n        image.rotate = (rotate + degree) % 360;\n        this.rotated = true;\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Scale the image\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function#scale()\n     *\n     * @param {Number} scaleX\n     * @param {Number} scaleY (optional)\n     */\n    scale: function (scaleX, scaleY) {\n      var image = this.image;\n\n      // If \"scaleY\" is not present, its default value is \"scaleX\"\n      if (isUndefined(scaleY)) {\n        scaleY = scaleX;\n      }\n\n      scaleX = num(scaleX);\n      scaleY = num(scaleY);\n\n      if (this.built && !this.disabled && this.options.scalable) {\n        image.scaleX = isNumber(scaleX) ? scaleX : 1;\n        image.scaleY = isNumber(scaleY) ? scaleY : 1;\n        this.renderImage(true);\n      }\n    },\n\n    /**\n     * Get the cropped area position and size data (base on the original image)\n     *\n     * @param {Boolean} rounded (optional)\n     * @return {Object} data\n     */\n    getData: function (rounded) {\n      var options = this.options;\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBox = this.cropBox;\n      var ratio;\n      var data;\n\n      if (this.built && this.cropped) {\n        data = {\n          x: cropBox.left - canvas.left,\n          y: cropBox.top - canvas.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n\n        ratio = image.width / image.naturalWidth;\n\n        $.each(data, function (i, n) {\n          n = n / ratio;\n          data[i] = rounded ? Math.round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      if (options.rotatable) {\n        data.rotate = image.rotate || 0;\n      }\n\n      if (options.scalable) {\n        data.scaleX = image.scaleX || 1;\n        data.scaleY = image.scaleY || 1;\n      }\n\n      return data;\n    },\n\n    /**\n     * Set the cropped area position and size with new data\n     *\n     * @param {Object} data\n     */\n    setData: function (data) {\n      var image = this.image;\n      var canvas = this.canvas;\n      var cropBoxData = {};\n      var ratio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.built && !this.disabled && $.isPlainObject(data)) {\n        if (isNumber(data.rotate) && data.rotate !== image.rotate &&\n          this.options.rotatable) {\n\n          image.rotate = data.rotate;\n          this.rotated = true;\n          this.renderCanvas(true);\n        }\n\n        ratio = image.width / image.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvas.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvas.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n    },\n\n    /**\n     * Get the container size data\n     *\n     * @return {Object} data\n     */\n    getContainerData: function () {\n      return this.built ? this.container : {};\n    },\n\n    /**\n     * Get the image position and size data\n     *\n     * @return {Object} data\n     */\n    getImageData: function () {\n      return this.ready ? this.image : {};\n    },\n\n    /**\n     * Get the canvas position and size data\n     *\n     * @return {Object} data\n     */\n    getCanvasData: function () {\n      var canvas = this.canvas;\n      var data;\n\n      if (this.built) {\n        data = {\n          left: canvas.left,\n          top: canvas.top,\n          width: canvas.width,\n          height: canvas.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the canvas position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCanvasData: function (data) {\n      var canvas = this.canvas;\n      var aspectRatio = canvas.aspectRatio;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.built && !this.disabled && $.isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvas.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvas.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvas.width = data.width;\n          canvas.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvas.height = data.height;\n          canvas.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n    },\n\n    /**\n     * Get the crop box position and size data\n     *\n     * @return {Object} data\n     */\n    getCropBoxData: function () {\n      var cropBox = this.cropBox;\n      var data;\n\n      if (this.built && this.cropped) {\n        data = {\n          left: cropBox.left,\n          top: cropBox.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n      }\n\n      return data || {};\n    },\n\n    /**\n     * Set the crop box position and size with new data\n     *\n     * @param {Object} data\n     */\n    setCropBoxData: function (data) {\n      var cropBox = this.cropBox;\n      var aspectRatio = this.options.aspectRatio;\n      var widthChanged;\n      var heightChanged;\n\n      if ($.isFunction(data)) {\n        data = data.call(this.$element);\n      }\n\n      if (this.built && this.cropped && !this.disabled && $.isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBox.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBox.top = data.top;\n        }\n\n        if (isNumber(data.width) && data.width !== cropBox.width) {\n          widthChanged = true;\n          cropBox.width = data.width;\n        }\n\n        if (isNumber(data.height) && data.height !== cropBox.height) {\n          heightChanged = true;\n          cropBox.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (widthChanged) {\n            cropBox.height = cropBox.width / aspectRatio;\n          } else if (heightChanged) {\n            cropBox.width = cropBox.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n    },\n\n    /**\n     * Get a canvas drawn the cropped image\n     *\n     * @param {Object} options (optional)\n     * @return {HTMLCanvasElement} canvas\n     */\n    getCroppedCanvas: function (options) {\n      var originalWidth;\n      var originalHeight;\n      var canvasWidth;\n      var canvasHeight;\n      var scaledWidth;\n      var scaledHeight;\n      var scaledRatio;\n      var aspectRatio;\n      var canvas;\n      var context;\n      var data;\n\n      if (!this.built || !this.cropped || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!$.isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if ($.isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n      canvasWidth = scaledWidth || originalWidth;\n      canvasHeight = scaledHeight || originalHeight;\n\n      canvas = $('<canvas>')[0];\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.$clone[0], this.image);\n        var sourceWidth = source.width;\n        var sourceHeight = source.height;\n        var args = [source];\n\n        // Source canvas\n        var srcX = data.x;\n        var srcY = data.y;\n        var srcWidth;\n        var srcHeight;\n\n        // Destination canvas\n        var dstX;\n        var dstY;\n        var dstWidth;\n        var dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        args.push(srcX, srcY, srcWidth, srcHeight);\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          args.push(dstX, dstY, dstWidth, dstHeight);\n        }\n\n        return args;\n      }).call(this));\n\n      return canvas;\n    },\n\n    /**\n     * Change the aspect ratio of the crop box\n     *\n     * @param {Number} aspectRatio\n     */\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n\n        // 0 -> NaN\n        options.aspectRatio = num(aspectRatio) || NaN;\n\n        if (this.built) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n    },\n\n    /**\n     * Change the drag mode\n     *\n     * @param {String} mode (optional)\n     */\n    setDragMode: function (mode) {\n      var options = this.options;\n      var croppable;\n      var movable;\n\n      if (this.ready && !this.disabled) {\n        croppable = options.dragCrop && mode === ACTION_CROP;\n        movable = options.movable && mode === ACTION_MOVE;\n        mode = (croppable || movable) ? mode : ACTION_NONE;\n\n        this.$dragBox.\n          data('action', mode).\n          toggleClass(CLASS_CROP, croppable).\n          toggleClass(CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n\n          // Sync drag mode to crop box when it is not movable(#300)\n          this.$face.\n            data('action', mode).\n            toggleClass(CLASS_CROP, croppable).\n            toggleClass(CLASS_MOVE, movable);\n        }\n      }\n    }\n  });\n\n  $.extend(Cropper.prototype, prototype);\n\n  Cropper.DEFAULTS = {\n\n    // Define the aspect ratio of the crop box\n    aspectRatio: NaN,\n\n    // An object with the previous cropping result data\n    data: null,\n\n    // A jQuery selector for adding extra containers to preview\n    preview: '',\n\n    // Strict mode, the image cannot zoom out less than the container\n    strict: true,\n\n    // Rebuild when resize the window\n    responsive: true,\n\n    // Check if the target image is cross origin\n    checkImageOrigin: true,\n\n    // Show the black modal\n    modal: true,\n\n    // Show the dashed lines for guiding\n    guides: true,\n\n    // Show the center indicator for guiding\n    center: true,\n\n    // Show the white modal to highlight the crop box\n    highlight: true,\n\n    // Show the grid background\n    background: true,\n\n    // Enable to crop the image automatically when initialize\n    autoCrop: true,\n\n    // Define the percentage of automatic cropping area when initializes\n    autoCropArea: 0.8,\n\n    // Enable to create new crop box by dragging over the image\n    dragCrop: true,\n\n    // Enable to move the image\n    movable: true,\n\n    // Enable to rotate the image\n    rotatable: true,\n\n    // Enable to scale the image\n    scalable: true,\n\n    // Enable to zoom the image\n    zoomable: true,\n\n    // Enable to zoom the image by wheeling mouse\n    mouseWheelZoom: true,\n\n    // Define zoom ratio when zoom the image by wheeling mouse\n    wheelZoomRatio: 0.1,\n\n    // Enable to zoom the image by dragging touch\n    touchDragZoom: true,\n\n    // Enable to move the crop box\n    cropBoxMovable: true,\n\n    // Enable to resize the crop box\n    cropBoxResizable: true,\n\n    // Toggle drag mode between \"crop\" and \"move\" when double click on the cropper\n    doubleClickToggle: true,\n\n    // Size limitation\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Shortcuts of events\n    build: null,\n    built: null,\n    cropstart: null,\n    cropmove: null,\n    cropend: null,\n    crop: null,\n    zoom: null\n  };\n\n  Cropper.setDefaults = function (options) {\n    $.extend(Cropper.DEFAULTS, options);\n  };\n\n  Cropper.TEMPLATE = (\n    '<div class=\"cropper-container\">' +\n      '<div class=\"cropper-canvas\"></div>' +\n      '<div class=\"cropper-drag-box\"></div>' +\n      '<div class=\"cropper-crop-box\">' +\n        '<span class=\"cropper-view-box\"></span>' +\n        '<span class=\"cropper-dashed dashed-h\"></span>' +\n        '<span class=\"cropper-dashed dashed-v\"></span>' +\n        '<span class=\"cropper-center\"></span>' +\n        '<span class=\"cropper-face\"></span>' +\n        '<span class=\"cropper-line line-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-line line-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-line line-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-line line-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-e\" data-action=\"e\"></span>' +\n        '<span class=\"cropper-point point-n\" data-action=\"n\"></span>' +\n        '<span class=\"cropper-point point-w\" data-action=\"w\"></span>' +\n        '<span class=\"cropper-point point-s\" data-action=\"s\"></span>' +\n        '<span class=\"cropper-point point-ne\" data-action=\"ne\"></span>' +\n        '<span class=\"cropper-point point-nw\" data-action=\"nw\"></span>' +\n        '<span class=\"cropper-point point-sw\" data-action=\"sw\"></span>' +\n        '<span class=\"cropper-point point-se\" data-action=\"se\"></span>' +\n      '</div>' +\n    '</div>'\n  );\n\n  // Save the other cropper\n  Cropper.other = $.fn.cropper;\n\n  // Register as jQuery plugin\n  $.fn.cropper = function (options) {\n    var args = toArray(arguments, 1);\n    var result;\n\n    this.each(function () {\n      var $this = $(this);\n      var data = $this.data(NAMESPACE);\n      var fn;\n\n      if (!data) {\n        if (/destroy/.test(options)) {\n          return;\n        }\n\n        $this.data(NAMESPACE, (data = new Cropper(this, options)));\n      }\n\n      if (typeof options === 'string' && $.isFunction(fn = data[options])) {\n        result = fn.apply(data, args);\n      }\n    });\n\n    return isUndefined(result) ? this : result;\n  };\n\n  $.fn.cropper.Constructor = Cropper;\n  $.fn.cropper.setDefaults = Cropper.setDefaults;\n\n  // No conflict\n  $.fn.cropper.noConflict = function () {\n    $.fn.cropper = Cropper.other;\n    return this;\n  };\n\n});\n","/**\n * Created by jong on 7/29/15.\n */\n\nvar ILabCrop=function($,settings){\n    this.settings=settings;\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.cropper=this.modalContainer.find('.ilabc-cropper');\n    this.cropperData={};\n    this.modal_id=settings.modal_id;\n\n    var cropRef=this;\n    var resizeTimerId;\n    var isResizing=false;\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: this.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                cropRef.bindUI(response);\n            });\n        }\n    });\n\n    $(window).resize(function() {\n        if (!isResizing)\n        {\n            data=cropRef.cropper.cropper('getData');\n            cropRef.settings.prev_crop_x=data.x;\n            cropRef.settings.prev_crop_y=data.y;\n            cropRef.settings.prev_crop_width=data.width;\n            cropRef.settings.prev_crop_height=data.height;\n        }\n\n        isResizing=true;\n        cropRef.updatePreviewWidth();\n        clearTimeout(resizeTimerId);\n        resizeTimerId = setTimeout(cropRef._resized, 250);\n    });\n\n\n    this.modalContainer.find('.ilabc-button-crop').on('click',function(e){\n        e.preventDefault();\n        cropRef.crop();\n        return false;\n    });\n\n    this._resized=function(){\n        cropRef.bindUI(cropRef.settings);\n        isResizing=false;\n    };\n\n    this.updatePreviewWidth=function() {\n        var width =  this.modalContainer.find('.ilab-crop-preview-title').width();\n        this.modalContainer.find('.ilab-crop-preview').css({\n            'height' : (width / cropRef.settings.aspect_ratio) + 'px',\n            'width' : width + 'px'\n        });\n    };\n\n    this.bindUI=function(settings){\n        this.settings=settings;\n\n        this.cropper.cropper('destroy');\n        this.cropper.off('built.cropper');\n\n        if (settings.hasOwnProperty('cropped_src') && settings.cropped_src!=null)\n        {\n            this.modalContainer.find('.ilab-current-crop-img').attr('src',settings.cropped_src);\n        }\n\n        if (settings.hasOwnProperty('size_title') && (settings.size_title!=null))\n        {\n            this.modalContainer.find('.ilabc-crop-size-title').text(\"Current \"+settings.size_title+\" (\"+settings.min_width+\" x \"+settings.min_height+\")\");\n        }\n\n        if (typeof settings.aspect_ratio !== 'undefined')\n        {\n            this.updatePreviewWidth();\n\n            if ((typeof settings.prev_crop_x !== 'undefined') && (settings.prev_crop_x!=null)) {\n                this.cropperData = {\n                    x : settings.prev_crop_x,\n                    y : settings.prev_crop_y,\n                    width : settings.prev_crop_width,\n                    height : settings.prev_crop_height\n                };\n                console.log(this.cropperData);\n            }\n\n            this.cropper.on('built.cropper',function(){\n                cropRef.updatePreviewWidth();\n            }).on('crop.cropper',function(e){\n                //console.log(e.x, e.y, e.width, e.height);\n            }).cropper({\n                aspectRatio : settings.aspect_ratio,\n                minWidth : settings.min_width,\n                minHeight : settings.min_height,\n                modal : true,\n                zoomable: false,\n                mouseWheelZoom: false,\n                dragCrop: false,\n                autoCropArea: 1,\n                movable: false,\n                data : this.cropperData,\n                checkImageOrigin: false,\n                responsive: true,\n                preview: '#ilabm-container-'+this.modal_id+' .ilab-crop-preview'\n            });\n        }\n    };\n\n    this.crop=function(){\n        var cropRef=this;\n\n        this.displayStatus('Saving crop ...');\n\n        var data = this.cropper.cropper('getData');\n        data['action'] = 'ilab_perform_crop';\n        data['post'] = this.settings.image_id;\n        data['size'] = this.settings.size;\n        jQuery.post(ajaxurl, data, function(response) {\n            console.log(response);\n            if (response.status=='ok') {\n                cropRef.modalContainer.find('.ilab-current-crop-img').one('load',function(){\n                   cropRef.hideStatus();\n                });\n                cropRef.modalContainer.find('.ilab-current-crop-img').attr('src', response.src);\n            }\n            else\n                cropRef.hideStatus();\n        });\n    };\n\n    this.displayStatus=function(message){\n        cropRef.modalContainer.find('.ilabm-status-label').text(message);\n        cropRef.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        cropRef.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n\n    this.bindUI(settings);\n};\n","/**\n * Created by jong on 8/8/15.\n */\n\nvar ImgixComponents=(function(){\n    var byteToHex=function(byte) {\n        var hexChar = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n        return hexChar[(byte >> 4) & 0x0f] + hexChar[byte & 0x0f];\n    };\n\n    return {\n        utilities: {\n          byteToHex:byteToHex\n      }\n    };\n})();","(function($){\n\n    $.fn.imgixLabel=function(options){\n        var settings= $.extend({},options);\n\n        return this.each(function(){\n            var label=$(this);\n\n            var changeTimerId;\n\n            var currentVal=0;\n\n            var textInput=$('<input type=\"text\" class=\"imgix-label-editor is-hidden\" pattern=\"[0-9-]+\">');\n            label.parent().append(textInput);\n\n            textInput.on('keydown',function(e){\n                if (e.keyCode==27) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(currentVal);\n\n                    label.text(currentVal);\n                }\n                else if (e.keyCode==13) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                }\n                else if (e.keyCode==38) {\n                    var val=parseInt(textInput.val());\n                    val++;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n                }\n                else if (e.keyCode==40) {\n                    var val=parseInt(textInput.val());\n                    val--;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n\n                }\n                else {\n                    if (e.keyCode<57)\n                        return true;\n                    else if ((e.keyCode>90) && (e.keyCode<105))\n                        return true;\n                    else if (e.keyCode==109)\n                        return true;\n                    else if (e.metaKey)\n                        return true;\n\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            label.on('click',function(e){\n                e.preventDefault();\n\n                textInput.on('input',function(){\n                    var val=parseInt(textInput.val());\n                    if (settings.hasOwnProperty('changed'))\n                    {\n                        clearTimeout(changeTimerId);\n                        changeTimerId = setTimeout(function(){\n                            settings.changed(val);\n                        }, 500);\n                    }\n\n                    label.text(val);\n                });\n\n                textInput.on('blur',function(){\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                });\n\n                currentVal=(settings.hasOwnProperty('currentValue')) ? settings.currentValue() : 0;\n                textInput.val(currentVal);\n                textInput.removeClass('is-hidden');\n                textInput.select();\n                textInput.focus();\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixSlider=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.valueLabel=container.find('.imgix-param-title-right > h3');\n        this.slider=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var sliderRef=this;\n\n        this.container.find('.imgix-param-label').imgixLabel({\n            currentValue:function(){\n                return sliderRef.slider.val();\n            },\n            changed:function(newVal){\n                if (newVal==sliderRef.slider.val())\n                    return;\n\n                sliderRef.slider.val(newVal);\n                sliderRef.slider.hide().show(0);\n                sliderRef.delegate.preview();\n            }\n        });\n\n        this.resetButton.on('click',function(){\n            sliderRef.reset();\n        });\n\n        this.slider.on('input',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n        });\n\n        this.slider.on('change',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n            sliderRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixSlider.prototype.destroy=function() {\n        this.slider.off('input');\n        this.slider.off('change');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixSlider.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        this.valueLabel.text(val);\n        this.slider.val(val);\n        this.slider.hide().show(0);\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixSlider.prototype.saveValue=function(data) {\n        if (this.slider.val()!=this.defaultValue)\n            data[this.param]=this.slider.val();\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixColor=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.colorPicker=container.find('.imgix-param-color');\n        this.alphaSlider=container.find('.imgix-param-alpha');\n        this.type=container.data('param-type');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.param=container.data('param');\n        this.defaultValue=container.data('default-value');\n\n        var colorPickerRef=this;\n\n        if (this.type=='blend-color') {\n            this.blendParam=container.data('blend-param');\n            this.blendSelect = container.find('.imgix-param-blend');\n\n            var currentBlend=container.data('blend-value');\n            this.blendSelect.val(currentBlend);\n\n            this.blendSelect.on('change',function(){\n                colorPickerRef.delegate.preview();\n            });\n        }\n\n        this.colorPicker.wpColorPicker({\n            palettes: false,\n            change: function(event, ui) {\n                colorPickerRef.delegate.preview();\n            }\n        });\n\n        this.alphaSlider.on('change',function(){\n            colorPickerRef.delegate.preview();\n        });\n\n        this.resetButton.on('click',function(){\n            colorPickerRef.reset();\n        });\n    };\n\n    ImgixComponents.ImgixColor.prototype.destroy=function() {\n        this.alphaSlider.off('change');\n        if (this.type=='blend-color') {\n            this.blendSelect.off('change');\n        }\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixColor.prototype.reset=function(data) {\n        var blend='none';\n        var val;\n\n        if (data && data.hasOwnProperty(this.blendParam))\n        {\n            blend=data[this.blendParam];\n        }\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n        }\n        else\n            val=this.defaultValue;\n\n        val=val.replace('#','');\n        if (val.length==8)\n        {\n            var alpha=(parseInt('0x'+val.substring(0,2))/255.0)*100.0;\n            val=val.substring(2);\n\n            this.alphaSlider.val(Math.round(alpha));\n            this.alphaSlider.hide().show(0);\n        }\n\n        this.colorPicker.val('#'+val);\n        this.colorPicker.wpColorPicker('color', '#'+val);\n\n        if (this.type=='blend-color') {\n            this.blendSelect.val(blend);\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixColor.prototype.saveValue=function(data) {\n        if (this.alphaSlider.val()>0) {\n            data[this.param] = '#' + ImgixComponents.utilities.byteToHex(Math.round((parseFloat(this.alphaSlider.val()) / 100.0) * 255.0)) + this.colorPicker.val().replace('#', '');\n\n            if (this.type == 'blend-color') {\n                if (this.blendSelect.val()!='none') {\n                    data[this.blendParam] = this.blendSelect.val();\n                }\n            }\n        }\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixAlignment=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.alignmentParam=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var alignmentRef=this;\n\n        this.resetButton.on('click',function(){\n            alignmentRef.reset();\n        });\n\n        container.find('.imgix-alignment-button').on('click',function(){\n            var button=$(this);\n            alignmentRef.container.find('.imgix-alignment-button').each(function(){\n                $(this).removeClass('selected-alignment');\n            });\n\n            button.addClass('selected-alignment');\n            alignmentRef.alignmentParam.val(button.data('param-value'));\n            alignmentRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.destroy=function() {\n        this.resetButton.off('click');\n        this.container.find('.imgix-alignment-button').off('click');\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        if (val=='')\n            val=this.defaultValue;\n\n        this.container.find('.imgix-alignment-button').each(function(){\n            var button=$(this);\n            if (button.data('param-value')==val)\n                button.addClass('selected-alignment');\n            else\n                button.removeClass('selected-alignment');\n        });\n\n        this.alignmentParam.val(val);\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.saveValue=function(data) {\n        if (this.alignmentParam.val()!=this.defaultValue)\n            data[this.param]=this.alignmentParam.val();\n\n        return data;\n    };\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixMediaChooser=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.preview=container.find('.imgix-media-preview img');\n        this.mediaInput=container.find('.imgix-param');\n        this.selectButton=container.find('.imgix-media-button');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        this.uploader=wp.media({\n            title: 'Select Watermark',\n            button: {\n                text: 'Select Watermark'\n            },\n            multiple: false\n        });\n\n        var mediaRef=this;\n\n        this.resetButton.on('click',function(){\n            mediaRef.reset();\n        });\n\n        this.uploader.on('select', function() {\n            attachment = mediaRef.uploader.state().get('selection').first().toJSON();\n            mediaRef.mediaInput.val(attachment.id);\n            mediaRef.preview.attr('src',attachment.url);\n\n            mediaRef.delegate.preview();\n        });\n\n        this.selectButton.on('click',function(e){\n            e.preventDefault();\n            mediaRef.uploader.open();\n            return false;\n        });\n\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.destroy=function() {\n        this.selectButton.off('click');\n        this.uploader.off('select');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n            this.mediaInput.val(val);\n        }\n        else\n            this.mediaInput.val('');\n\n        if (data && data.hasOwnProperty(this.param+'_url'))\n        {\n            this.preview.attr('src',data[this.param+'_url']);\n        }\n        else\n        {\n            this.preview.removeAttr('src').replaceWith(this.preview.clone());\n            this.preview=this.container.find('.imgix-media-preview img');\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.saveValue=function(data) {\n        var val=this.mediaInput.val();\n\n        if (val && val!='')\n            data[this.param]=val;\n\n        return data;\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixPillbox=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.param=container.data('param');\n        this.values=container.data('param-values').split(',');\n        this.buttons=container.find('.ilabm-pill');\n        this.inputs={};\n\n        var pillboxRef=this;\n\n        this.buttons.each(function(){\n            var button=$(this);\n            var valueName=button.data('param');\n            pillboxRef.inputs[valueName]=pillboxRef.container.find(\"input[name='\"+valueName+\"']\");\n            button.on('click',function(e){\n                e.preventDefault();\n\n                if (pillboxRef.inputs[valueName].val()==0)\n                {\n                    pillboxRef.inputs[valueName].val(1);\n                    button.addClass('pill-selected');\n                }\n                else\n                {\n                    pillboxRef.inputs[valueName].val(0);\n                    button.removeClass('pill-selected');\n                }\n\n                pillboxRef.delegate.preview();\n\n                return false;\n            });\n        });\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.destroy=function() {\n        this.buttons.off('click');\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.reset=function(data) {\n        this.buttons.each(function(){\n           $(this).removeClass('pill-selected');\n        });\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            pillboxRef.inputs[key].val(0);\n        });\n\n        if (data && data.hasOwnProperty(this.param)) {\n            var val = data[this.param].split(',');\n\n\n            val.forEach(function (key, index) {\n                pillboxRef.inputs[key].val(1);\n                pillboxRef.container.find('imgix-pill-' + key).addClass('pill-selected');\n            });\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.saveValue=function(data) {\n        var vals=[];\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            if (pillboxRef.inputs[key].val()==1)\n                vals.push(key);\n        });\n\n        if (vals.length>0)\n            data[this.param]=vals.join(',');\n\n        return data;\n    };\n\n}(jQuery));\n","/**\n * Created by jong on 8/9/15.\n */\n\nvar ILabImgixPresets=function($,delegate,container) {\n\n    this.delegate=delegate;\n    this.container=container.find('.ilabm-bottom-bar');\n    this.presetSelect=this.container.find('.imgix-presets');\n    this.presetContainer=this.container.find('.imgix-preset-container');\n    this.presetDefaultCheckbox=this.container.find('.imgix-preset-make-default');\n\n    var self=this;\n\n    self.presetSelect.on('change',function(){\n        if (self.presetSelect.val==0)\n        {\n            self.delegate.resetAll();\n            self.presetDefaultCheckbox.prop('checked',false);\n            return;\n        }\n\n        var preset=self.delegate.settings.presets[self.presetSelect.val()];\n        if (preset.default_for==self.delegate.settings.size)\n            self.presetDefaultCheckbox.prop('checked',true);\n\n        self.delegate.bindPreset(preset);\n    });\n\n    this.container.find('.imgix-new-preset-button').on('click',function(){\n        self.newPreset();\n    });\n\n    this.container.find('.imgix-save-preset-button').on('click',function(){\n        self.savePreset();\n    });\n\n    this.container.find('.imgix-delete-preset-button').on('click',function(){\n        self.deletePreset();\n    });\n\n    this.init=function() {\n        self.presetSelect.find('option').remove();\n\n        if (Object.keys(self.delegate.settings.presets).length==0)\n        {\n            self.presetContainer.addClass('is-hidden');\n        }\n        else\n        {\n            Object.keys(self.delegate.settings.presets).forEach(function(key,index) {\n                console.log(key);\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",'0')\n                    .text('None'));\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",key)\n                    .text(self.delegate.settings.presets[key].title));\n            });\n\n            self.presetContainer.removeClass('is-hidden');\n            self.presetSelect.val(self.delegate.settings.currentPreset);\n        }\n    };\n\n    this.clearSelected=function(){\n        self.presetSelect.val(0);\n        self.presetDefaultCheckbox.prop('checked',false);\n    };\n\n    this.setCurrentPreset=function(preset, is_default){\n        if (is_default)\n            self.presetDefaultCheckbox.prop('checked',true);\n        else\n            self.presetDefaultCheckbox.prop('checked',false);\n\n        self.presetSelect.val(preset);\n    };\n\n    this.newPreset=function(){\n        var name=prompt(\"New preset name\");\n        if (name!=null)\n        {\n            self.delegate.displayStatus('Saving preset ...');\n\n            var data={};\n            data['name']=name;\n            if (self.presetDefaultCheckbox.is(':checked'))\n                data['make_default']=1;\n\n            self.delegate.postAjax('ilab_imgix_new_preset', data, function(response) {\n                self.delegate.hideStatus();\n                if (response.status=='ok')\n                {\n                    self.delegate.settings.currentPreset=response.currentPreset;\n                    self.delegate.settings.presets=response.presets;\n\n                    self.init();\n                }\n            });\n        }\n    };\n\n    this.savePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        self.delegate.displayStatus('Saving preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n        if (self.presetDefaultCheckbox.is(':checked'))\n            data['make_default']=1;\n\n        self.delegate.postAjax('ilab_imgix_save_preset', data, function(response) {\n            self.delegate.hideStatus();\n        });\n    };\n\n    this.deletePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        if (!confirm(\"Are you sure you want to delete this preset?\"))\n            return;\n\n        self.delegate.displayStatus('Delete preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n\n        self.delegate.postAjax('ilab_imgix_delete_preset', data, function(response) {\n            self.delegate.hideStatus();\n            if (response.status=='ok')\n            {\n                self.delegate.settings.currentPreset=response.currentPreset;\n                self.delegate.settings.presets=response.presets;\n\n                self.init();\n\n                self.delegate.bindUI(response);\n            }\n        });\n    };\n\n    this.init();\n};","(function($){\n\n    $.fn.ilabSidebarTabs=function(options){\n        var settings= $.extend({},options);\n\n        var firstTab=false;\n        return this.find('.ilabm-sidebar-tab').each(function(){\n            var tab=$(this);\n            var target=settings.container.find('.'+tab.data('target'));\n\n            if (!firstTab)\n            {\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                firstTab=true;\n            }\n\n            tab.on('click',function(e){\n                e.preventDefault();\n\n                settings.container.find(\".ilabm-sidebar-tab\").each(function() {\n                    var otherTab = $(this);\n                    var tabTarget = settings.container.find('.' + otherTab.data('target'));\n\n                    otherTab.removeClass('active-tab');\n                    tabTarget.addClass('is-hidden');\n                });\n\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","/**\n * Image Editing Module\n */\n\nvar ILabImageEdit=function($, settings){\n    console.log(settings);\n\n    this.previewTimeout=null;\n    this.previewsSuspended=false;\n    this.parameters=[];\n\n    var self=this;\n\n    this.settings=settings;\n\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.waitModal=this.modalContainer.find('.ilabm-preview-wait-modal');\n    this.previewImage=this.modalContainer.find('.imgix-preview-image');\n\n    this.presets=new ILabImgixPresets($,this,this.modalContainer);\n\n    this.modalContainer.find('.imgix-button-reset-all').on('click',function(){\n        self.resetAll();\n    });\n    this.modalContainer.find('.imgix-button-save-adjustments').on('click',function(){\n        self.apply();\n    });\n\n    this.modalContainer.find('.imgix-parameter').each(function(){\n        var container=$(this);\n        var type=container.data('param-type');\n        if (type=='slider')\n            self.parameters.push(new ImgixComponents.ImgixSlider(self,container));\n        else if ((type=='color') || (type=='blend-color'))\n            self.parameters.push(new ImgixComponents.ImgixColor(self,container));\n        else if (type=='pillbox')\n            self.parameters.push(new ImgixComponents.ImgixPillbox(self,container));\n        else if (type=='media-chooser')\n            self.parameters.push(new ImgixComponents.ImgixMediaChooser(self,container));\n        else if (type=='alignment')\n            self.parameters.push(new ImgixComponents.ImgixAlignment(self,container));\n    });\n\n    this.modalContainer.on('click','.imgix-pill',function(){\n        var paramName=$(this).data('param');\n        var param=self.modalContainer.find('#imgix-param-'+paramName);\n        if (param.val()==1)\n        {\n            param.val(0);\n            $(this).removeClass('pill-selected');\n        }\n        else\n        {\n            param.val(1);\n            $(this).addClass('pill-selected');\n        }\n\n        self.preview();\n    });\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: self.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                self.bindUI(response);\n            });\n        }\n    });\n\n    this.modalContainer.find(\".ilabm-sidebar-tabs\").ilabSidebarTabs({\n        delegate: this,\n        container: this.modalContainer\n    });\n\n    /**\n     * Performs the wordpress ajax post\n     * @param action\n     * @param data\n     * @param callback\n     * @private\n     */\n    this.postAjax=function(action,data,callback){\n        var postData={};\n        self.parameters.forEach(function(value,index){\n            postData=value.saveValue(postData);\n        });\n\n        console.log(postData);\n\n        data['image_id'] = self.settings.image_id;\n        data['action'] = action;\n        data['size'] = self.settings.size;\n        data['settings']=postData;\n\n        $.post(ajaxurl, data, callback);\n    }\n\n    /**\n     * Performs the actual request for a preview to be generated\n     * @private\n     */\n    function _preview(){\n        self.displayStatus('Building preview ...');\n\n        self.waitModal.removeClass('is-hidden');\n\n        self.postAjax('ilab_imgix_preview',{},function(response) {\n            if (response.status=='ok')\n            {\n                if (self.settings.debug)\n                    console.log(response.src);\n\n                self.previewImage.on('load',function(){\n                    self.waitModal.addClass('is-hidden');\n                    self.hideStatus();\n                });\n\n                self.previewImage.attr('src',response.src);\n            }\n            else\n            {\n                self.waitModal.addClass('is-hidden');\n                self.hideStatus();\n            }\n        });\n    }\n\n    /**\n     * Requests a preview to be generated.\n     */\n    this.preview=function(){\n        if (self.previewsSuspended)\n            return;\n\n        ILabModal.makeDirty();\n\n        clearTimeout(self.previewTimeout);\n        self.previewTimeout=setTimeout(_preview,500);\n    };\n\n    /**\n     * Binds the UI to the json response when selecting a tab or changing a preset\n     * @param data\n     */\n    this.bindUI=function(data){\n        if (data.hasOwnProperty('currentPreset') && (data.currentPreset!=null) && (data.currentPreset!='')) {\n            var p=self.settings.presets[data.currentPreset];\n            self.presets.setCurrentPreset(data.currentPreset,(p.default_for==data.size));\n        }\n        else\n            self.presets.clearSelected();\n\n        self.previewsSuspended=true;\n        self.settings.size=data.size;\n        self.settings.settings=data.settings;\n\n        var rebind=function(){\n            self.previewImage.off('load',rebind);\n            self.parameters.forEach(function(value,index){\n                value.reset(data.settings);\n            });\n\n            self.previewsSuspended=false;\n            ILabModal.makeClean();\n        };\n\n        if (data.src)\n        {\n            self.previewImage.on('load',rebind);\n            self.previewImage.attr('src',data.src);\n        }\n        else\n            rebind();\n    };\n\n    this.bindPreset=function(preset){\n        console.log(preset);\n        self.previewsSuspended=true;\n        self.settings.settings=preset.settings;\n\n        self.previewImage.off('load');\n        self.parameters.forEach(function(value,index){\n            value.reset(self.settings.settings);\n        });\n\n        self.previewsSuspended=false;\n        self.preview();\n    };\n\n\n    this.apply=function(){\n        self.displayStatus('Saving adjustments ...');\n\n        self.postAjax('ilab_imgix_save', {}, function(response) {\n            self.hideStatus();\n            ILabModal.makeClean();\n        });\n    };\n\n    /**\n     * Reset all of the values\n     */\n    this.resetAll=function(){\n        self.parameters.forEach(function(value,index){\n            value.reset();\n        });\n    };\n\n    this.displayStatus=function(message){\n        self.modalContainer.find('.ilabm-status-label').text(message);\n        self.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        self.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n};\n\n"],"sourceRoot":"js/"}