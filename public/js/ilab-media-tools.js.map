{"version":3,"sources":["ilab-crop.js","components/imgix-component.js","components/imgix-label.js","components/imgix-slider.js","components/imgix-color.js","components/imgix-alignment.js","components/imgix-media-chooser.js","components/imgix-pillbox.js","ilab-imgix-presets.js","ilab-sidebar-tabs.js","ilab-imgix.js"],"names":[],"mappingslJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfxtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ilab-media-tools.js","sourcesContent":["/**\n * Created by jong on 7/29/15.\n */\n\nvar ILabCrop=function($,settings){\n    this.settings=settings;\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.cropper=this.modalContainer.find('.ilabc-cropper');\n    this.cropperData={};\n    this.modal_id=settings.modal_id;\n\n    var cropRef=this;\n    var resizeTimerId;\n    var isResizing=false;\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: this.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                cropRef.bindUI(response);\n            });\n        }\n    });\n\n    $(window).resize(function() {\n        if (!isResizing)\n        {\n            data=cropRef.cropper.cropper('getData');\n            cropRef.settings.prev_crop_x=data.x;\n            cropRef.settings.prev_crop_y=data.y;\n            cropRef.settings.prev_crop_width=data.width;\n            cropRef.settings.prev_crop_height=data.height;\n        }\n\n        isResizing=true;\n        cropRef.updatePreviewWidth();\n        clearTimeout(resizeTimerId);\n        resizeTimerId = setTimeout(cropRef._resized, 250);\n    });\n\n\n    this.modalContainer.find('.ilabc-button-crop').on('click',function(e){\n        e.preventDefault();\n        cropRef.crop();\n        return false;\n    });\n\n    this._resized=function(){\n        cropRef.bindUI(cropRef.settings);\n        isResizing=false;\n    };\n\n    this.updatePreviewWidth=function() {\n        var width =  this.modalContainer.find('.ilab-crop-preview-title').width();\n        this.modalContainer.find('.ilab-crop-preview').css({\n            'height' : (width / cropRef.settings.aspect_ratio) + 'px',\n            'width' : width + 'px'\n        });\n    };\n\n    this.bindUI=function(settings){\n        this.settings=settings;\n\n        this.cropper.cropper('destroy');\n        this.cropper.off('built.cropper');\n\n        if (settings.hasOwnProperty('cropped_src') && settings.cropped_src!=null)\n        {\n            this.modalContainer.find('.ilab-current-crop-img').attr('src',settings.cropped_src);\n        }\n\n        if (settings.hasOwnProperty('size_title') && (settings.size_title!=null))\n        {\n            this.modalContainer.find('.ilabc-crop-size-title').text(\"Current \"+settings.size_title+\" (\"+settings.min_width+\" x \"+settings.min_height+\")\");\n        }\n\n        if (typeof settings.aspect_ratio !== 'undefined')\n        {\n            this.updatePreviewWidth();\n\n            if ((typeof settings.prev_crop_x !== 'undefined') && (settings.prev_crop_x!=null)) {\n                this.cropperData = {\n                    x : settings.prev_crop_x,\n                    y : settings.prev_crop_y,\n                    width : settings.prev_crop_width,\n                    height : settings.prev_crop_height\n                };\n                console.log(this.cropperData);\n            }\n\n            this.cropper.on('built.cropper',function(){\n                cropRef.updatePreviewWidth();\n            }).on('crop.cropper',function(e){\n                //console.log(e.x, e.y, e.width, e.height);\n            }).cropper({\n                aspectRatio : settings.aspect_ratio,\n                minWidth : settings.min_width,\n                minHeight : settings.min_height,\n                modal : true,\n                zoomable: false,\n                mouseWheelZoom: false,\n                dragCrop: false,\n                autoCropArea: 1,\n                movable: false,\n                data : this.cropperData,\n                checkImageOrigin: false,\n                responsive: true,\n                preview: '#ilabm-container-'+this.modal_id+' .ilab-crop-preview'\n            });\n        }\n    };\n\n    this.crop=function(){\n        var cropRef=this;\n\n        this.displayStatus('Saving crop ...');\n\n        var data = this.cropper.cropper('getData');\n        data['action'] = 'ilab_perform_crop';\n        data['post'] = this.settings.image_id;\n        data['size'] = this.settings.size;\n        jQuery.post(ajaxurl, data, function(response) {\n            console.log(response);\n            if (response.status=='ok') {\n                cropRef.modalContainer.find('.ilab-current-crop-img').one('load',function(){\n                   cropRef.hideStatus();\n                });\n                cropRef.modalContainer.find('.ilab-current-crop-img').attr('src', response.src);\n            }\n            else\n                cropRef.hideStatus();\n        });\n    };\n\n    this.displayStatus=function(message){\n        cropRef.modalContainer.find('.ilabm-status-label').text(message);\n        cropRef.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        cropRef.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n\n    this.bindUI(settings);\n};\n","/**\n * Created by jong on 8/8/15.\n */\n\nvar ImgixComponents=(function(){\n    var byteToHex=function(byte) {\n        var hexChar = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n        return hexChar[(byte >> 4) & 0x0f] + hexChar[byte & 0x0f];\n    };\n\n    return {\n        utilities: {\n          byteToHex:byteToHex\n      }\n    };\n})();","(function($){\n\n    $.fn.imgixLabel=function(options){\n        var settings= $.extend({},options);\n\n        return this.each(function(){\n            var label=$(this);\n\n            var changeTimerId;\n\n            var currentVal=0;\n\n            var textInput=$('<input type=\"text\" class=\"imgix-label-editor is-hidden\" pattern=\"[0-9-]+\">');\n            label.parent().append(textInput);\n\n            textInput.on('keydown',function(e){\n                if (e.keyCode==27) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(currentVal);\n\n                    label.text(currentVal);\n                }\n                else if (e.keyCode==13) {\n                    textInput.off('blur');\n                    textInput.off('input');\n\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                }\n                else if (e.keyCode==38) {\n                    var val=parseInt(textInput.val());\n                    val++;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n                }\n                else if (e.keyCode==40) {\n                    var val=parseInt(textInput.val());\n                    val--;\n                    textInput.val(val);\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n                    label.text(val);\n\n                }\n                else {\n                    if (e.keyCode<57)\n                        return true;\n                    else if ((e.keyCode>90) && (e.keyCode<105))\n                        return true;\n                    else if (e.keyCode==109)\n                        return true;\n                    else if (e.metaKey)\n                        return true;\n\n                    e.preventDefault();\n                    return false;\n                }\n            });\n\n            label.on('click',function(e){\n                e.preventDefault();\n\n                textInput.on('input',function(){\n                    var val=parseInt(textInput.val());\n                    if (settings.hasOwnProperty('changed'))\n                    {\n                        clearTimeout(changeTimerId);\n                        changeTimerId = setTimeout(function(){\n                            settings.changed(val);\n                        }, 500);\n                    }\n\n                    label.text(val);\n                });\n\n                textInput.on('blur',function(){\n                    var val=parseInt(textInput.val());\n                    textInput.addClass('is-hidden');\n                    if (settings.hasOwnProperty('changed'))\n                        settings.changed(val);\n\n                    label.text(val);\n                });\n\n                currentVal=(settings.hasOwnProperty('currentValue')) ? settings.currentValue() : 0;\n                textInput.val(currentVal);\n                textInput.removeClass('is-hidden');\n                textInput.select();\n                textInput.focus();\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixSlider=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.valueLabel=container.find('.imgix-param-title-right > h3');\n        this.slider=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var sliderRef=this;\n\n        this.container.find('.imgix-param-label').imgixLabel({\n            currentValue:function(){\n                return sliderRef.slider.val();\n            },\n            changed:function(newVal){\n                if (newVal==sliderRef.slider.val())\n                    return;\n\n                sliderRef.slider.val(newVal);\n                sliderRef.slider.hide().show(0);\n                sliderRef.delegate.preview();\n            }\n        });\n\n        this.resetButton.on('click',function(){\n            sliderRef.reset();\n        });\n\n        this.slider.on('input',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n        });\n\n        this.slider.on('change',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n            sliderRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixSlider.prototype.destroy=function() {\n        this.slider.off('input');\n        this.slider.off('change');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixSlider.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        this.valueLabel.text(val);\n        this.slider.val(val);\n        this.slider.hide().show(0);\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixSlider.prototype.saveValue=function(data) {\n        if (this.slider.val()!=this.defaultValue)\n            data[this.param]=this.slider.val();\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixColor=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.colorPicker=container.find('.imgix-param-color');\n        this.alphaSlider=container.find('.imgix-param-alpha');\n        this.type=container.data('param-type');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.param=container.data('param');\n        this.defaultValue=container.data('default-value');\n\n        var colorPickerRef=this;\n\n        if (this.type=='blend-color') {\n            this.blendParam=container.data('blend-param');\n            this.blendSelect = container.find('.imgix-param-blend');\n\n            var currentBlend=container.data('blend-value');\n            this.blendSelect.val(currentBlend);\n\n            this.blendSelect.on('change',function(){\n                colorPickerRef.delegate.preview();\n            });\n        }\n\n        this.colorPicker.wpColorPicker({\n            palettes: false,\n            change: function(event, ui) {\n                colorPickerRef.delegate.preview();\n            }\n        });\n\n        this.alphaSlider.on('change',function(){\n            colorPickerRef.delegate.preview();\n        });\n\n        this.resetButton.on('click',function(){\n            colorPickerRef.reset();\n        });\n    };\n\n    ImgixComponents.ImgixColor.prototype.destroy=function() {\n        this.alphaSlider.off('change');\n        if (this.type=='blend-color') {\n            this.blendSelect.off('change');\n        }\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixColor.prototype.reset=function(data) {\n        var blend='none';\n        var val;\n\n        if (data && data.hasOwnProperty(this.blendParam))\n        {\n            blend=data[this.blendParam];\n        }\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n        }\n        else\n            val=this.defaultValue;\n\n        val=val.replace('#','');\n        if (val.length==8)\n        {\n            var alpha=(parseInt('0x'+val.substring(0,2))/255.0)*100.0;\n            val=val.substring(2);\n\n            this.alphaSlider.val(Math.round(alpha));\n            this.alphaSlider.hide().show(0);\n        }\n\n        this.colorPicker.val('#'+val);\n        this.colorPicker.wpColorPicker('color', '#'+val);\n\n        if (this.type=='blend-color') {\n            this.blendSelect.val(blend);\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixColor.prototype.saveValue=function(data) {\n        if (this.alphaSlider.val()>0) {\n            data[this.param] = '#' + ImgixComponents.utilities.byteToHex(Math.round((parseFloat(this.alphaSlider.val()) / 100.0) * 255.0)) + this.colorPicker.val().replace('#', '');\n\n            if (this.type == 'blend-color') {\n                if (this.blendSelect.val()!='none') {\n                    data[this.blendParam] = this.blendSelect.val();\n                }\n            }\n        }\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixAlignment=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.alignmentParam=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var alignmentRef=this;\n\n        this.resetButton.on('click',function(){\n            alignmentRef.reset();\n        });\n\n        container.find('.imgix-alignment-button').on('click',function(){\n            var button=$(this);\n            alignmentRef.container.find('.imgix-alignment-button').each(function(){\n                $(this).removeClass('selected-alignment');\n            });\n\n            button.addClass('selected-alignment');\n            alignmentRef.alignmentParam.val(button.data('param-value'));\n            alignmentRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.destroy=function() {\n        this.resetButton.off('click');\n        this.container.find('.imgix-alignment-button').off('click');\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        if (val=='')\n            val=this.defaultValue;\n\n        this.container.find('.imgix-alignment-button').each(function(){\n            var button=$(this);\n            if (button.data('param-value')==val)\n                button.addClass('selected-alignment');\n            else\n                button.removeClass('selected-alignment');\n        });\n\n        this.alignmentParam.val(val);\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.saveValue=function(data) {\n        if (this.alignmentParam.val()!=this.defaultValue)\n            data[this.param]=this.alignmentParam.val();\n\n        return data;\n    };\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixMediaChooser=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.preview=container.find('.imgix-media-preview img');\n        this.mediaInput=container.find('.imgix-param');\n        this.selectButton=container.find('.imgix-media-button');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        this.uploader=wp.media({\n            title: 'Select Watermark',\n            button: {\n                text: 'Select Watermark'\n            },\n            multiple: false\n        });\n\n        var mediaRef=this;\n\n        this.resetButton.on('click',function(){\n            mediaRef.reset();\n        });\n\n        this.uploader.on('select', function() {\n            attachment = mediaRef.uploader.state().get('selection').first().toJSON();\n            mediaRef.mediaInput.val(attachment.id);\n            mediaRef.preview.attr('src',attachment.url);\n\n            mediaRef.delegate.preview();\n        });\n\n        this.selectButton.on('click',function(e){\n            e.preventDefault();\n            mediaRef.uploader.open();\n            return false;\n        });\n\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.destroy=function() {\n        this.selectButton.off('click');\n        this.uploader.off('select');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n            this.mediaInput.val(val);\n        }\n        else\n            this.mediaInput.val('');\n\n        if (data && data.hasOwnProperty(this.param+'_url'))\n        {\n            this.preview.attr('src',data[this.param+'_url']);\n        }\n        else\n        {\n            this.preview.removeAttr('src').replaceWith(this.preview.clone());\n            this.preview=this.container.find('.imgix-media-preview img');\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.saveValue=function(data) {\n        var val=this.mediaInput.val();\n\n        if (val && val!='')\n            data[this.param]=val;\n\n        return data;\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixPillbox=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.param=container.data('param');\n        this.values=container.data('param-values').split(',');\n        this.buttons=container.find('.ilabm-pill');\n        this.inputs={};\n\n        var pillboxRef=this;\n\n        this.buttons.each(function(){\n            var button=$(this);\n            var valueName=button.data('param');\n            pillboxRef.inputs[valueName]=pillboxRef.container.find(\"input[name='\"+valueName+\"']\");\n            button.on('click',function(e){\n                e.preventDefault();\n\n                if (pillboxRef.inputs[valueName].val()==0)\n                {\n                    pillboxRef.inputs[valueName].val(1);\n                    button.addClass('pill-selected');\n                }\n                else\n                {\n                    pillboxRef.inputs[valueName].val(0);\n                    button.removeClass('pill-selected');\n                }\n\n                pillboxRef.delegate.preview();\n\n                return false;\n            });\n        });\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.destroy=function() {\n        this.buttons.off('click');\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.reset=function(data) {\n        this.buttons.each(function(){\n           $(this).removeClass('pill-selected');\n        });\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            pillboxRef.inputs[key].val(0);\n        });\n\n        if (data && data.hasOwnProperty(this.param)) {\n            var val = data[this.param].split(',');\n\n\n            val.forEach(function (key, index) {\n                pillboxRef.inputs[key].val(1);\n                pillboxRef.container.find('imgix-pill-' + key).addClass('pill-selected');\n            });\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.saveValue=function(data) {\n        var vals=[];\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            if (pillboxRef.inputs[key].val()==1)\n                vals.push(key);\n        });\n\n        if (vals.length>0)\n            data[this.param]=vals.join(',');\n\n        return data;\n    };\n\n}(jQuery));\n","/**\n * Created by jong on 8/9/15.\n */\n\nvar ILabImgixPresets=function($,delegate,container) {\n\n    this.delegate=delegate;\n    this.container=container.find('.ilabm-bottom-bar');\n    this.presetSelect=this.container.find('.imgix-presets');\n    this.presetContainer=this.container.find('.imgix-preset-container');\n    this.presetDefaultCheckbox=this.container.find('.imgix-preset-make-default');\n\n    var self=this;\n\n    self.presetSelect.on('change',function(){\n        if (self.presetSelect.val==0)\n        {\n            self.delegate.resetAll();\n            self.presetDefaultCheckbox.prop('checked',false);\n            return;\n        }\n\n        var preset=self.delegate.settings.presets[self.presetSelect.val()];\n        if (preset.default_for==self.delegate.settings.size)\n            self.presetDefaultCheckbox.prop('checked',true);\n\n        self.delegate.bindPreset(preset);\n    });\n\n    this.container.find('.imgix-new-preset-button').on('click',function(){\n        self.newPreset();\n    });\n\n    this.container.find('.imgix-save-preset-button').on('click',function(){\n        self.savePreset();\n    });\n\n    this.container.find('.imgix-delete-preset-button').on('click',function(){\n        self.deletePreset();\n    });\n\n    this.init=function() {\n        self.presetSelect.find('option').remove();\n\n        if (Object.keys(self.delegate.settings.presets).length==0)\n        {\n            self.presetContainer.addClass('is-hidden');\n        }\n        else\n        {\n            Object.keys(self.delegate.settings.presets).forEach(function(key,index) {\n                console.log(key);\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",'0')\n                    .text('None'));\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",key)\n                    .text(self.delegate.settings.presets[key].title));\n            });\n\n            self.presetContainer.removeClass('is-hidden');\n            self.presetSelect.val(self.delegate.settings.currentPreset);\n        }\n    };\n\n    this.clearSelected=function(){\n        self.presetSelect.val(0);\n        self.presetDefaultCheckbox.prop('checked',false);\n    };\n\n    this.setCurrentPreset=function(preset, is_default){\n        if (is_default)\n            self.presetDefaultCheckbox.prop('checked',true);\n        else\n            self.presetDefaultCheckbox.prop('checked',false);\n\n        self.presetSelect.val(preset);\n    };\n\n    this.newPreset=function(){\n        var name=prompt(\"New preset name\");\n        if (name!=null)\n        {\n            self.delegate.displayStatus('Saving preset ...');\n\n            var data={};\n            data['name']=name;\n            if (self.presetDefaultCheckbox.is(':checked'))\n                data['make_default']=1;\n\n            self.delegate.postAjax('ilab_imgix_new_preset', data, function(response) {\n                self.delegate.hideStatus();\n                if (response.status=='ok')\n                {\n                    self.delegate.settings.currentPreset=response.currentPreset;\n                    self.delegate.settings.presets=response.presets;\n\n                    self.init();\n                }\n            });\n        }\n    };\n\n    this.savePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        self.delegate.displayStatus('Saving preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n        if (self.presetDefaultCheckbox.is(':checked'))\n            data['make_default']=1;\n\n        self.delegate.postAjax('ilab_imgix_save_preset', data, function(response) {\n            self.delegate.hideStatus();\n        });\n    };\n\n    this.deletePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        if (!confirm(\"Are you sure you want to delete this preset?\"))\n            return;\n\n        self.delegate.displayStatus('Delete preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n\n        self.delegate.postAjax('ilab_imgix_delete_preset', data, function(response) {\n            self.delegate.hideStatus();\n            if (response.status=='ok')\n            {\n                self.delegate.settings.currentPreset=response.currentPreset;\n                self.delegate.settings.presets=response.presets;\n\n                self.init();\n\n                self.delegate.bindUI(response);\n            }\n        });\n    };\n\n    this.init();\n};","(function($){\n\n    $.fn.ilabSidebarTabs=function(options){\n        var settings= $.extend({},options);\n\n        var firstTab=false;\n        return this.find('.ilabm-sidebar-tab').each(function(){\n            var tab=$(this);\n            var target=settings.container.find('.'+tab.data('target'));\n\n            if (!firstTab)\n            {\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                firstTab=true;\n            }\n\n            tab.on('click',function(e){\n                e.preventDefault();\n\n                settings.container.find(\".ilabm-sidebar-tab\").each(function() {\n                    var otherTab = $(this);\n                    var tabTarget = settings.container.find('.' + otherTab.data('target'));\n\n                    otherTab.removeClass('active-tab');\n                    tabTarget.addClass('is-hidden');\n                });\n\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","/**\n * Image Editing Module\n */\n\nvar ILabImageEdit=function($, settings){\n    console.log(settings);\n\n    this.previewTimeout=null;\n    this.previewsSuspended=false;\n    this.parameters=[];\n\n    var self=this;\n\n    this.settings=settings;\n\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.waitModal=this.modalContainer.find('.ilabm-preview-wait-modal');\n    this.previewImage=this.modalContainer.find('.imgix-preview-image');\n\n    this.presets=new ILabImgixPresets($,this,this.modalContainer);\n\n    this.modalContainer.find('.imgix-button-reset-all').on('click',function(){\n        self.resetAll();\n    });\n    this.modalContainer.find('.imgix-button-save-adjustments').on('click',function(){\n        self.apply();\n    });\n\n    this.modalContainer.find('.imgix-parameter').each(function(){\n        var container=$(this);\n        var type=container.data('param-type');\n        if (type=='slider')\n            self.parameters.push(new ImgixComponents.ImgixSlider(self,container));\n        else if ((type=='color') || (type=='blend-color'))\n            self.parameters.push(new ImgixComponents.ImgixColor(self,container));\n        else if (type=='pillbox')\n            self.parameters.push(new ImgixComponents.ImgixPillbox(self,container));\n        else if (type=='media-chooser')\n            self.parameters.push(new ImgixComponents.ImgixMediaChooser(self,container));\n        else if (type=='alignment')\n            self.parameters.push(new ImgixComponents.ImgixAlignment(self,container));\n    });\n\n    this.modalContainer.on('click','.imgix-pill',function(){\n        var paramName=$(this).data('param');\n        var param=self.modalContainer.find('#imgix-param-'+paramName);\n        if (param.val()==1)\n        {\n            param.val(0);\n            $(this).removeClass('pill-selected');\n        }\n        else\n        {\n            param.val(1);\n            $(this).addClass('pill-selected');\n        }\n\n        self.preview();\n    });\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: self.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                self.bindUI(response);\n            });\n        }\n    });\n\n    this.modalContainer.find(\".ilabm-sidebar-tabs\").ilabSidebarTabs({\n        delegate: this,\n        container: this.modalContainer\n    });\n\n    /**\n     * Performs the wordpress ajax post\n     * @param action\n     * @param data\n     * @param callback\n     * @private\n     */\n    this.postAjax=function(action,data,callback){\n        var postData={};\n        self.parameters.forEach(function(value,index){\n            postData=value.saveValue(postData);\n        });\n\n        console.log(postData);\n\n        data['image_id'] = self.settings.image_id;\n        data['action'] = action;\n        data['size'] = self.settings.size;\n        data['settings']=postData;\n\n        $.post(ajaxurl, data, callback);\n    }\n\n    /**\n     * Performs the actual request for a preview to be generated\n     * @private\n     */\n    function _preview(){\n        self.displayStatus('Building preview ...');\n\n        self.waitModal.removeClass('is-hidden');\n\n        self.postAjax('ilab_imgix_preview',{},function(response) {\n            if (response.status=='ok')\n            {\n                if (self.settings.debug)\n                    console.log(response.src);\n\n                self.previewImage.on('load',function(){\n                    self.waitModal.addClass('is-hidden');\n                    self.hideStatus();\n                });\n\n                self.previewImage.attr('src',response.src);\n            }\n            else\n            {\n                self.waitModal.addClass('is-hidden');\n                self.hideStatus();\n            }\n        });\n    }\n\n    /**\n     * Requests a preview to be generated.\n     */\n    this.preview=function(){\n        if (self.previewsSuspended)\n            return;\n\n        ILabModal.makeDirty();\n\n        clearTimeout(self.previewTimeout);\n        self.previewTimeout=setTimeout(_preview,500);\n    };\n\n    /**\n     * Binds the UI to the json response when selecting a tab or changing a preset\n     * @param data\n     */\n    this.bindUI=function(data){\n        if (data.hasOwnProperty('currentPreset') && (data.currentPreset!=null) && (data.currentPreset!='')) {\n            var p=self.settings.presets[data.currentPreset];\n            self.presets.setCurrentPreset(data.currentPreset,(p.default_for==data.size));\n        }\n        else\n            self.presets.clearSelected();\n\n        self.previewsSuspended=true;\n        self.settings.size=data.size;\n        self.settings.settings=data.settings;\n\n        var rebind=function(){\n            self.previewImage.off('load',rebind);\n            self.parameters.forEach(function(value,index){\n                value.reset(data.settings);\n            });\n\n            self.previewsSuspended=false;\n            ILabModal.makeClean();\n        };\n\n        if (data.src)\n        {\n            self.previewImage.on('load',rebind);\n            self.previewImage.attr('src',data.src);\n        }\n        else\n            rebind();\n    };\n\n    this.bindPreset=function(preset){\n        console.log(preset);\n        self.previewsSuspended=true;\n        self.settings.settings=preset.settings;\n\n        self.previewImage.off('load');\n        self.parameters.forEach(function(value,index){\n            value.reset(self.settings.settings);\n        });\n\n        self.previewsSuspended=false;\n        self.preview();\n    };\n\n\n    this.apply=function(){\n        self.displayStatus('Saving adjustments ...');\n\n        self.postAjax('ilab_imgix_save', {}, function(response) {\n            self.hideStatus();\n            ILabModal.makeClean();\n        });\n    };\n\n    /**\n     * Reset all of the values\n     */\n    this.resetAll=function(){\n        self.parameters.forEach(function(value,index){\n            value.reset();\n        });\n    };\n\n    this.displayStatus=function(message){\n        self.modalContainer.find('.ilabm-status-label').text(message);\n        self.modalContainer.find('.ilabm-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        self.modalContainer.find('.ilabm-status-container').addClass('is-hidden');\n    };\n};\n\n"],"sourceRoot":"js/"}