{"version":3,"sources":["cropper.js","ilab-crop.js","components/imgix-component.js","components/imgix-slider.js","components/imgix-color.js","components/imgix-alignment.js","components/imgix-media-chooser.js","components/imgix-pillbox.js","ilab-imgix-presets.js","ilab-sidebar-tabs.js","ilab-imgix.js"],"names":[],"mappingsxkEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACftGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtfile":"ilab-media-tools.js","sourcesContent":["/*!\n * Cropper v0.10.1\n * https://github.com/fengyuanchen/cropper\n *\n * Copyright (c) 2014-2015 Fengyuan Chen and contributors\n * Released under the MIT license\n *\n * Date: 2015-07-05T10:44:58.203Z\n */\n\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node / CommonJS\n    factory(require('jquery'));\n  } else {\n    // Browser globals.\n    factory(jQuery);\n  }\n})(function ($) {\n\n  'use strict';\n\n  var $window = $(window),\n      $document = $(document),\n      location = window.location,\n\n      // Constants\n      CROPPER_NAMESPACE = '.cropper',\n      CROPPER_PREVIEW = 'preview' + CROPPER_NAMESPACE,\n\n      // RegExps\n      REGEXP_DRAG_TYPES = /^(e|n|w|s|ne|nw|sw|se|all|crop|move|zoom)$/,\n\n      // Classes\n      CLASS_MODAL = 'cropper-modal',\n      CLASS_HIDE = 'cropper-hide',\n      CLASS_HIDDEN = 'cropper-hidden',\n      CLASS_INVISIBLE = 'cropper-invisible',\n      CLASS_MOVE = 'cropper-move',\n      CLASS_CROP = 'cropper-crop',\n      CLASS_DISABLED = 'cropper-disabled',\n      CLASS_BG = 'cropper-bg',\n\n      // Events\n      EVENT_MOUSE_DOWN = 'mousedown touchstart pointerdown MSPointerDown',\n      EVENT_MOUSE_MOVE = 'mousemove touchmove pointermove MSPointerMove',\n      EVENT_MOUSE_UP = 'mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel',\n      EVENT_WHEEL = 'wheel mousewheel DOMMouseScroll',\n      EVENT_DBLCLICK = 'dblclick',\n      EVENT_RESIZE = 'resize' + CROPPER_NAMESPACE, // Bind to window with namespace\n      EVENT_BUILD = 'build' + CROPPER_NAMESPACE,\n      EVENT_BUILT = 'built' + CROPPER_NAMESPACE,\n      EVENT_DRAG_START = 'dragstart' + CROPPER_NAMESPACE,\n      EVENT_DRAG_MOVE = 'dragmove' + CROPPER_NAMESPACE,\n      EVENT_DRAG_END = 'dragend' + CROPPER_NAMESPACE,\n      EVENT_ZOOM_IN = 'zoomin' + CROPPER_NAMESPACE,\n      EVENT_ZOOM_OUT = 'zoomout' + CROPPER_NAMESPACE,\n      EVENT_CHANGE = 'change' + CROPPER_NAMESPACE,\n\n      // Supports\n      SUPPORT_CANVAS = $.isFunction($('<canvas>')[0].getContext),\n\n      // Others\n      sqrt = Math.sqrt,\n      min = Math.min,\n      max = Math.max,\n      abs = Math.abs,\n      sin = Math.sin,\n      cos = Math.cos,\n      num = parseFloat,\n\n      // Prototype\n      prototype = {};\n\n  function isNumber(n) {\n    return typeof n === 'number' && !isNaN(n);\n  }\n\n  function isUndefined(n) {\n    return typeof n === 'undefined';\n  }\n\n  function toArray(obj, offset) {\n    var args = [];\n\n    if (isNumber(offset)) { // It's necessary for IE8\n      args.push(offset);\n    }\n\n    return args.slice.apply(obj, args);\n  }\n\n  // Custom proxy to avoid jQuery's guid\n  function proxy(fn, context) {\n    var args = toArray(arguments, 2);\n\n    return function () {\n      return fn.apply(context, args.concat(toArray(arguments)));\n    };\n  }\n\n  function isCrossOriginURL(url) {\n    var parts = url.match(/^(https?:)\\/\\/([^\\:\\/\\?#]+):?(\\d*)/i);\n\n    return parts && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);\n  }\n\n  function addTimestamp(url) {\n    var timestamp = 'timestamp=' + (new Date()).getTime();\n\n    return (url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp);\n  }\n\n  function getRotateValue(degree) {\n    return degree ? 'rotate(' + degree + 'deg)' : 'none';\n  }\n\n  function getRotatedSizes(data, reverse) {\n    var deg = abs(data.degree) % 180,\n        arc = (deg > 90 ? (180 - deg) : deg) * Math.PI / 180,\n        sinArc = sin(arc),\n        cosArc = cos(arc),\n        width = data.width,\n        height = data.height,\n        aspectRatio = data.aspectRatio,\n        newWidth,\n        newHeight;\n\n    if (!reverse) {\n      newWidth = width * cosArc + height * sinArc;\n      newHeight = width * sinArc + height * cosArc;\n    } else {\n      newWidth = width / (cosArc + sinArc / aspectRatio);\n      newHeight = newWidth / aspectRatio;\n    }\n\n    return {\n      width: newWidth,\n      height: newHeight\n    };\n  }\n\n  function getSourceCanvas(image, data) {\n    var canvas = $('<canvas>')[0],\n        context = canvas.getContext('2d'),\n        width = data.naturalWidth,\n        height = data.naturalHeight,\n        rotate = data.rotate,\n        rotated = getRotatedSizes({\n          width: width,\n          height: height,\n          degree: rotate\n        });\n\n    if (rotate) {\n      canvas.width = rotated.width;\n      canvas.height = rotated.height;\n      context.save();\n      context.translate(rotated.width / 2, rotated.height / 2);\n      context.rotate(rotate * Math.PI / 180);\n      context.drawImage(image, -width / 2, -height / 2, width, height);\n      context.restore();\n    } else {\n      canvas.width = width;\n      canvas.height = height;\n      context.drawImage(image, 0, 0, width, height);\n    }\n\n    return canvas;\n  }\n\n  function Cropper(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, Cropper.DEFAULTS, $.isPlainObject(options) && options);\n\n    this.ready = false;\n    this.built = false;\n    this.rotated = false;\n    this.cropped = false;\n    this.disabled = false;\n    this.replaced = false;\n    this.isImg = false;\n    this.originalUrl = '';\n    this.canvas = null;\n    this.cropBox = null;\n\n    this.init();\n  }\n\n  prototype.init = function () {\n    var $this = this.$element,\n        url;\n\n    if ($this.is('img')) {\n      this.isImg = true;\n      this.originalUrl = url = $this.attr('src'); // e.g.: \"img/picture.jpg\"\n\n      if (!url) { // Blank image\n        return;\n      }\n\n      url = $this.prop('src'); // e.g.: \"http://example.com/img/picture.jpg\"\n    } else if ($this.is('canvas') && SUPPORT_CANVAS) {\n      url = $this[0].toDataURL();\n    }\n\n    this.load(url);\n  };\n\n  prototype.load = function (url) {\n    var options = this.options,\n        $this = this.$element,\n        crossOrigin,\n        bustCacheUrl,\n        buildEvent,\n        $clone;\n\n    if (!url) {\n      return;\n    }\n\n    buildEvent = $.Event(EVENT_BUILD);\n    $this.one(EVENT_BUILD, options.build).trigger(buildEvent); // Only trigger once\n\n    if (buildEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    if (options.checkImageOrigin && isCrossOriginURL(url)) {\n      crossOrigin = ' crossOrigin=\"anonymous\"';\n\n      if (!$this.prop('crossOrigin')) { // Only when there was not a \"crossOrigin\" property\n        bustCacheUrl = addTimestamp(url); // Bust cache (#148)\n      }\n    }\n\n    // IE8 compatibility: Don't use \"$().attr()\" to set \"src\"\n    this.$clone = $clone = $('<img' + (crossOrigin || '') + ' src=\"' + (bustCacheUrl || url) + '\">');\n\n    $clone.one('load', $.proxy(function () {\n      var image = $clone[0],\n          naturalWidth = image.naturalWidth || image.width,\n          naturalHeight = image.naturalHeight || image.height; // $clone.width() and $clone.height() will return 0 in IE8 (#319)\n\n      this.image = {\n        naturalWidth: naturalWidth,\n        naturalHeight: naturalHeight,\n        aspectRatio: naturalWidth / naturalHeight,\n        rotate: 0\n      };\n\n      this.url = url;\n      this.ready = true;\n      this.build();\n    }, this)).one('error', function () {\n      $clone.remove();\n    });\n\n    // Hide and insert into the document\n    $clone.addClass(CLASS_HIDE).insertAfter($this);\n  };\n\n  prototype.build = function () {\n    var $this = this.$element,\n        $clone = this.$clone,\n        options = this.options,\n        $cropper,\n        $cropBox,\n        $face;\n\n    if (!this.ready) {\n      return;\n    }\n\n    if (this.built) {\n      this.unbuild();\n    }\n\n    // Create cropper elements\n    this.$cropper = $cropper = $(Cropper.TEMPLATE);\n\n    // Hide the original image\n    $this.addClass(CLASS_HIDDEN);\n\n    // Show the clone iamge\n    $clone.removeClass(CLASS_HIDE);\n\n    this.$container = $this.parent().append($cropper);\n    this.$canvas = $cropper.find('.cropper-canvas').append($clone);\n    this.$dragBox = $cropper.find('.cropper-drag-box');\n    this.$cropBox = $cropBox = $cropper.find('.cropper-crop-box');\n    this.$viewBox = $cropper.find('.cropper-view-box');\n    this.$face = $face = $cropBox.find('.cropper-face');\n\n    this.addListeners();\n    this.initPreview();\n\n    // Format aspect ratio\n    options.aspectRatio = num(options.aspectRatio) || NaN; // 0 -> NaN\n\n    if (options.autoCrop) {\n      this.cropped = true;\n\n      if (options.modal) {\n        this.$dragBox.addClass(CLASS_MODAL);\n      }\n    } else {\n      $cropBox.addClass(CLASS_HIDDEN);\n    }\n\n    if (!options.guides) {\n      $cropBox.find('.cropper-dashed').addClass(CLASS_HIDDEN);\n    }\n\n    if (!options.center) {\n      $cropBox.find('.cropper-center').addClass(CLASS_HIDDEN);\n    }\n\n    if (options.cropBoxMovable) {\n      $face.addClass(CLASS_MOVE).data('drag', 'all');\n    }\n\n    if (!options.highlight) {\n      $face.addClass(CLASS_INVISIBLE);\n    }\n\n    if (options.background) {\n      $cropper.addClass(CLASS_BG);\n    }\n\n    if (!options.cropBoxResizable) {\n      $cropBox.find('.cropper-line, .cropper-point').addClass(CLASS_HIDDEN);\n    }\n\n    this.setDragMode(options.dragCrop ? 'crop' : options.movable ? 'move' : 'none');\n\n    this.built = true;\n    this.render();\n    this.setData(options.data);\n    $this.one(EVENT_BUILT, options.built).trigger(EVENT_BUILT); // Only trigger once\n  };\n\n  prototype.unbuild = function () {\n    if (!this.built) {\n      return;\n    }\n\n    this.built = false;\n    this.initialImage = null;\n    this.initialCanvas = null; // This is necessary when replace\n    this.initialCropBox = null;\n    this.container = null;\n    this.canvas = null;\n    this.cropBox = null; // This is necessary when replace\n    this.removeListeners();\n\n    this.resetPreview();\n    this.$preview = null;\n\n    this.$viewBox = null;\n    this.$cropBox = null;\n    this.$dragBox = null;\n    this.$canvas = null;\n    this.$container = null;\n\n    this.$cropper.remove();\n    this.$cropper = null;\n  };\n\n  $.extend(prototype, {\n    render: function () {\n      this.initContainer();\n      this.initCanvas();\n      this.initCropBox();\n\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n\n    initContainer: function () {\n      var $this = this.$element,\n          $container = this.$container,\n          $cropper = this.$cropper,\n          options = this.options;\n\n      $cropper.addClass(CLASS_HIDDEN);\n      $this.removeClass(CLASS_HIDDEN);\n\n      $cropper.css((this.container = {\n        width: max($container.width(), num(options.minContainerWidth) || 200),\n        height: max($container.height(), num(options.minContainerHeight) || 100)\n      }));\n\n      $this.addClass(CLASS_HIDDEN);\n      $cropper.removeClass(CLASS_HIDDEN);\n    },\n\n    // image box (wrapper)\n    initCanvas: function () {\n      var container = this.container,\n          containerWidth = container.width,\n          containerHeight = container.height,\n          image = this.image,\n          aspectRatio = image.aspectRatio,\n          canvas = {\n            aspectRatio: aspectRatio,\n            width: containerWidth,\n            height: containerHeight\n          };\n\n      if (containerHeight * aspectRatio > containerWidth) {\n        canvas.height = containerWidth / aspectRatio;\n      } else {\n        canvas.width = containerHeight * aspectRatio;\n      }\n\n      canvas.oldLeft = canvas.left = (containerWidth - canvas.width) / 2;\n      canvas.oldTop = canvas.top = (containerHeight - canvas.height) / 2;\n\n      this.canvas = canvas;\n      this.limitCanvas(true, true);\n      this.initialImage = $.extend({}, image);\n      this.initialCanvas = $.extend({}, canvas);\n    },\n\n    limitCanvas: function (size, position) {\n      var options = this.options,\n          strict = options.strict,\n          container = this.container,\n          containerWidth = container.width,\n          containerHeight = container.height,\n          canvas = this.canvas,\n          aspectRatio = canvas.aspectRatio,\n          cropBox = this.cropBox,\n          cropped = this.cropped && cropBox,\n          initialCanvas = this.initialCanvas || canvas,\n          initialCanvasWidth = initialCanvas.width,\n          initialCanvasHeight = initialCanvas.height,\n          minCanvasWidth,\n          minCanvasHeight;\n\n      if (size) {\n        minCanvasWidth = num(options.minCanvasWidth) || 0;\n        minCanvasHeight = num(options.minCanvasHeight) || 0;\n\n        if (minCanvasWidth) {\n          if (strict) {\n            minCanvasWidth = max(cropped ? cropBox.width : initialCanvasWidth, minCanvasWidth);\n          }\n\n          minCanvasHeight = minCanvasWidth / aspectRatio;\n        } else if (minCanvasHeight) {\n          if (strict) {\n            minCanvasHeight = max(cropped ? cropBox.height : initialCanvasHeight, minCanvasHeight);\n          }\n\n          minCanvasWidth = minCanvasHeight * aspectRatio;\n        } else if (strict) {\n          if (cropped) {\n            minCanvasWidth = cropBox.width;\n            minCanvasHeight = cropBox.height;\n\n            if (minCanvasHeight * aspectRatio > minCanvasWidth) {\n              minCanvasWidth = minCanvasHeight * aspectRatio;\n            } else {\n              minCanvasHeight = minCanvasWidth / aspectRatio;\n            }\n          } else {\n            minCanvasWidth = initialCanvasWidth;\n            minCanvasHeight = initialCanvasHeight;\n          }\n        }\n\n        $.extend(canvas, {\n          minWidth: minCanvasWidth,\n          minHeight: minCanvasHeight,\n          maxWidth: Infinity,\n          maxHeight: Infinity\n        });\n      }\n\n      if (position) {\n        if (strict) {\n          if (cropped) {\n            canvas.minLeft = min(cropBox.left, (cropBox.left + cropBox.width) - canvas.width);\n            canvas.minTop = min(cropBox.top, (cropBox.top + cropBox.height) - canvas.height);\n            canvas.maxLeft = cropBox.left;\n            canvas.maxTop = cropBox.top;\n          } else {\n            canvas.minLeft = min(0, containerWidth - canvas.width);\n            canvas.minTop = min(0, containerHeight - canvas.height);\n            canvas.maxLeft = max(0, containerWidth - canvas.width);\n            canvas.maxTop = max(0, containerHeight - canvas.height);\n          }\n        } else {\n          canvas.minLeft = -canvas.width;\n          canvas.minTop = -canvas.height;\n          canvas.maxLeft = containerWidth;\n          canvas.maxTop = containerHeight;\n        }\n      }\n    },\n\n    renderCanvas: function (changed) {\n      var options = this.options,\n          canvas = this.canvas,\n          image = this.image,\n          aspectRatio,\n          rotated;\n\n      if (this.rotated) {\n        this.rotated = false;\n\n        // Computes rotatation sizes with image sizes\n        rotated = getRotatedSizes({\n          width: image.width,\n          height: image.height,\n          degree: image.rotate\n        });\n\n        aspectRatio = rotated.width / rotated.height;\n\n        if (aspectRatio !== canvas.aspectRatio) {\n          canvas.left -= (rotated.width - canvas.width) / 2;\n          canvas.top -= (rotated.height - canvas.height) / 2;\n          canvas.width = rotated.width;\n          canvas.height = rotated.height;\n          canvas.aspectRatio = aspectRatio;\n          this.limitCanvas(true, false);\n        }\n      }\n\n      if (canvas.width > canvas.maxWidth || canvas.width < canvas.minWidth) {\n        canvas.left = canvas.oldLeft;\n      }\n\n      if (canvas.height > canvas.maxHeight || canvas.height < canvas.minHeight) {\n        canvas.top = canvas.oldTop;\n      }\n\n      canvas.width = min(max(canvas.width, canvas.minWidth), canvas.maxWidth);\n      canvas.height = min(max(canvas.height, canvas.minHeight), canvas.maxHeight);\n\n      this.limitCanvas(false, true);\n\n      canvas.oldLeft = canvas.left = min(max(canvas.left, canvas.minLeft), canvas.maxLeft);\n      canvas.oldTop = canvas.top = min(max(canvas.top, canvas.minTop), canvas.maxTop);\n\n      this.$canvas.css({\n        width: canvas.width,\n        height: canvas.height,\n        left: canvas.left,\n        top: canvas.top\n      });\n\n      this.renderImage();\n\n      if (this.cropped && options.strict) {\n        this.limitCropBox(true, true);\n      }\n\n      if (changed) {\n        this.output();\n      }\n    },\n\n    renderImage: function () {\n      var canvas = this.canvas,\n          image = this.image,\n          reversed;\n\n      if (image.rotate) {\n        reversed = getRotatedSizes({\n          width: canvas.width,\n          height: canvas.height,\n          degree: image.rotate,\n          aspectRatio: image.aspectRatio\n        }, true);\n      }\n\n      $.extend(image, reversed ? {\n        width: reversed.width,\n        height: reversed.height,\n        left: (canvas.width - reversed.width) / 2,\n        top: (canvas.height - reversed.height) / 2\n      } : {\n        width: canvas.width,\n        height: canvas.height,\n        left: 0,\n        top: 0\n      });\n\n      this.$clone.css({\n        width: image.width,\n        height: image.height,\n        marginLeft: image.left,\n        marginTop: image.top,\n        transform: getRotateValue(image.rotate)\n      });\n    },\n\n    initCropBox: function () {\n      var options = this.options,\n          canvas = this.canvas,\n          aspectRatio = options.aspectRatio,\n          autoCropArea = num(options.autoCropArea) || 0.8,\n          cropBox = {\n            width: canvas.width,\n            height: canvas.height\n          };\n\n      if (aspectRatio) {\n        if (canvas.height * aspectRatio > canvas.width) {\n          cropBox.height = cropBox.width / aspectRatio;\n        } else {\n          cropBox.width = cropBox.height * aspectRatio;\n        }\n      }\n\n      this.cropBox = cropBox;\n      this.limitCropBox(true, true);\n\n      // Initialize auto crop area\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      // The width of auto crop area must large than \"minWidth\", and the height too. (#164)\n      cropBox.width = max(cropBox.minWidth, cropBox.width * autoCropArea);\n      cropBox.height = max(cropBox.minHeight, cropBox.height * autoCropArea);\n      cropBox.oldLeft = cropBox.left = canvas.left + (canvas.width - cropBox.width) / 2;\n      cropBox.oldTop = cropBox.top = canvas.top + (canvas.height - cropBox.height) / 2;\n\n      this.initialCropBox = $.extend({}, cropBox);\n    },\n\n    limitCropBox: function (size, position) {\n      var options = this.options,\n          strict = options.strict,\n          container = this.container,\n          containerWidth = container.width,\n          containerHeight = container.height,\n          canvas = this.canvas,\n          cropBox = this.cropBox,\n          aspectRatio = options.aspectRatio,\n          minCropBoxWidth,\n          minCropBoxHeight;\n\n      if (size) {\n        minCropBoxWidth = num(options.minCropBoxWidth) || 0;\n        minCropBoxHeight = num(options.minCropBoxHeight) || 0;\n\n        // min/maxCropBoxWidth/Height must less than conatiner width/height\n        cropBox.minWidth = min(containerWidth, minCropBoxWidth);\n        cropBox.minHeight = min(containerHeight, minCropBoxHeight);\n        cropBox.maxWidth = min(containerWidth, strict ? canvas.width : containerWidth);\n        cropBox.maxHeight = min(containerHeight, strict ? canvas.height : containerHeight);\n\n        if (aspectRatio) {\n          // compare crop box size with container first\n          if (cropBox.maxHeight * aspectRatio > cropBox.maxWidth) {\n            cropBox.minHeight = cropBox.minWidth / aspectRatio;\n            cropBox.maxHeight = cropBox.maxWidth / aspectRatio;\n          } else {\n            cropBox.minWidth = cropBox.minHeight * aspectRatio;\n            cropBox.maxWidth = cropBox.maxHeight * aspectRatio;\n          }\n        }\n\n        // The \"minWidth\" must be less than \"maxWidth\", and the \"minHeight\" too.\n        cropBox.minWidth = min(cropBox.maxWidth, cropBox.minWidth);\n        cropBox.minHeight = min(cropBox.maxHeight, cropBox.minHeight);\n      }\n\n      if (position) {\n        if (strict) {\n          cropBox.minLeft = max(0, canvas.left);\n          cropBox.minTop = max(0, canvas.top);\n          cropBox.maxLeft = min(containerWidth, canvas.left + canvas.width) - cropBox.width;\n          cropBox.maxTop = min(containerHeight, canvas.top + canvas.height) - cropBox.height;\n        } else {\n          cropBox.minLeft = 0;\n          cropBox.minTop = 0;\n          cropBox.maxLeft = containerWidth - cropBox.width;\n          cropBox.maxTop = containerHeight - cropBox.height;\n        }\n      }\n    },\n\n    renderCropBox: function () {\n      var options = this.options,\n          container = this.container,\n          containerWidth = container.width,\n          containerHeight = container.height,\n          cropBox = this.cropBox;\n\n      if (cropBox.width > cropBox.maxWidth || cropBox.width < cropBox.minWidth) {\n        cropBox.left = cropBox.oldLeft;\n      }\n\n      if (cropBox.height > cropBox.maxHeight || cropBox.height < cropBox.minHeight) {\n        cropBox.top = cropBox.oldTop;\n      }\n\n      cropBox.width = min(max(cropBox.width, cropBox.minWidth), cropBox.maxWidth);\n      cropBox.height = min(max(cropBox.height, cropBox.minHeight), cropBox.maxHeight);\n\n      this.limitCropBox(false, true);\n\n      cropBox.oldLeft = cropBox.left = min(max(cropBox.left, cropBox.minLeft), cropBox.maxLeft);\n      cropBox.oldTop = cropBox.top = min(max(cropBox.top, cropBox.minTop), cropBox.maxTop);\n\n      if (options.movable && options.cropBoxMovable) {\n        // Turn to move the canvas when the crop box is equal to the container\n        this.$face.data('drag', (cropBox.width === containerWidth && cropBox.height === containerHeight) ? 'move' : 'all');\n      }\n\n      this.$cropBox.css({\n        width: cropBox.width,\n        height: cropBox.height,\n        left: cropBox.left,\n        top: cropBox.top\n      });\n\n      if (this.cropped && options.strict) {\n        this.limitCanvas(true, true);\n      }\n\n      if (!this.disabled) {\n        this.output();\n      }\n    },\n\n    output: function () {\n      var options = this.options,\n          $this = this.$element;\n\n      this.preview();\n\n      if (options.crop) {\n        options.crop.call($this, this.getData());\n      }\n\n      $this.trigger(EVENT_CHANGE);\n    }\n  });\n\n  prototype.initPreview = function () {\n    var url = this.url;\n\n    this.$preview = $(this.options.preview);\n    this.$viewBox.html('<img src=\"' + url + '\">');\n\n    // Override img element styles\n    // Add `display:block` to avoid margin top issue (Occur only when margin-top <= -height)\n    this.$preview.each(function () {\n      var $this = $(this);\n\n      $this.data(CROPPER_PREVIEW, {\n        width: $this.width(),\n        height: $this.height(),\n        original: $this.html()\n      }).html('<img src=\"' + url + '\" style=\"display:block;width:100%;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation: 0deg!important\">');\n    });\n  };\n\n  prototype.resetPreview = function () {\n    this.$preview.each(function () {\n      var $this = $(this);\n\n      $this.html($this.data(CROPPER_PREVIEW).original).removeData(CROPPER_PREVIEW);\n    });\n  };\n\n  prototype.preview = function () {\n    var image = this.image,\n        canvas = this.canvas,\n        cropBox = this.cropBox,\n        width = image.width,\n        height = image.height,\n        left = cropBox.left - canvas.left - image.left,\n        top = cropBox.top - canvas.top - image.top,\n        rotate = image.rotate;\n\n    if (!this.cropped || this.disabled) {\n      return;\n    }\n\n    this.$viewBox.find('img').css({\n      width: width,\n      height: height,\n      marginLeft: -left,\n      marginTop: -top,\n      transform: getRotateValue(rotate)\n    });\n\n    this.$preview.each(function () {\n      var $this = $(this),\n          data = $this.data(CROPPER_PREVIEW),\n          ratio = data.width / cropBox.width,\n          newWidth = data.width,\n          newHeight = cropBox.height * ratio;\n\n      if (newHeight > data.height) {\n        ratio = data.height / cropBox.height;\n        newWidth = cropBox.width * ratio;\n        newHeight = data.height;\n      }\n\n      $this.width(newWidth).height(newHeight).find('img').css({\n        width: width * ratio,\n        height: height * ratio,\n        marginLeft: -left * ratio,\n        marginTop: -top * ratio,\n        transform: getRotateValue(rotate)\n      });\n    });\n  };\n\n  prototype.addListeners = function () {\n    var options = this.options,\n        $this = this.$element,\n        $cropper = this.$cropper;\n\n    if ($.isFunction(options.dragstart)) {\n      $this.on(EVENT_DRAG_START, options.dragstart);\n    }\n\n    if ($.isFunction(options.dragmove)) {\n      $this.on(EVENT_DRAG_MOVE, options.dragmove);\n    }\n\n    if ($.isFunction(options.dragend)) {\n      $this.on(EVENT_DRAG_END, options.dragend);\n    }\n\n    if ($.isFunction(options.zoomin)) {\n      $this.on(EVENT_ZOOM_IN, options.zoomin);\n    }\n\n    if ($.isFunction(options.zoomout)) {\n      $this.on(EVENT_ZOOM_OUT, options.zoomout);\n    }\n\n    if ($.isFunction(options.change)) {\n      $this.on(EVENT_CHANGE, options.change);\n    }\n\n    $cropper.on(EVENT_MOUSE_DOWN, $.proxy(this.dragstart, this));\n\n    if (options.zoomable && options.mouseWheelZoom) {\n      $cropper.on(EVENT_WHEEL, $.proxy(this.wheel, this));\n    }\n\n    if (options.doubleClickToggle) {\n      $cropper.on(EVENT_DBLCLICK, $.proxy(this.dblclick, this));\n    }\n\n    $document.on(EVENT_MOUSE_MOVE, (this._dragmove = proxy(this.dragmove, this))).on(EVENT_MOUSE_UP, (this._dragend = proxy(this.dragend, this)));\n\n    if (options.responsive) {\n      $window.on(EVENT_RESIZE, (this._resize = proxy(this.resize, this)));\n    }\n  };\n\n  prototype.removeListeners = function () {\n    var options = this.options,\n        $this = this.$element,\n        $cropper = this.$cropper;\n\n    if ($.isFunction(options.dragstart)) {\n      $this.off(EVENT_DRAG_START, options.dragstart);\n    }\n\n    if ($.isFunction(options.dragmove)) {\n      $this.off(EVENT_DRAG_MOVE, options.dragmove);\n    }\n\n    if ($.isFunction(options.dragend)) {\n      $this.off(EVENT_DRAG_END, options.dragend);\n    }\n\n    if ($.isFunction(options.zoomin)) {\n      $this.off(EVENT_ZOOM_IN, options.zoomin);\n    }\n\n    if ($.isFunction(options.zoomout)) {\n      $this.off(EVENT_ZOOM_OUT, options.zoomout);\n    }\n\n    if ($.isFunction(options.change)) {\n      $this.off(EVENT_CHANGE, options.change);\n    }\n\n    $cropper.off(EVENT_MOUSE_DOWN, this.dragstart);\n\n    if (options.zoomable && options.mouseWheelZoom) {\n      $cropper.off(EVENT_WHEEL, this.wheel);\n    }\n\n    if (options.doubleClickToggle) {\n      $cropper.off(EVENT_DBLCLICK, this.dblclick);\n    }\n\n    $document.off(EVENT_MOUSE_MOVE, this._dragmove).off(EVENT_MOUSE_UP, this._dragend);\n\n    if (options.responsive) {\n      $window.off(EVENT_RESIZE, this._resize);\n    }\n  };\n\n  $.extend(prototype, {\n    resize: function () {\n      var $container = this.$container,\n          container = this.container,\n          canvasData,\n          cropBoxData,\n          ratio;\n\n      if (this.disabled || !container) { // Check \"container\" for IE8\n        return;\n      }\n\n      ratio = $container.width() / container.width;\n\n      if (ratio !== 1 || $container.height() !== container.height) {\n        canvasData = this.getCanvasData();\n        cropBoxData = this.getCropBoxData();\n\n        this.render();\n        this.setCanvasData($.each(canvasData, function (i, n) {\n          canvasData[i] = n * ratio;\n        }));\n        this.setCropBoxData($.each(cropBoxData, function (i, n) {\n          cropBoxData[i] = n * ratio;\n        }));\n      }\n    },\n\n    dblclick: function () {\n      if (this.disabled) {\n        return;\n      }\n\n      if (this.$dragBox.hasClass(CLASS_CROP)) {\n        this.setDragMode('move');\n      } else {\n        this.setDragMode('crop');\n      }\n    },\n\n    wheel: function (event) {\n      var e = event.originalEvent,\n          delta = 1;\n\n      if (this.disabled) {\n        return;\n      }\n\n      event.preventDefault();\n\n      if (e.deltaY) {\n        delta = e.deltaY > 0 ? 1 : -1;\n      } else if (e.wheelDelta) {\n        delta = -e.wheelDelta / 120;\n      } else if (e.detail) {\n        delta = e.detail > 0 ? 1 : -1;\n      }\n\n      this.zoom(-delta * 0.1);\n    },\n\n    dragstart: function (event) {\n      var options = this.options,\n          originalEvent = event.originalEvent,\n          touches = originalEvent && originalEvent.touches,\n          e = event,\n          dragType,\n          dragStartEvent,\n          touchesLength;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.touchDragZoom && touchesLength === 2) {\n            e = touches[1];\n            this.startX2 = e.pageX;\n            this.startY2 = e.pageY;\n            dragType = 'zoom';\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      dragType = dragType || $(e.target).data('drag');\n\n      if (REGEXP_DRAG_TYPES.test(dragType)) {\n        event.preventDefault();\n\n        dragStartEvent = $.Event(EVENT_DRAG_START, {\n          originalEvent: originalEvent,\n          dragType: dragType\n        });\n\n        this.$element.trigger(dragStartEvent);\n\n        if (dragStartEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        this.dragType = dragType;\n        this.cropping = false;\n        this.startX = e.pageX;\n        this.startY = e.pageY;\n\n        if (dragType === 'crop') {\n          this.cropping = true;\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n      }\n    },\n\n    dragmove: function (event) {\n      var options = this.options,\n          originalEvent = event.originalEvent,\n          touches = originalEvent && originalEvent.touches,\n          e = event,\n          dragType = this.dragType,\n          dragMoveEvent,\n          touchesLength;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (touches) {\n        touchesLength = touches.length;\n\n        if (touchesLength > 1) {\n          if (options.zoomable && options.touchDragZoom && touchesLength === 2) {\n            e = touches[1];\n            this.endX2 = e.pageX;\n            this.endY2 = e.pageY;\n          } else {\n            return;\n          }\n        }\n\n        e = touches[0];\n      }\n\n      if (dragType) {\n        event.preventDefault();\n\n        dragMoveEvent = $.Event(EVENT_DRAG_MOVE, {\n          originalEvent: originalEvent,\n          dragType: dragType\n        });\n\n        this.$element.trigger(dragMoveEvent);\n\n        if (dragMoveEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        this.endX = e.pageX;\n        this.endY = e.pageY;\n\n        this.change(e.shiftKey);\n      }\n    },\n\n    dragend: function (event) {\n      var dragType = this.dragType,\n          dragEndEvent;\n\n      if (this.disabled) {\n        return;\n      }\n\n      if (dragType) {\n        event.preventDefault();\n\n        dragEndEvent = $.Event(EVENT_DRAG_END, {\n          originalEvent: event.originalEvent,\n          dragType: dragType\n        });\n\n        this.$element.trigger(dragEndEvent);\n\n        if (dragEndEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        if (this.cropping) {\n          this.cropping = false;\n          this.$dragBox.toggleClass(CLASS_MODAL, this.cropped && this.options.modal);\n        }\n\n        this.dragType = '';\n      }\n    }\n  });\n\n  $.extend(prototype, {\n    crop: function () {\n      if (!this.built || this.disabled) {\n        return;\n      }\n\n      if (!this.cropped) {\n        this.cropped = true;\n        this.limitCropBox(true, true);\n\n        if (this.options.modal) {\n          this.$dragBox.addClass(CLASS_MODAL);\n        }\n\n        this.$cropBox.removeClass(CLASS_HIDDEN);\n      }\n\n      this.setCropBoxData(this.initialCropBox);\n    },\n\n    reset: function () {\n      if (!this.built || this.disabled) {\n        return;\n      }\n\n      this.image = $.extend({}, this.initialImage);\n      this.canvas = $.extend({}, this.initialCanvas);\n      this.cropBox = $.extend({}, this.initialCropBox); // required for strict mode\n\n      this.renderCanvas();\n\n      if (this.cropped) {\n        this.renderCropBox();\n      }\n    },\n\n    clear: function () {\n      if (!this.cropped || this.disabled) {\n        return;\n      }\n\n      $.extend(this.cropBox, {\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      });\n\n      this.cropped = false;\n      this.renderCropBox();\n\n      this.limitCanvas();\n      this.renderCanvas(); // Render canvas after render crop box\n\n      this.$dragBox.removeClass(CLASS_MODAL);\n      this.$cropBox.addClass(CLASS_HIDDEN);\n    },\n\n    destroy: function () {\n      var $this = this.$element;\n\n      if (this.ready) {\n        if (this.isImg) {\n          $this.attr('src', this.originalUrl);\n        }\n\n        this.unbuild();\n        $this.removeClass(CLASS_HIDDEN);\n      } else if (this.$clone) {\n        this.$clone.remove();\n      }\n\n      $this.removeData('cropper');\n    },\n\n    replace: function (url) {\n      if (!this.disabled && url) {\n        if (this.isImg) {\n          this.$element.attr('src', url);\n        }\n\n        this.options.data = null; // Remove previous data\n        this.load(url);\n      }\n    },\n\n    enable: function () {\n      if (this.built) {\n        this.disabled = false;\n        this.$cropper.removeClass(CLASS_DISABLED);\n      }\n    },\n\n    disable: function () {\n      if (this.built) {\n        this.disabled = true;\n        this.$cropper.addClass(CLASS_DISABLED);\n      }\n    },\n\n    move: function (offsetX, offsetY) {\n      var canvas = this.canvas;\n\n      if (this.built && !this.disabled && this.options.movable && isNumber(offsetX) && isNumber(offsetY)) {\n        canvas.left += offsetX;\n        canvas.top += offsetY;\n        this.renderCanvas(true);\n      }\n    },\n\n    zoom: function (delta) {\n      var canvas = this.canvas,\n          zoomEvent,\n          width,\n          height;\n\n      delta = num(delta);\n\n      if (delta && this.built && !this.disabled && this.options.zoomable) {\n        zoomEvent = delta > 0 ? $.Event(EVENT_ZOOM_IN) : $.Event(EVENT_ZOOM_OUT);\n        this.$element.trigger(zoomEvent);\n\n        if (zoomEvent.isDefaultPrevented()) {\n          return;\n        }\n\n        delta = delta <= -1 ? 1 / (1 - delta) : delta <= 1 ? (1 + delta) : delta;\n        width = canvas.width * delta;\n        height = canvas.height * delta;\n        canvas.left -= (width - canvas.width) / 2;\n        canvas.top -= (height - canvas.height) / 2;\n        canvas.width = width;\n        canvas.height = height;\n        this.renderCanvas(true);\n        this.setDragMode('move');\n      }\n    },\n\n    rotate: function (degree) {\n      var image = this.image;\n\n      degree = num(degree);\n\n      if (degree && this.built && !this.disabled && this.options.rotatable) {\n        image.rotate = (image.rotate + degree) % 360;\n        this.rotated = true;\n        this.renderCanvas(true);\n      }\n    },\n\n    getData: function (rounded) {\n      var cropBox = this.cropBox,\n          canvas = this.canvas,\n          image = this.image,\n          ratio,\n          data;\n\n      if (this.built && this.cropped) {\n        data = {\n          x: cropBox.left - canvas.left,\n          y: cropBox.top - canvas.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n\n        ratio = image.width / image.naturalWidth;\n\n        $.each(data, function (i, n) {\n          n = n / ratio;\n          data[i] = rounded ? Math.round(n) : n;\n        });\n\n      } else {\n        data = {\n          x: 0,\n          y: 0,\n          width: 0,\n          height: 0\n        };\n      }\n\n      data.rotate = this.ready ? image.rotate : 0;\n\n      return data;\n    },\n\n    setData: function (data) {\n      var image = this.image,\n          canvas = this.canvas,\n          cropBoxData = {},\n          ratio;\n\n      if (this.built && !this.disabled && $.isPlainObject(data)) {\n        if (isNumber(data.rotate) && data.rotate !== image.rotate && this.options.rotatable) {\n          image.rotate = data.rotate;\n          this.rotated = true;\n          this.renderCanvas(true);\n        }\n\n        ratio = image.width / image.naturalWidth;\n\n        if (isNumber(data.x)) {\n          cropBoxData.left = data.x * ratio + canvas.left;\n        }\n\n        if (isNumber(data.y)) {\n          cropBoxData.top = data.y * ratio + canvas.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBoxData.width = data.width * ratio;\n        }\n\n        if (isNumber(data.height)) {\n          cropBoxData.height = data.height * ratio;\n        }\n\n        this.setCropBoxData(cropBoxData);\n      }\n    },\n\n    getContainerData: function () {\n      return this.built ? this.container : {};\n    },\n\n    getImageData: function () {\n      return this.ready ? this.image : {};\n    },\n\n    getCanvasData: function () {\n      var canvas = this.canvas,\n          data;\n\n      if (this.built) {\n        data = {\n          left: canvas.left,\n          top: canvas.top,\n          width: canvas.width,\n          height: canvas.height\n        };\n      }\n\n      return data || {};\n    },\n\n    setCanvasData: function (data) {\n      var canvas = this.canvas,\n          aspectRatio = canvas.aspectRatio;\n\n      if (this.built && !this.disabled && $.isPlainObject(data)) {\n        if (isNumber(data.left)) {\n          canvas.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          canvas.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          canvas.width = data.width;\n          canvas.height = data.width / aspectRatio;\n        } else if (isNumber(data.height)) {\n          canvas.height = data.height;\n          canvas.width = data.height * aspectRatio;\n        }\n\n        this.renderCanvas(true);\n      }\n    },\n\n    getCropBoxData: function () {\n      var cropBox = this.cropBox,\n          data;\n\n      if (this.built && this.cropped) {\n        data = {\n          left: cropBox.left,\n          top: cropBox.top,\n          width: cropBox.width,\n          height: cropBox.height\n        };\n      }\n\n      return data || {};\n    },\n\n    setCropBoxData: function (data) {\n      var cropBox = this.cropBox,\n          aspectRatio = this.options.aspectRatio;\n\n      if (this.built && this.cropped && !this.disabled && $.isPlainObject(data)) {\n\n        if (isNumber(data.left)) {\n          cropBox.left = data.left;\n        }\n\n        if (isNumber(data.top)) {\n          cropBox.top = data.top;\n        }\n\n        if (isNumber(data.width)) {\n          cropBox.width = data.width;\n        }\n\n        if (isNumber(data.height)) {\n          cropBox.height = data.height;\n        }\n\n        if (aspectRatio) {\n          if (isNumber(data.width)) {\n            cropBox.height = cropBox.width / aspectRatio;\n          } else if (isNumber(data.height)) {\n            cropBox.width = cropBox.height * aspectRatio;\n          }\n        }\n\n        this.renderCropBox();\n      }\n    },\n\n    getCroppedCanvas: function (options) {\n      var originalWidth,\n          originalHeight,\n          canvasWidth,\n          canvasHeight,\n          scaledWidth,\n          scaledHeight,\n          scaledRatio,\n          aspectRatio,\n          canvas,\n          context,\n          data;\n\n      if (!this.built || !this.cropped || !SUPPORT_CANVAS) {\n        return;\n      }\n\n      if (!$.isPlainObject(options)) {\n        options = {};\n      }\n\n      data = this.getData();\n      originalWidth = data.width;\n      originalHeight = data.height;\n      aspectRatio = originalWidth / originalHeight;\n\n      if ($.isPlainObject(options)) {\n        scaledWidth = options.width;\n        scaledHeight = options.height;\n\n        if (scaledWidth) {\n          scaledHeight = scaledWidth / aspectRatio;\n          scaledRatio = scaledWidth / originalWidth;\n        } else if (scaledHeight) {\n          scaledWidth = scaledHeight * aspectRatio;\n          scaledRatio = scaledHeight / originalHeight;\n        }\n      }\n\n      canvasWidth = scaledWidth || originalWidth;\n      canvasHeight = scaledHeight || originalHeight;\n\n      canvas = $('<canvas>')[0];\n      canvas.width = canvasWidth;\n      canvas.height = canvasHeight;\n      context = canvas.getContext('2d');\n\n      if (options.fillColor) {\n        context.fillStyle = options.fillColor;\n        context.fillRect(0, 0, canvasWidth, canvasHeight);\n      }\n\n      // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\n      context.drawImage.apply(context, (function () {\n        var source = getSourceCanvas(this.$clone[0], this.image),\n            sourceWidth = source.width,\n            sourceHeight = source.height,\n            args = [source],\n            srcX = data.x, // source canvas\n            srcY = data.y,\n            srcWidth,\n            srcHeight,\n            dstX, // destination canvas\n            dstY,\n            dstWidth,\n            dstHeight;\n\n        if (srcX <= -originalWidth || srcX > sourceWidth) {\n          srcX = srcWidth = dstX = dstWidth = 0;\n        } else if (srcX <= 0) {\n          dstX = -srcX;\n          srcX = 0;\n          srcWidth = dstWidth = min(sourceWidth, originalWidth + srcX);\n        } else if (srcX <= sourceWidth) {\n          dstX = 0;\n          srcWidth = dstWidth = min(originalWidth, sourceWidth - srcX);\n        }\n\n        if (srcWidth <= 0 || srcY <= -originalHeight || srcY > sourceHeight) {\n          srcY = srcHeight = dstY = dstHeight = 0;\n        } else if (srcY <= 0) {\n          dstY = -srcY;\n          srcY = 0;\n          srcHeight = dstHeight = min(sourceHeight, originalHeight + srcY);\n        } else if (srcY <= sourceHeight) {\n          dstY = 0;\n          srcHeight = dstHeight = min(originalHeight, sourceHeight - srcY);\n        }\n\n        args.push(srcX, srcY, srcWidth, srcHeight);\n\n        // Scale destination sizes\n        if (scaledRatio) {\n          dstX *= scaledRatio;\n          dstY *= scaledRatio;\n          dstWidth *= scaledRatio;\n          dstHeight *= scaledRatio;\n        }\n\n        // Avoid \"IndexSizeError\" in IE and Firefox\n        if (dstWidth > 0 && dstHeight > 0) {\n          args.push(dstX, dstY, dstWidth, dstHeight);\n        }\n\n        return args;\n      }).call(this));\n\n      return canvas;\n    },\n\n    setAspectRatio: function (aspectRatio) {\n      var options = this.options;\n\n      if (!this.disabled && !isUndefined(aspectRatio)) {\n        options.aspectRatio = num(aspectRatio) || NaN; // 0 -> NaN\n\n        if (this.built) {\n          this.initCropBox();\n\n          if (this.cropped) {\n            this.renderCropBox();\n          }\n        }\n      }\n    },\n\n    setDragMode: function (mode) {\n      var options = this.options,\n          croppable,\n          movable;\n\n      if (this.ready && !this.disabled) {\n        croppable = options.dragCrop && mode === 'crop';\n        movable = options.movable && mode === 'move';\n        mode = (croppable || movable) ? mode : 'none';\n\n        this.$dragBox.data('drag', mode).toggleClass(CLASS_CROP, croppable).toggleClass(CLASS_MOVE, movable);\n\n        if (!options.cropBoxMovable) {\n          // Sync drag mode to crop box when it is not movable(#300)\n          this.$face.data('drag', mode).toggleClass(CLASS_CROP, croppable).toggleClass(CLASS_MOVE, movable);\n        }\n      }\n    }\n  });\n\n  prototype.change = function (shiftKey) {\n    var dragType = this.dragType,\n        options = this.options,\n        canvas = this.canvas,\n        container = this.container,\n        cropBox = this.cropBox,\n        width = cropBox.width,\n        height = cropBox.height,\n        left = cropBox.left,\n        top = cropBox.top,\n        right = left + width,\n        bottom = top + height,\n        minLeft = 0,\n        minTop = 0,\n        maxWidth = container.width,\n        maxHeight = container.height,\n        renderable = true,\n        aspectRatio = options.aspectRatio,\n        range = {\n          x: this.endX - this.startX,\n          y: this.endY - this.startY\n        },\n        offset;\n\n    // Locking aspect ratio in \"free mode\" by holding shift key (#259)\n    if (!aspectRatio && shiftKey) {\n      aspectRatio = width && height ? width / height : 1;\n    }\n\n    if (options.strict) {\n      minLeft = cropBox.minLeft;\n      minTop = cropBox.minTop;\n      maxWidth = minLeft + min(container.width, canvas.width);\n      maxHeight = minTop + min(container.height, canvas.height);\n    }\n\n    if (aspectRatio) {\n      range.X = range.y * aspectRatio;\n      range.Y = range.x / aspectRatio;\n    }\n\n    switch (dragType) {\n      // Move cropBox\n      case 'all':\n        left += range.x;\n        top += range.y;\n        break;\n\n      // Resize cropBox\n      case 'e':\n        if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n          renderable = false;\n          break;\n        }\n\n        width += range.x;\n\n        if (aspectRatio) {\n          height = width / aspectRatio;\n          top -= range.Y / 2;\n        }\n\n        if (width < 0) {\n          dragType = 'w';\n          width = 0;\n        }\n\n        break;\n\n      case 'n':\n        if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n          renderable = false;\n          break;\n        }\n\n        height -= range.y;\n        top += range.y;\n\n        if (aspectRatio) {\n          width = height * aspectRatio;\n          left += range.X / 2;\n        }\n\n        if (height < 0) {\n          dragType = 's';\n          height = 0;\n        }\n\n        break;\n\n      case 'w':\n        if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {\n          renderable = false;\n          break;\n        }\n\n        width -= range.x;\n        left += range.x;\n\n        if (aspectRatio) {\n          height = width / aspectRatio;\n          top += range.Y / 2;\n        }\n\n        if (width < 0) {\n          dragType = 'e';\n          width = 0;\n        }\n\n        break;\n\n      case 's':\n        if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {\n          renderable = false;\n          break;\n        }\n\n        height += range.y;\n\n        if (aspectRatio) {\n          width = height * aspectRatio;\n          left -= range.X / 2;\n        }\n\n        if (height < 0) {\n          dragType = 'n';\n          height = 0;\n        }\n\n        break;\n\n      case 'ne':\n        if (aspectRatio) {\n          if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n          width = height * aspectRatio;\n        } else {\n          if (range.x >= 0) {\n            if (right < maxWidth) {\n              width += range.x;\n            } else if (range.y <= 0 && top <= minTop) {\n              renderable = false;\n            }\n          } else {\n            width += range.x;\n          }\n\n          if (range.y <= 0) {\n            if (top > minTop) {\n              height -= range.y;\n              top += range.y;\n            }\n          } else {\n            height -= range.y;\n            top += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          dragType = 'sw';\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          dragType = 'nw';\n          width = 0;\n        } else if (height < 0) {\n          dragType = 'se';\n          height = 0;\n        }\n\n        break;\n\n      case 'nw':\n        if (aspectRatio) {\n          if (range.y <= 0 && (top <= minTop || left <= minLeft)) {\n            renderable = false;\n            break;\n          }\n\n          height -= range.y;\n          top += range.y;\n          width = height * aspectRatio;\n          left += range.X;\n        } else {\n          if (range.x <= 0) {\n            if (left > minLeft) {\n              width -= range.x;\n              left += range.x;\n            } else if (range.y <= 0 && top <= minTop) {\n              renderable = false;\n            }\n          } else {\n            width -= range.x;\n            left += range.x;\n          }\n\n          if (range.y <= 0) {\n            if (top > minTop) {\n              height -= range.y;\n              top += range.y;\n            }\n          } else {\n            height -= range.y;\n            top += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          dragType = 'se';\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          dragType = 'ne';\n          width = 0;\n        } else if (height < 0) {\n          dragType = 'sw';\n          height = 0;\n        }\n\n        break;\n\n      case 'sw':\n        if (aspectRatio) {\n          if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {\n            renderable = false;\n            break;\n          }\n\n          width -= range.x;\n          left += range.x;\n          height = width / aspectRatio;\n        } else {\n          if (range.x <= 0) {\n            if (left > minLeft) {\n              width -= range.x;\n              left += range.x;\n            } else if (range.y >= 0 && bottom >= maxHeight) {\n              renderable = false;\n            }\n          } else {\n            width -= range.x;\n            left += range.x;\n          }\n\n          if (range.y >= 0) {\n            if (bottom < maxHeight) {\n              height += range.y;\n            }\n          } else {\n            height += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          dragType = 'ne';\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          dragType = 'se';\n          width = 0;\n        } else if (height < 0) {\n          dragType = 'nw';\n          height = 0;\n        }\n\n        break;\n\n      case 'se':\n        if (aspectRatio) {\n          if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {\n            renderable = false;\n            break;\n          }\n\n          width += range.x;\n          height = width / aspectRatio;\n        } else {\n          if (range.x >= 0) {\n            if (right < maxWidth) {\n              width += range.x;\n            } else if (range.y >= 0 && bottom >= maxHeight) {\n              renderable = false;\n            }\n          } else {\n            width += range.x;\n          }\n\n          if (range.y >= 0) {\n            if (bottom < maxHeight) {\n              height += range.y;\n            }\n          } else {\n            height += range.y;\n          }\n        }\n\n        if (width < 0 && height < 0) {\n          dragType = 'nw';\n          height = 0;\n          width = 0;\n        } else if (width < 0) {\n          dragType = 'sw';\n          width = 0;\n        } else if (height < 0) {\n          dragType = 'ne';\n          height = 0;\n        }\n\n        break;\n\n      // Move image\n      case 'move':\n        canvas.left += range.x;\n        canvas.top += range.y;\n        this.renderCanvas(true);\n        renderable = false;\n        break;\n\n      // Scale image\n      case 'zoom':\n        this.zoom(function (x1, y1, x2, y2) {\n          var z1 = sqrt(x1 * x1 + y1 * y1),\n              z2 = sqrt(x2 * x2 + y2 * y2);\n\n          return (z2 - z1) / z1;\n        }(\n          abs(this.startX - this.startX2),\n          abs(this.startY - this.startY2),\n          abs(this.endX - this.endX2),\n          abs(this.endY - this.endY2)\n        ));\n\n        this.startX2 = this.endX2;\n        this.startY2 = this.endY2;\n        renderable = false;\n        break;\n\n      // Crop image\n      case 'crop':\n        if (range.x && range.y) {\n          offset = this.$cropper.offset();\n          left = this.startX - offset.left;\n          top = this.startY - offset.top;\n          width = cropBox.minWidth;\n          height = cropBox.minHeight;\n\n          if (range.x > 0) {\n            if (range.y > 0) {\n              dragType = 'se';\n            } else {\n              dragType = 'ne';\n              top -= height;\n            }\n          } else {\n            if (range.y > 0) {\n              dragType = 'sw';\n              left -= width;\n            } else {\n              dragType = 'nw';\n              left -= width;\n              top -= height;\n            }\n          }\n\n          // Show the cropBox if is hidden\n          if (!this.cropped) {\n            this.cropped = true;\n            this.$cropBox.removeClass(CLASS_HIDDEN);\n          }\n        }\n\n        break;\n\n      // No default\n    }\n\n    if (renderable) {\n      cropBox.width = width;\n      cropBox.height = height;\n      cropBox.left = left;\n      cropBox.top = top;\n      this.dragType = dragType;\n\n      this.renderCropBox();\n    }\n\n    // Override\n    this.startX = this.endX;\n    this.startY = this.endY;\n  };\n\n  $.extend(Cropper.prototype, prototype);\n\n  Cropper.DEFAULTS = {\n    // Defines the aspect ratio of the crop box\n    // Type: Number\n    aspectRatio: NaN,\n\n    // Defines the percentage of automatic cropping area when initializes\n    // Type: Number (Must large than 0 and less than 1)\n    autoCropArea: 0.8, // 80%\n\n    // Outputs the cropping results.\n    // Type: Function\n    crop: null,\n\n    // Previous/latest crop data\n    // Type: Object\n    data: null,\n\n    // Add extra containers for previewing\n    // Type: String (jQuery selector)\n    preview: '',\n\n    // Toggles\n    strict: true, // strict mode, the image cannot zoom out less than the container\n    responsive: true, // Rebuild when resize the window\n    checkImageOrigin: true, // Check if the target image is cross origin\n\n    modal: true, // Show the black modal\n    guides: true, // Show the dashed lines for guiding\n    center: true, // Show the center indicator for guiding\n    highlight: true, // Show the white modal to highlight the crop box\n    background: true, // Show the grid background\n\n    autoCrop: true, // Enable to crop the image automatically when initialize\n    dragCrop: true, // Enable to create new crop box by dragging over the image\n    movable: true, // Enable to move the image\n    rotatable: true, // Enable to rotate the image\n    zoomable: true, // Enable to zoom the image\n    touchDragZoom: true, // Enable to zoom the image by wheeling mouse\n    mouseWheelZoom: true, // Enable to zoom the image by dragging touch\n    cropBoxMovable: true, // Enable to move the crop box\n    cropBoxResizable: true, // Enable to resize the crop box\n    doubleClickToggle: true, // Toggle drag mode between \"crop\" and \"move\" when double click on the cropper\n\n    // Dimensions\n    minCanvasWidth: 0,\n    minCanvasHeight: 0,\n    minCropBoxWidth: 0,\n    minCropBoxHeight: 0,\n    minContainerWidth: 200,\n    minContainerHeight: 100,\n\n    // Events\n    build: null, // Function\n    built: null, // Function\n    dragstart: null, // Function\n    dragmove: null, // Function\n    dragend: null, // Function\n    zoomin: null, // Function\n    zoomout: null, // Function\n    change: null // Function\n  };\n\n  Cropper.setDefaults = function (options) {\n    $.extend(Cropper.DEFAULTS, options);\n  };\n\n  // Use the string compressor: Strmin (https://github.com/fengyuanchen/strmin)\n  Cropper.TEMPLATE = (function (source, words) {\n    words = words.split(',');\n    return source.replace(/\\d+/g, function (i) {\n      return words[i];\n    });\n  })('<0 6=\"5-container\"><0 6=\"5-canvas\"></0><0 6=\"5-2-9\"></0><0 6=\"5-crop-9\"><1 6=\"5-view-9\"></1><1 6=\"5-8 8-h\"></1><1 6=\"5-8 8-v\"></1><1 6=\"5-center\"></1><1 6=\"5-face\"></1><1 6=\"5-7 7-e\" 3-2=\"e\"></1><1 6=\"5-7 7-n\" 3-2=\"n\"></1><1 6=\"5-7 7-w\" 3-2=\"w\"></1><1 6=\"5-7 7-s\" 3-2=\"s\"></1><1 6=\"5-4 4-e\" 3-2=\"e\"></1><1 6=\"5-4 4-n\" 3-2=\"n\"></1><1 6=\"5-4 4-w\" 3-2=\"w\"></1><1 6=\"5-4 4-s\" 3-2=\"s\"></1><1 6=\"5-4 4-ne\" 3-2=\"ne\"></1><1 6=\"5-4 4-nw\" 3-2=\"nw\"></1><1 6=\"5-4 4-sw\" 3-2=\"sw\"></1><1 6=\"5-4 4-se\" 3-2=\"se\"></1></0></0>', 'div,span,drag,data,point,cropper,class,line,dashed,box');\n\n  /* Template source:\n  <div class=\"cropper-container\">\n    <div class=\"cropper-canvas\"></div>\n    <div class=\"cropper-drag-box\"></div>\n    <div class=\"cropper-crop-box\">\n      <span class=\"cropper-view-box\"></span>\n      <span class=\"cropper-dashed dashed-h\"></span>\n      <span class=\"cropper-dashed dashed-v\"></span>\n      <span class=\"cropper-center\"></span>\n      <span class=\"cropper-face\"></span>\n      <span class=\"cropper-line line-e\" data-drag=\"e\"></span>\n      <span class=\"cropper-line line-n\" data-drag=\"n\"></span>\n      <span class=\"cropper-line line-w\" data-drag=\"w\"></span>\n      <span class=\"cropper-line line-s\" data-drag=\"s\"></span>\n      <span class=\"cropper-point point-e\" data-drag=\"e\"></span>\n      <span class=\"cropper-point point-n\" data-drag=\"n\"></span>\n      <span class=\"cropper-point point-w\" data-drag=\"w\"></span>\n      <span class=\"cropper-point point-s\" data-drag=\"s\"></span>\n      <span class=\"cropper-point point-ne\" data-drag=\"ne\"></span>\n      <span class=\"cropper-point point-nw\" data-drag=\"nw\"></span>\n      <span class=\"cropper-point point-sw\" data-drag=\"sw\"></span>\n      <span class=\"cropper-point point-se\" data-drag=\"se\"></span>\n    </div>\n  </div>\n  */\n\n  // Save the other cropper\n  Cropper.other = $.fn.cropper;\n\n  // Register as jQuery plugin\n  $.fn.cropper = function (options) {\n    var args = toArray(arguments, 1),\n        result;\n\n    this.each(function () {\n      var $this = $(this),\n          data = $this.data('cropper'),\n          fn;\n\n      if (!data) {\n        if (/destroy/.test(options)) {\n          return;\n        }\n\n        $this.data('cropper', (data = new Cropper(this, options)));\n      }\n\n      if (typeof options === 'string' && $.isFunction((fn = data[options]))) {\n        result = fn.apply(data, args);\n      }\n    });\n\n    return isUndefined(result) ? this : result;\n  };\n\n  $.fn.cropper.Constructor = Cropper;\n  $.fn.cropper.setDefaults = Cropper.setDefaults;\n\n  // No conflict\n  $.fn.cropper.noConflict = function () {\n    $.fn.cropper = Cropper.other;\n    return this;\n  };\n\n});\n","/**\n * Created by jong on 7/29/15.\n */\n\nvar ILabCrop=(function(){\n    var _data={};\n\n    var updatePreviewWidth=function() {\n        var width = jQuery('#ilab-crop-preview-title').width();\n        jQuery('#ilab-crop-preview').css({\n            'height' : (width / _data.aspect_ratio) + 'px',\n            'width' : width + 'px'\n        });\n    };\n\n    var init=function(settings){\n        _data=settings;\n\n        jQuery(document).ready(function($){\n            if (typeof _data.aspect_ratio !== 'undefined')\n            {\n                updatePreviewWidth();\n\n                var cropperData;\n                if (typeof _data.prev_crop_x !== 'undefined') {\n                    cropperData = {\n                        x : _data.prev_crop_x,\n                        y : _data.prev_crop_y,\n                        width : _data.prev_crop_width,\n                        height : _data.prev_crop_height\n                    };\n                    console.log(cropperData);\n                } else {\n                    cropperData = {};\n                }\n\n                jQuery('#ilab-crop-container').css({\n                    'max-width' : jQuery('#ilab-modal-wrapper .attachments').width() + 'px',\n                    'max-height' : jQuery('#ilab-modal-wrapper .attachments').height() + 'px'\n                });\n\n                jQuery('#ilab-cropper').on('built.cropper', function() {\n                    updatePreviewWidth();\n                }).cropper({\n                    aspectRatio : _data.aspect_ratio,\n                    minWidth : _data.min_width,\n                    minHeight : _data.min_height,\n                    modal : true,\n                    zoomable: false,\n                    mouseWheelZoom: false,\n                    dragCrop: false,\n                    autoCropArea: 1,\n                    movable: false,\n                    data : cropperData,\n                    checkImageOrigin: false,\n                    preview: '#ilab-crop-preview'\n                });\n\n                jQuery(window).resize(function(){\n                    updatePreviewWidth();\n                    data=jQuery('#ilab-cropper').cropper('getData');\n                    jQuery('#ilab-cropper').cropper('reset');\n                    jQuery('#ilab-cropper').cropper('setData',data);\n                });\n            }\n        });\n    };\n\n    var crop=function(){\n        jQuery('#ilab-modal-wrapper .spinner').addClass('is-active');\n\n        var data = jQuery('#ilab-cropper').cropper('getData');\n        data['action'] = 'ilab_perform_crop';\n        data['post'] = _data.image_id;\n        data['size'] = _data.size;\n        jQuery.post(ajaxurl, data, function(response) {\n            if (response.status=='ok')\n                jQuery('#ilab-current-crop-img').attr('src',response.src);\n\n            jQuery('#ilab-modal-wrapper .spinner').removeClass('is-active');\n            jQuery(window).resize();\n        });\n    };\n\n    return {\n        crop: crop,\n        init: init\n    };\n})();\n","/**\n * Created by jong on 8/8/15.\n */\n\nvar ImgixComponents=(function(){\n    var byteToHex=function(byte) {\n        var hexChar = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\",\"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n        return hexChar[(byte >> 4) & 0x0f] + hexChar[byte & 0x0f];\n    };\n\n    return {\n        utilities: {\n          byteToHex:byteToHex\n      }\n    };\n})();","\n(function($){\n    ImgixComponents.ImgixSlider=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.valueLabel=container.find('.imgix-param-title-right > h3');\n        this.slider=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var sliderRef=this;\n\n        this.resetButton.on('click',function(){\n            sliderRef.reset();\n        });\n\n        this.slider.on('input',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n        });\n\n        this.slider.on('change',function(){\n            sliderRef.valueLabel.text(sliderRef.slider.val());\n            sliderRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixSlider.prototype.destroy=function() {\n        this.slider.off('input');\n        this.slider.off('change');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixSlider.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        this.valueLabel.text(val);\n        this.slider.val(val);\n        this.slider.hide().show(0);\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixSlider.prototype.saveValue=function(data) {\n        if (this.slider.val()!=this.defaultValue)\n            data[this.param]=this.slider.val();\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixColor=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.colorPicker=container.find('.imgix-param-color');\n        this.alphaSlider=container.find('.imgix-param-alpha');\n        this.type=container.data('param-type');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.param=container.data('param');\n        this.defaultValue=container.data('default-value');\n\n        var colorPickerRef=this;\n\n        if (this.type=='blend-color') {\n            this.blendParam=container.data('blend-param');\n            this.blendSelect = container.find('.imgix-param-blend');\n\n            var currentBlend=container.data('blend-value');\n            this.blendSelect.val(currentBlend);\n\n            this.blendSelect.on('change',function(){\n                colorPickerRef.delegate.preview();\n            });\n        }\n\n        this.colorPicker.wpColorPicker({\n            palettes: false,\n            change: function(event, ui) {\n                colorPickerRef.delegate.preview();\n            }\n        });\n\n        this.alphaSlider.on('change',function(){\n            colorPickerRef.delegate.preview();\n        });\n\n        this.resetButton.on('click',function(){\n            colorPickerRef.reset();\n        });\n    };\n\n    ImgixComponents.ImgixColor.prototype.destroy=function() {\n        this.alphaSlider.off('change');\n        if (this.type=='blend-color') {\n            this.blendSelect.off('change');\n        }\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixColor.prototype.reset=function(data) {\n        var blend='none';\n        var val;\n\n        if (data && data.hasOwnProperty(this.blendParam))\n        {\n            blend=data[this.blendParam];\n        }\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n        }\n        else\n            val=this.defaultValue;\n\n        val=val.replace('#','');\n        if (val.length==8)\n        {\n            var alpha=(parseInt('0x'+val.substring(0,2))/255.0)*100.0;\n            val=val.substring(2);\n\n            this.alphaSlider.val(Math.round(alpha));\n            this.alphaSlider.hide().show(0);\n        }\n\n        this.colorPicker.val('#'+val);\n        this.colorPicker.wpColorPicker('color', '#'+val);\n\n        if (this.type=='blend-color') {\n            this.blendSelect.val(blend);\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixColor.prototype.saveValue=function(data) {\n        if (this.alphaSlider.val()>0) {\n            data[this.param] = '#' + ImgixComponents.utilities.byteToHex(Math.round((parseFloat(this.alphaSlider.val()) / 100.0) * 255.0)) + this.colorPicker.val().replace('#', '');\n\n            if (this.type == 'blend-color') {\n                if (this.blendSelect.val()!='none') {\n                    data[this.blendParam] = this.blendSelect.val();\n                }\n            }\n        }\n\n        return data;\n    };\n\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixAlignment=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.alignmentParam=container.find('.imgix-param');\n        this.resetButton=container.find('.imgix-param-reset');\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        var alignmentRef=this;\n\n        this.resetButton.on('click',function(){\n            alignmentRef.reset();\n        });\n\n        container.find('.imgix-alignment-button').on('click',function(){\n            var button=$(this);\n            alignmentRef.container.find('.imgix-alignment-button').each(function(){\n                $(this).removeClass('selected-alignment');\n            });\n\n            button.addClass('selected-alignment');\n            alignmentRef.alignmentParam.val(button.data('param-value'));\n            alignmentRef.delegate.preview();\n        });\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.destroy=function() {\n        this.resetButton.off('click');\n        this.container.find('.imgix-alignment-button').off('click');\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n            val=data[this.param];\n        else\n            val=this.defaultValue;\n\n        if (val=='')\n            val=this.defaultValue;\n\n        this.container.find('.imgix-alignment-button').each(function(){\n            var button=$(this);\n            if (button.data('param-value')==val)\n                button.addClass('selected-alignment');\n            else\n                button.removeClass('selected-alignment');\n        });\n\n        this.alignmentParam.val(val);\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixAlignment.prototype.saveValue=function(data) {\n        if (this.alignmentParam.val()!=this.defaultValue)\n            data[this.param]=this.alignmentParam.val();\n\n        return data;\n    };\n}(jQuery));\n","(function($){\n\n    ImgixComponents.ImgixMediaChooser=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.preview=container.find('.imgix-media-preview img');\n        this.mediaInput=container.find('.imgix-param');\n        this.selectButton=container.find('.imgix-media-button');\n        this.resetButton=container.find('.imgix-param-reset');\n\n        this.defaultValue=container.data('default-value');\n        this.param=container.data('param');\n\n        this.uploader=wp.media({\n            title: 'Select Watermark',\n            button: {\n                text: 'Select Watermark'\n            },\n            multiple: false\n        });\n\n        var mediaRef=this;\n\n        this.resetButton.on('click',function(){\n            mediaRef.reset();\n        });\n\n        this.uploader.on('select', function() {\n            attachment = mediaRef.uploader.state().get('selection').first().toJSON();\n            mediaRef.mediaInput.val(attachment.id);\n            mediaRef.preview.attr('src',attachment.url);\n\n            mediaRef.delegate.preview();\n        });\n\n        this.selectButton.on('click',function(e){\n            e.preventDefault();\n            mediaRef.uploader.open();\n            return false;\n        });\n\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.destroy=function() {\n        this.selectButton.off('click');\n        this.uploader.off('select');\n        this.resetButton.off('click');\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.reset=function(data) {\n        var val;\n\n        if (data && data.hasOwnProperty(this.param))\n        {\n            val=data[this.param];\n            this.mediaInput.val(val);\n        }\n        else\n            this.mediaInput.val('');\n\n        if (data && data.hasOwnProperty(this.param+'_url'))\n        {\n            this.preview.attr('src',data[this.param+'_url']);\n        }\n        else\n        {\n            this.preview.removeAttr('src').replaceWith(this.preview.clone());\n            this.preview=this.container.find('.imgix-media-preview img');\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixMediaChooser.prototype.saveValue=function(data) {\n        var val=this.mediaInput.val();\n\n        if (val && val!='')\n            data[this.param]=val;\n\n        return data;\n    };\n\n}(jQuery));\n","\n(function($){\n    ImgixComponents.ImgixPillbox=function(delegate, container)\n    {\n        this.delegate=delegate;\n        this.container=container;\n        this.param=container.data('param');\n        this.values=container.data('param-values').split(',');\n        this.buttons=container.find('.ilabm-pill');\n        this.inputs={};\n\n        var pillboxRef=this;\n\n        this.buttons.each(function(){\n            var button=$(this);\n            var valueName=button.data('param');\n            pillboxRef.inputs[valueName]=pillboxRef.container.find(\"input[name='\"+valueName+\"']\");\n            button.on('click',function(e){\n                e.preventDefault();\n\n                if (pillboxRef.inputs[valueName].val()==0)\n                {\n                    pillboxRef.inputs[valueName].val(1);\n                    button.addClass('pill-selected');\n                }\n                else\n                {\n                    pillboxRef.inputs[valueName].val(0);\n                    button.removeClass('pill-selected');\n                }\n\n                pillboxRef.delegate.preview();\n\n                return false;\n            });\n        });\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.destroy=function() {\n        this.buttons.off('click');\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.reset=function(data) {\n        this.buttons.each(function(){\n           $(this).removeClass('pill-selected');\n        });\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            pillboxRef.inputs[key].val(0);\n        });\n\n        if (data && data.hasOwnProperty(this.param)) {\n            var val = data[this.param].split(',');\n\n\n            val.forEach(function (key, index) {\n                pillboxRef.inputs[key].val(1);\n                pillboxRef.container.find('imgix-pill-' + key).addClass('pill-selected');\n            });\n        }\n\n        this.delegate.preview();\n    };\n\n    ImgixComponents.ImgixPillbox.prototype.saveValue=function(data) {\n        var vals=[];\n\n        var pillboxRef=this;\n        Object.keys(this.inputs).forEach(function(key,index){\n            if (pillboxRef.inputs[key].val()==1)\n                vals.push(key);\n        });\n\n        if (vals.length>0)\n            data[this.param]=vals.join(',');\n\n        return data;\n    };\n\n}(jQuery));\n","/**\n * Created by jong on 8/9/15.\n */\n\nvar ILabImgixPresets=function($,delegate,container) {\n\n    this.delegate=delegate;\n    this.container=container.find('.ilabm-bottom-bar');\n    this.presetSelect=this.container.find('.imgix-presets');\n    this.presetContainer=this.container.find('.imgix-preset-container');\n    this.presetDefaultCheckbox=this.container.find('.imgix-preset-make-default');\n\n    var self=this;\n\n    self.presetSelect.on('change',function(){\n        if (self.presetSelect.val==0)\n        {\n            self.delegate.resetAll();\n            self.presetDefaultCheckbox.prop('checked',false);\n            return;\n        }\n\n        var preset=self.delegate.settings.presets[self.presetSelect.val()];\n        if (preset.default_for==self.delegate.settings.size)\n            self.presetDefaultCheckbox.prop('checked',true);\n\n        self.delegate.bindPreset(preset);\n    });\n\n    this.container.find('.imgix-new-preset-button').on('click',function(){\n        self.newPreset();\n    });\n\n    this.container.find('.imgix-save-preset-button').on('click',function(){\n        self.savePreset();\n    });\n\n    this.container.find('.imgix-delete-preset-button').on('click',function(){\n        self.deletePreset();\n    });\n\n    this.init=function() {\n        self.presetSelect.find('option').remove();\n\n        if (Object.keys(self.delegate.settings.presets).length==0)\n        {\n            self.presetContainer.addClass('is-hidden');\n        }\n        else\n        {\n            Object.keys(self.delegate.settings.presets).forEach(function(key,index) {\n                console.log(key);\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",'0')\n                    .text('None'));\n\n                self.presetSelect.append($('<option></option>')\n                    .attr(\"value\",key)\n                    .text(self.delegate.settings.presets[key].title));\n            });\n\n            self.presetContainer.removeClass('is-hidden');\n            self.presetSelect.val(self.delegate.settings.currentPreset);\n        }\n    };\n\n    this.clearSelected=function(){\n        self.presetSelect.val(0);\n        self.presetDefaultCheckbox.prop('checked',false);\n    };\n\n    this.setCurrentPreset=function(preset, is_default){\n        if (is_default)\n            self.presetDefaultCheckbox.prop('checked',true);\n        else\n            self.presetDefaultCheckbox.prop('checked',false);\n\n        self.presetSelect.val(preset);\n    };\n\n    this.newPreset=function(){\n        var name=prompt(\"New preset name\");\n        if (name!=null)\n        {\n            self.delegate.displayStatus('Saving preset ...');\n\n            var data={};\n            data['name']=name;\n            if (self.presetDefaultCheckbox.is(':checked'))\n                data['make_default']=1;\n\n            self.delegate.postAjax('ilab_imgix_new_preset', data, function(response) {\n                self.delegate.hideStatus();\n                if (response.status=='ok')\n                {\n                    self.delegate.settings.currentPreset=response.currentPreset;\n                    self.delegate.settings.presets=response.presets;\n\n                    self.init();\n                }\n            });\n        }\n    };\n\n    this.savePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        self.delegate.displayStatus('Saving preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n        if (self.presetDefaultCheckbox.is(':checked'))\n            data['make_default']=1;\n\n        self.delegate.postAjax('ilab_imgix_save_preset', data, function(response) {\n            self.delegate.hideStatus();\n        });\n    };\n\n    this.deletePreset=function(){\n        if (self.presetSelect.val()==null)\n            return;\n\n        if (!confirm(\"Are you sure you want to delete this preset?\"))\n            return;\n\n        self.delegate.displayStatus('Delete preset ...');\n\n        var data={};\n        data['key']=self.presetSelect.val();\n\n        self.delegate.postAjax('ilab_imgix_delete_preset', data, function(response) {\n            self.delegate.hideStatus();\n            if (response.status=='ok')\n            {\n                self.delegate.settings.currentPreset=response.currentPreset;\n                self.delegate.settings.presets=response.presets;\n\n                self.init();\n\n                self.delegate.bindUI(response);\n            }\n        });\n    };\n\n    this.init();\n};","(function($){\n\n    $.fn.ilabSidebarTabs=function(options){\n        var settings= $.extend({},options);\n\n        var firstTab=false;\n        return this.find('.ilabm-sidebar-tab').each(function(){\n            var tab=$(this);\n            var target=settings.container.find('.'+tab.data('target'));\n\n            if (!firstTab)\n            {\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                firstTab=true;\n            }\n\n            tab.on('click',function(e){\n                e.preventDefault();\n\n                settings.container.find(\".ilabm-sidebar-tab\").each(function() {\n                    var otherTab = $(this);\n                    var tabTarget = settings.container.find('.' + otherTab.data('target'));\n\n                    otherTab.removeClass('active-tab');\n                    tabTarget.addClass('is-hidden');\n                });\n\n                tab.addClass('active-tab');\n                target.removeClass('is-hidden');\n\n                return false;\n            });\n        });\n    };\n\n}(jQuery));\n","/**\n * Image Editing Module\n */\n\nvar ILabImageEdit=function($, settings){\n    console.log(settings);\n\n    this.previewTimeout=null;\n    this.previewsSuspended=false;\n    this.parameters=[];\n\n    var self=this;\n\n    this.settings=settings;\n\n    this.modalContainer=$('#ilabm-container-'+settings.modal_id);\n    this.waitModal=this.modalContainer.find('.ilabm-preview-wait-modal');\n    this.previewImage=this.modalContainer.find('.imgix-preview-image');\n\n    this.presets=new ILabImgixPresets($,this,this.modalContainer);\n\n    this.modalContainer.find('.imgix-button-reset-all').on('click',function(){\n        self.resetAll();\n    });\n    this.modalContainer.find('.imgix-button-save-adjustments').on('click',function(){\n        self.apply();\n    });\n\n    this.modalContainer.find('.imgix-parameter').each(function(){\n        var container=$(this);\n        var type=container.data('param-type');\n        if (type=='slider')\n            self.parameters.push(new ImgixComponents.ImgixSlider(self,container));\n        else if ((type=='color') || (type=='blend-color'))\n            self.parameters.push(new ImgixComponents.ImgixColor(self,container));\n        else if (type=='pillbox')\n            self.parameters.push(new ImgixComponents.ImgixPillbox(self,container));\n        else if (type=='media-chooser')\n            self.parameters.push(new ImgixComponents.ImgixMediaChooser(self,container));\n        else if (type=='alignment')\n            self.parameters.push(new ImgixComponents.ImgixAlignment(self,container));\n    });\n\n    this.modalContainer.on('click','.imgix-pill',function(){\n        var paramName=$(this).data('param');\n        var param=self.modalContainer.find('#imgix-param-'+paramName);\n        if (param.val()==1)\n        {\n            param.val(0);\n            $(this).removeClass('pill-selected');\n        }\n        else\n        {\n            param.val(1);\n            $(this).addClass('pill-selected');\n        }\n\n        self.preview();\n    });\n\n    this.modalContainer.find('.ilabm-editor-tabs').ilabTabs({\n        currentValue: self.settings.size,\n        tabSelected:function(tab){\n            ILabModal.loadURL(tab.data('url'),true,function(response){\n                console.log(response);\n                self.bindUI(response);\n            });\n        }\n    });\n\n    this.modalContainer.find(\".ilabm-sidebar-tabs\").ilabSidebarTabs({\n        delegate: this,\n        container: this.modalContainer\n    });\n\n    /**\n     * Performs the wordpress ajax post\n     * @param action\n     * @param data\n     * @param callback\n     * @private\n     */\n    this.postAjax=function(action,data,callback){\n        var postData={};\n        self.parameters.forEach(function(value,index){\n            postData=value.saveValue(postData);\n        });\n\n        console.log(postData);\n\n        data['image_id'] = self.settings.image_id;\n        data['action'] = action;\n        data['size'] = self.settings.size;\n        data['settings']=postData;\n\n        $.post(ajaxurl, data, callback);\n    }\n\n    /**\n     * Performs the actual request for a preview to be generated\n     * @private\n     */\n    function _preview(){\n        self.displayStatus('Building preview ...');\n\n        self.waitModal.removeClass('is-hidden');\n\n        self.postAjax('ilab_imgix_preview',{},function(response) {\n            self.hideStatus();\n            if (response.status=='ok')\n            {\n                if (self.settings.debug)\n                    console.log(response.src);\n\n                self.previewImage.on('load',function(){\n                    self.waitModal.addClass('is-hidden');\n                });\n\n                self.previewImage.attr('src',response.src);\n            }\n            else\n            {\n                self.waitModal.addClass('is-hidden');\n            }\n        });\n    }\n\n    /**\n     * Requests a preview to be generated.\n     */\n    this.preview=function(){\n        if (self.previewsSuspended)\n            return;\n\n        ILabModal.makeDirty();\n\n        clearTimeout(self.previewTimeout);\n        self.previewTimeout=setTimeout(_preview,500);\n    };\n\n    /**\n     * Binds the UI to the json response when selecting a tab or changing a preset\n     * @param data\n     */\n    this.bindUI=function(data){\n        if (data.hasOwnProperty('currentPreset') && (data.currentPreset!=null) && (data.currentPreset!='')) {\n            var p=self.settings.presets[data.currentPreset];\n            self.presets.setCurrentPreset(data.currentPreset,(p.default_for==data.size));\n        }\n        else\n            self.presets.clearSelected();\n\n        self.previewsSuspended=true;\n        self.settings.size=data.size;\n        self.settings.settings=data.settings;\n\n        var rebind=function(){\n            self.previewImage.off('load',rebind);\n            self.parameters.forEach(function(value,index){\n                value.reset(data.settings);\n            });\n\n            self.previewsSuspended=false;\n            ILabModal.makeClean();\n        };\n\n        if (data.src)\n        {\n            self.previewImage.on('load',rebind);\n            self.previewImage.attr('src',data.src);\n        }\n        else\n            rebind();\n    };\n\n    this.bindPreset=function(preset){\n        console.log(preset);\n        self.previewsSuspended=true;\n        self.settings.settings=preset.settings;\n\n        self.previewImage.off('load');\n        self.parameters.forEach(function(value,index){\n            value.reset(self.settings.settings);\n        });\n\n        self.previewsSuspended=false;\n        self.preview();\n    };\n\n\n    this.apply=function(){\n        self.displayStatus('Saving adjustments ...');\n\n        self.postAjax('ilab_imgix_save', {}, function(response) {\n            self.hideStatus();\n            ILabModal.makeClean();\n        });\n    };\n\n    /**\n     * Reset all of the values\n     */\n    this.resetAll=function(){\n        self.parameters.forEach(function(value,index){\n            value.reset();\n        });\n    };\n\n    this.displayStatus=function(message){\n        self.modalContainer.find('#imgix-status-label').text(message);\n        self.modalContainer.find('#imgix-status-container').removeClass('is-hidden');\n    };\n\n    this.hideStatus=function(){\n        self.modalContainer.find('#imgix-status-container').addClass('is-hidden');\n    };\n};\n\n"],"sourceRoot":"js/"}